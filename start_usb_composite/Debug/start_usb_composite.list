
start_usb_composite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000caf0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800cc80  0800cc80  0000dc80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd30  0800cd30  0000e304  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cd30  0800cd30  0000dd30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd38  0800cd38  0000e304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd38  0800cd38  0000dd38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cd3c  0800cd3c  0000dd3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000304  20000000  0800cd40  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e304  2**0
                  CONTENTS
 10 .bss          00002704  20000304  20000304  0000e304  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002a08  20002a08  0000e304  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e304  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020a3b  00000000  00000000  0000e334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005147  00000000  00000000  0002ed6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a80  00000000  00000000  00033eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000146c  00000000  00000000  00035938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002701b  00000000  00000000  00036da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024eeb  00000000  00000000  0005ddbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6a60  00000000  00000000  00082caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015970a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000073a0  00000000  00000000  00159750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  00160af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000304 	.word	0x20000304
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cc68 	.word	0x0800cc68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000308 	.word	0x20000308
 80001cc:	0800cc68 	.word	0x0800cc68

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <HAL_CAN_MspInit>:
  /* USER CODE END CAN1_Init 2 */

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	@ 0x28
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a21      	ldr	r2, [pc, #132]	@ (8000640 <HAL_CAN_MspInit+0xa4>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d13b      	bne.n	8000636 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
 80005c2:	4b20      	ldr	r3, [pc, #128]	@ (8000644 <HAL_CAN_MspInit+0xa8>)
 80005c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c6:	4a1f      	ldr	r2, [pc, #124]	@ (8000644 <HAL_CAN_MspInit+0xa8>)
 80005c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80005ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000644 <HAL_CAN_MspInit+0xa8>)
 80005d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	4b19      	ldr	r3, [pc, #100]	@ (8000644 <HAL_CAN_MspInit+0xa8>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	4a18      	ldr	r2, [pc, #96]	@ (8000644 <HAL_CAN_MspInit+0xa8>)
 80005e4:	f043 0308 	orr.w	r3, r3, #8
 80005e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ea:	4b16      	ldr	r3, [pc, #88]	@ (8000644 <HAL_CAN_MspInit+0xa8>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	f003 0308 	and.w	r3, r3, #8
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005f6:	2303      	movs	r3, #3
 80005f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fa:	2302      	movs	r3, #2
 80005fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000602:	2303      	movs	r3, #3
 8000604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000606:	2309      	movs	r3, #9
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	480d      	ldr	r0, [pc, #52]	@ (8000648 <HAL_CAN_MspInit+0xac>)
 8000612:	f002 fd5f 	bl	80030d4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2100      	movs	r1, #0
 800061a:	2014      	movs	r0, #20
 800061c:	f002 f93b 	bl	8002896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000620:	2014      	movs	r0, #20
 8000622:	f002 f954 	bl	80028ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2100      	movs	r1, #0
 800062a:	2015      	movs	r0, #21
 800062c:	f002 f933 	bl	8002896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000630:	2015      	movs	r0, #21
 8000632:	f002 f94c 	bl	80028ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000636:	bf00      	nop
 8000638:	3728      	adds	r7, #40	@ 0x28
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40006400 	.word	0x40006400
 8000644:	40023800 	.word	0x40023800
 8000648:	40020c00 	.word	0x40020c00

0800064c <HAL_CAN_MspDeInit>:

void HAL_CAN_MspDeInit(CAN_HandleTypeDef* canHandle)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]

  if(canHandle->Instance==CAN1)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a0b      	ldr	r2, [pc, #44]	@ (8000688 <HAL_CAN_MspDeInit+0x3c>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d10f      	bne.n	800067e <HAL_CAN_MspDeInit+0x32>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 800065e:	4b0b      	ldr	r3, [pc, #44]	@ (800068c <HAL_CAN_MspDeInit+0x40>)
 8000660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000662:	4a0a      	ldr	r2, [pc, #40]	@ (800068c <HAL_CAN_MspDeInit+0x40>)
 8000664:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000668:	6413      	str	r3, [r2, #64]	@ 0x40

    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1);
 800066a:	2103      	movs	r1, #3
 800066c:	4808      	ldr	r0, [pc, #32]	@ (8000690 <HAL_CAN_MspDeInit+0x44>)
 800066e:	f002 fecd 	bl	800340c <HAL_GPIO_DeInit>

    /* CAN1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8000672:	2014      	movs	r0, #20
 8000674:	f002 f939 	bl	80028ea <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
 8000678:	2015      	movs	r0, #21
 800067a:	f002 f936 	bl	80028ea <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40006400 	.word	0x40006400
 800068c:	40023800 	.word	0x40023800
 8000690:	40020c00 	.word	0x40020c00

08000694 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b10      	ldr	r3, [pc, #64]	@ (80006e0 <MX_DMA_Init+0x4c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a0f      	ldr	r2, [pc, #60]	@ (80006e0 <MX_DMA_Init+0x4c>)
 80006a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <MX_DMA_Init+0x4c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	200b      	movs	r0, #11
 80006bc:	f002 f8eb 	bl	8002896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006c0:	200b      	movs	r0, #11
 80006c2:	f002 f904 	bl	80028ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	202f      	movs	r0, #47	@ 0x2f
 80006cc:	f002 f8e3 	bl	8002896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80006d0:	202f      	movs	r0, #47	@ 0x2f
 80006d2:	f002 f8fc 	bl	80028ce <HAL_NVIC_EnableIRQ>

}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800

080006e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	@ 0x28
 80006e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
 80006fe:	4b2d      	ldr	r3, [pc, #180]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	4a2c      	ldr	r2, [pc, #176]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000708:	6313      	str	r3, [r2, #48]	@ 0x30
 800070a:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	4b26      	ldr	r3, [pc, #152]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a25      	ldr	r2, [pc, #148]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b23      	ldr	r3, [pc, #140]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	4b1f      	ldr	r3, [pc, #124]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a1e      	ldr	r2, [pc, #120]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b1c      	ldr	r3, [pc, #112]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b18      	ldr	r3, [pc, #96]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a17      	ldr	r2, [pc, #92]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 8000758:	f043 0308 	orr.w	r3, r3, #8
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
 800075e:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	f003 0308 	and.w	r3, r3, #8
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a10      	ldr	r2, [pc, #64]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	21c0      	movs	r1, #192	@ 0xc0
 800078a:	480b      	ldr	r0, [pc, #44]	@ (80007b8 <MX_GPIO_Init+0xd4>)
 800078c:	f002 ff3a 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000790:	23c0      	movs	r3, #192	@ 0xc0
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	4804      	ldr	r0, [pc, #16]	@ (80007b8 <MX_GPIO_Init+0xd4>)
 80007a8:	f002 fc94 	bl	80030d4 <HAL_GPIO_Init>

}
 80007ac:	bf00      	nop
 80007ae:	3728      	adds	r7, #40	@ 0x28
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020000 	.word	0x40020000

080007bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c0:	4b12      	ldr	r3, [pc, #72]	@ (800080c <MX_I2C1_Init+0x50>)
 80007c2:	4a13      	ldr	r2, [pc, #76]	@ (8000810 <MX_I2C1_Init+0x54>)
 80007c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007c6:	4b11      	ldr	r3, [pc, #68]	@ (800080c <MX_I2C1_Init+0x50>)
 80007c8:	4a12      	ldr	r2, [pc, #72]	@ (8000814 <MX_I2C1_Init+0x58>)
 80007ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <MX_I2C1_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <MX_I2C1_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_I2C1_Init+0x50>)
 80007da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	@ (800080c <MX_I2C1_Init+0x50>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007e6:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_I2C1_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ec:	4b07      	ldr	r3, [pc, #28]	@ (800080c <MX_I2C1_Init+0x50>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f2:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_I2C1_Init+0x50>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	@ (800080c <MX_I2C1_Init+0x50>)
 80007fa:	f002 ff37 	bl	800366c <HAL_I2C_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000804:	f000 fb52 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000348 	.word	0x20000348
 8000810:	40005400 	.word	0x40005400
 8000814:	00061a80 	.word	0x00061a80

08000818 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	@ 0x28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a19      	ldr	r2, [pc, #100]	@ (800089c <HAL_I2C_MspInit+0x84>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d12b      	bne.n	8000892 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	4b18      	ldr	r3, [pc, #96]	@ (80008a0 <HAL_I2C_MspInit+0x88>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a17      	ldr	r2, [pc, #92]	@ (80008a0 <HAL_I2C_MspInit+0x88>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <HAL_I2C_MspInit+0x88>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000856:	23c0      	movs	r3, #192	@ 0xc0
 8000858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800085a:	2312      	movs	r3, #18
 800085c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000862:	2303      	movs	r3, #3
 8000864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000866:	2304      	movs	r3, #4
 8000868:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	480c      	ldr	r0, [pc, #48]	@ (80008a4 <HAL_I2C_MspInit+0x8c>)
 8000872:	f002 fc2f 	bl	80030d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <HAL_I2C_MspInit+0x88>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087e:	4a08      	ldr	r2, [pc, #32]	@ (80008a0 <HAL_I2C_MspInit+0x88>)
 8000880:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000884:	6413      	str	r3, [r2, #64]	@ 0x40
 8000886:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <HAL_I2C_MspInit+0x88>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000892:	bf00      	nop
 8000894:	3728      	adds	r7, #40	@ 0x28
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40005400 	.word	0x40005400
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020400 	.word	0x40020400

080008a8 <Process_HID_Frames>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Process_HID_Frames(void) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b090      	sub	sp, #64	@ 0x40
 80008ac:	af00      	add	r7, sp, #0
    uint8_t frame[HID_FRAME_SIZE];

    while (HID_Frame_Read(&hid_frame_fifo,frame)) {
 80008ae:	e007      	b.n	80008c0 <Process_HID_Frames+0x18>
    	FuncSendCanArray[frame[0]](frame);
 80008b0:	783b      	ldrb	r3, [r7, #0]
 80008b2:	461a      	mov	r2, r3
 80008b4:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <Process_HID_Frames+0x34>)
 80008b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ba:	463a      	mov	r2, r7
 80008bc:	4610      	mov	r0, r2
 80008be:	4798      	blx	r3
    while (HID_Frame_Read(&hid_frame_fifo,frame)) {
 80008c0:	463b      	mov	r3, r7
 80008c2:	4619      	mov	r1, r3
 80008c4:	4806      	ldr	r0, [pc, #24]	@ (80008e0 <Process_HID_Frames+0x38>)
 80008c6:	f008 fda5 	bl	8009414 <HID_Frame_Read>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d1ef      	bne.n	80008b0 <Process_HID_Frames+0x8>
    }
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	3740      	adds	r7, #64	@ 0x40
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000000 	.word	0x20000000
 80008e0:	20002310 	.word	0x20002310

080008e4 <SendCanConfig>:

uint8_t SendCanConfig(uint8_t *data){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	switch(data[1]){
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3301      	adds	r3, #1
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d107      	bne.n	8000906 <SendCanConfig+0x22>
	case 0 :
		SendCanConfigDisconnect(data);
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f000 f832 	bl	8000960 <SendCanConfigDisconnect>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80008fc:	2140      	movs	r1, #64	@ 0x40
 80008fe:	4808      	ldr	r0, [pc, #32]	@ (8000920 <SendCanConfig+0x3c>)
 8000900:	f002 fe99 	bl	8003636 <HAL_GPIO_TogglePin>
		break;
 8000904:	e007      	b.n	8000916 <SendCanConfig+0x32>
	default:
		SendCanConfigConnect(data);
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f000 f80c 	bl	8000924 <SendCanConfigConnect>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 800090c:	2180      	movs	r1, #128	@ 0x80
 800090e:	4804      	ldr	r0, [pc, #16]	@ (8000920 <SendCanConfig+0x3c>)
 8000910:	f002 fe91 	bl	8003636 <HAL_GPIO_TogglePin>
		break;
 8000914:	bf00      	nop
	}
}
 8000916:	bf00      	nop
 8000918:	4618      	mov	r0, r3
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40020000 	.word	0x40020000

08000924 <SendCanConfigConnect>:
uint8_t SendCanConfigConnect(uint8_t *data){
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	  HAL_TIM_Base_Start(&htim5);
 800092c:	4809      	ldr	r0, [pc, #36]	@ (8000954 <SendCanConfigConnect+0x30>)
 800092e:	f004 ff1b 	bl	8005768 <HAL_TIM_Base_Start>
	  HAL_TIM_Base_Start_IT(&htim4);
 8000932:	4809      	ldr	r0, [pc, #36]	@ (8000958 <SendCanConfigConnect+0x34>)
 8000934:	f004 ffa8 	bl	8005888 <HAL_TIM_Base_Start_IT>
	  SendCanConfigBaud(data);
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f000 f831 	bl	80009a0 <SendCanConfigBaud>
	  HAL_CAN_Start(&hcan1);
 800093e:	4807      	ldr	r0, [pc, #28]	@ (800095c <SendCanConfigConnect+0x38>)
 8000940:	f001 f9d6 	bl	8001cf0 <HAL_CAN_Start>
	  CanRx_init();
 8000944:	f000 f984 	bl	8000c50 <CanRx_init>
}
 8000948:	bf00      	nop
 800094a:	4618      	mov	r0, r3
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000718 	.word	0x20000718
 8000958:	200006d0 	.word	0x200006d0
 800095c:	20000320 	.word	0x20000320

08000960 <SendCanConfigDisconnect>:
uint8_t SendCanConfigDisconnect(uint8_t *data){
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	  HAL_TIM_Base_Stop(&htim5);
 8000968:	480a      	ldr	r0, [pc, #40]	@ (8000994 <SendCanConfigDisconnect+0x34>)
 800096a:	f004 ff65 	bl	8005838 <HAL_TIM_Base_Stop>
	  HAL_TIM_Base_Stop_IT(&htim4);
 800096e:	480a      	ldr	r0, [pc, #40]	@ (8000998 <SendCanConfigDisconnect+0x38>)
 8000970:	f004 fffa 	bl	8005968 <HAL_TIM_Base_Stop_IT>
	  if (HAL_CAN_DeInit(&hcan1) != HAL_OK)
 8000974:	4809      	ldr	r0, [pc, #36]	@ (800099c <SendCanConfigDisconnect+0x3c>)
 8000976:	f001 f8ba 	bl	8001aee <HAL_CAN_DeInit>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SendCanConfigDisconnect+0x24>
	   {
	     Error_Handler();
 8000980:	f000 fa94 	bl	8000eac <Error_Handler>
	   }
	  HAL_CAN_Stop(&hcan1);
 8000984:	4805      	ldr	r0, [pc, #20]	@ (800099c <SendCanConfigDisconnect+0x3c>)
 8000986:	f001 f9f7 	bl	8001d78 <HAL_CAN_Stop>

}
 800098a:	bf00      	nop
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000718 	.word	0x20000718
 8000998:	200006d0 	.word	0x200006d0
 800099c:	20000320 	.word	0x20000320

080009a0 <SendCanConfigBaud>:
uint8_t SendCanConfigBaud(uint8_t *data){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	@ 0x28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	uint32_t baudrate = ((data[2] << 8) | data[1]) * 1000;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3302      	adds	r3, #2
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	021b      	lsls	r3, r3, #8
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	3201      	adds	r2, #1
 80009b4:	7812      	ldrb	r2, [r2, #0]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009bc:	fb02 f303 	mul.w	r3, r2, r3
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t desired_sample_point = 875;
 80009c2:	f240 336b 	movw	r3, #875	@ 0x36b
 80009c6:	847b      	strh	r3, [r7, #34]	@ 0x22
    CAN_TimingConfig config = find_best_timing(baudrate, desired_sample_point);
 80009c8:	f107 0308 	add.w	r3, r7, #8
 80009cc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80009ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 f83b 	bl	8000a4c <find_best_timing>
	hcan1.Instance = CAN1;
 80009d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a44 <SendCanConfigBaud+0xa4>)
 80009d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a48 <SendCanConfigBaud+0xa8>)
 80009da:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = config.prescaler;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	461a      	mov	r2, r3
 80009e0:	4b18      	ldr	r3, [pc, #96]	@ (8000a44 <SendCanConfigBaud+0xa4>)
 80009e2:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009e4:	4b17      	ldr	r3, [pc, #92]	@ (8000a44 <SendCanConfigBaud+0xa4>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009ea:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <SendCanConfigBaud+0xa4>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = (config.tseg1 - 1 ) << 16;
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	041b      	lsls	r3, r3, #16
 80009f6:	4a13      	ldr	r2, [pc, #76]	@ (8000a44 <SendCanConfigBaud+0xa4>)
 80009f8:	6113      	str	r3, [r2, #16]
	hcan1.Init.TimeSeg2 = (config.tseg2 - 1 ) << 20;
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	3b01      	subs	r3, #1
 80009fe:	051b      	lsls	r3, r3, #20
 8000a00:	4a10      	ldr	r2, [pc, #64]	@ (8000a44 <SendCanConfigBaud+0xa4>)
 8000a02:	6153      	str	r3, [r2, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	@ (8000a44 <SendCanConfigBaud+0xa4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a44 <SendCanConfigBaud+0xa4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <SendCanConfigBaud+0xa4>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	@ (8000a44 <SendCanConfigBaud+0xa4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <SendCanConfigBaud+0xa4>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <SendCanConfigBaud+0xa4>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a28:	4806      	ldr	r0, [pc, #24]	@ (8000a44 <SendCanConfigBaud+0xa4>)
 8000a2a:	f000 ff65 	bl	80018f8 <HAL_CAN_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SendCanConfigBaud+0x98>
	{
		Error_Handler();
 8000a34:	f000 fa3a 	bl	8000eac <Error_Handler>
	}
}
 8000a38:	bf00      	nop
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3728      	adds	r7, #40	@ 0x28
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000320 	.word	0x20000320
 8000a48:	40006400 	.word	0x40006400

08000a4c <find_best_timing>:
 *                 - So sánh sai số với desired_sample_point_scaled
 *                 - Nếu sai số nhỏ hơn trước đó → lưu lại cấu hình tốt nhất
 *   [3] Trả về cấu hình có sai số nhỏ nhất với sample point mong muốn
 */
CAN_TimingConfig find_best_timing(uint32_t baudrate, uint16_t desired_sample_point_scaled)
{
 8000a4c:	b5b0      	push	{r4, r5, r7, lr}
 8000a4e:	b092      	sub	sp, #72	@ 0x48
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	4613      	mov	r3, r2
 8000a58:	80fb      	strh	r3, [r7, #6]
    CAN_TimingConfig best_config = {0};
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]
 8000a6a:	615a      	str	r2, [r3, #20]
    best_config.sample_point_error = FLT_MAX;
 8000a6c:	4b47      	ldr	r3, [pc, #284]	@ (8000b8c <find_best_timing+0x140>)
 8000a6e:	62bb      	str	r3, [r7, #40]	@ 0x28

    for (int tq_total = 8; tq_total <= 25; tq_total++) {
 8000a70:	2308      	movs	r3, #8
 8000a72:	647b      	str	r3, [r7, #68]	@ 0x44
 8000a74:	e078      	b.n	8000b68 <find_best_timing+0x11c>
        if ((HAL_RCC_GetPCLK1Freq() / baudrate) % tq_total != 0)
 8000a76:	f004 fdff 	bl	8005678 <HAL_RCC_GetPCLK1Freq>
 8000a7a:	4602      	mov	r2, r0
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000a84:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a88:	fb01 f202 	mul.w	r2, r1, r2
 8000a8c:	1a9b      	subs	r3, r3, r2
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d166      	bne.n	8000b60 <find_best_timing+0x114>
            continue;

        int prescaler = (HAL_RCC_GetPCLK1Freq() / baudrate) / tq_total;
 8000a92:	f004 fdf1 	bl	8005678 <HAL_RCC_GetPCLK1Freq>
 8000a96:	4602      	mov	r2, r0
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa4:	63bb      	str	r3, [r7, #56]	@ 0x38

        for (int tseg1 = 1; tseg1 <= 16; tseg1++) {
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8000aaa:	e055      	b.n	8000b58 <find_best_timing+0x10c>
            for (int tseg2 = 1; tseg2 <= 8; tseg2++) {
 8000aac:	2301      	movs	r3, #1
 8000aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ab0:	e04c      	b.n	8000b4c <find_best_timing+0x100>
                if (1 + tseg1 + tseg2 != tq_total)
 8000ab2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ab4:	1c5a      	adds	r2, r3, #1
 8000ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ab8:	4413      	add	r3, r2
 8000aba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d141      	bne.n	8000b44 <find_best_timing+0xf8>
                    continue;

                float actual_sp = (1.0f + tseg1) / tq_total;
 8000ac0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ac2:	ee07 3a90 	vmov	s15, r3
 8000ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ace:	ee77 6a87 	vadd.f32	s13, s15, s14
 8000ad2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ad4:	ee07 3a90 	vmov	s15, r3
 8000ad8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000adc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ae0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
                uint16_t actual_sp_scaled = (uint16_t)(actual_sp * SAMPLE_POINT_SCALE);
 8000ae4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000ae8:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8000b90 <find_best_timing+0x144>
 8000aec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000af0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000af4:	ee17 3a90 	vmov	r3, s15
 8000af8:	867b      	strh	r3, [r7, #50]	@ 0x32

                float error = fabsf((float)(actual_sp_scaled - desired_sample_point_scaled) / SAMPLE_POINT_SCALE);
 8000afa:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8000afc:	88fb      	ldrh	r3, [r7, #6]
 8000afe:	1ad3      	subs	r3, r2, r3
 8000b00:	ee07 3a90 	vmov	s15, r3
 8000b04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b08:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8000b90 <find_best_timing+0x144>
 8000b0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b10:	eef0 7ae7 	vabs.f32	s15, s15
 8000b14:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

                if (error < best_config.sample_point_error) {
 8000b18:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000b1c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000b20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b28:	d50d      	bpl.n	8000b46 <find_best_timing+0xfa>
                    best_config.tq_total = tq_total;
 8000b2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b2c:	617b      	str	r3, [r7, #20]
                    best_config.prescaler = prescaler;
 8000b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b30:	61bb      	str	r3, [r7, #24]
                    best_config.tseg1 = tseg1;
 8000b32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b34:	61fb      	str	r3, [r7, #28]
                    best_config.tseg2 = tseg2;
 8000b36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b38:	623b      	str	r3, [r7, #32]
                    best_config.actual_sample_point = actual_sp;
 8000b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
                    best_config.sample_point_error = error;
 8000b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b42:	e000      	b.n	8000b46 <find_best_timing+0xfa>
                    continue;
 8000b44:	bf00      	nop
            for (int tseg2 = 1; tseg2 <= 8; tseg2++) {
 8000b46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b48:	3301      	adds	r3, #1
 8000b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b4e:	2b08      	cmp	r3, #8
 8000b50:	ddaf      	ble.n	8000ab2 <find_best_timing+0x66>
        for (int tseg1 = 1; tseg1 <= 16; tseg1++) {
 8000b52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b54:	3301      	adds	r3, #1
 8000b56:	643b      	str	r3, [r7, #64]	@ 0x40
 8000b58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b5a:	2b10      	cmp	r3, #16
 8000b5c:	dda6      	ble.n	8000aac <find_best_timing+0x60>
 8000b5e:	e000      	b.n	8000b62 <find_best_timing+0x116>
            continue;
 8000b60:	bf00      	nop
    for (int tq_total = 8; tq_total <= 25; tq_total++) {
 8000b62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b64:	3301      	adds	r3, #1
 8000b66:	647b      	str	r3, [r7, #68]	@ 0x44
 8000b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b6a:	2b19      	cmp	r3, #25
 8000b6c:	dd83      	ble.n	8000a76 <find_best_timing+0x2a>
                }
            }
        }
    }

    return best_config;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	461d      	mov	r5, r3
 8000b72:	f107 0414 	add.w	r4, r7, #20
 8000b76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b7e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	3748      	adds	r7, #72	@ 0x48
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bdb0      	pop	{r4, r5, r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	7f7fffff 	.word	0x7f7fffff
 8000b90:	447a0000 	.word	0x447a0000

08000b94 <SendCanMessage>:


uint8_t SendCanMessage(uint8_t *data){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	uint32_t id = (data[1]<< 24) |(data[2]<< 16) |(data[3]<< 8) | data[4];
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	061a      	lsls	r2, r3, #24
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3302      	adds	r3, #2
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	041b      	lsls	r3, r3, #16
 8000bac:	431a      	orrs	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	3303      	adds	r3, #3
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	021b      	lsls	r3, r3, #8
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	3204      	adds	r2, #4
 8000bbc:	7812      	ldrb	r2, [r2, #0]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	60fb      	str	r3, [r7, #12]
	CanTx_init(id, data[5], &data[6]);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3305      	adds	r3, #5
 8000bc6:	7819      	ldrb	r1, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3306      	adds	r3, #6
 8000bcc:	461a      	mov	r2, r3
 8000bce:	68f8      	ldr	r0, [r7, #12]
 8000bd0:	f000 f806 	bl	8000be0 <CanTx_init>
}
 8000bd4:	bf00      	nop
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <CanTx_init>:

void CanTx_init(uint32_t id, uint8_t DlcAndType, uint8_t *data){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	460b      	mov	r3, r1
 8000bea:	607a      	str	r2, [r7, #4]
 8000bec:	72fb      	strb	r3, [r7, #11]
	uint32_t txMailbox;
    switch(DlcAndType & 0x0F){
 8000bee:	7afb      	ldrb	r3, [r7, #11]
 8000bf0:	f003 030f 	and.w	r3, r3, #15
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d008      	beq.n	8000c0a <CanTx_init+0x2a>
 8000bf8:	2b04      	cmp	r3, #4
 8000bfa:	d10d      	bne.n	8000c18 <CanTx_init+0x38>
    case CAN_ID_EXT:
    	TxHeader.IDE = CAN_ID_EXT;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <CanTx_init+0x68>)
 8000bfe:	2204      	movs	r2, #4
 8000c00:	609a      	str	r2, [r3, #8]
    	TxHeader.ExtId = id;
 8000c02:	4a11      	ldr	r2, [pc, #68]	@ (8000c48 <CanTx_init+0x68>)
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	6053      	str	r3, [r2, #4]
    	break;
 8000c08:	e006      	b.n	8000c18 <CanTx_init+0x38>
    case CAN_ID_STD:
    	TxHeader.IDE = CAN_ID_STD;
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <CanTx_init+0x68>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
    	TxHeader.StdId = id;
 8000c10:	4a0d      	ldr	r2, [pc, #52]	@ (8000c48 <CanTx_init+0x68>)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	6013      	str	r3, [r2, #0]
    	break;
 8000c16:	bf00      	nop
    }
	TxHeader.RTR = CAN_RTR_DATA;
 8000c18:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <CanTx_init+0x68>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = (DlcAndType >> 4);
 8000c1e:	7afb      	ldrb	r3, [r7, #11]
 8000c20:	091b      	lsrs	r3, r3, #4
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <CanTx_init+0x68>)
 8000c28:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000c2a:	4b07      	ldr	r3, [pc, #28]	@ (8000c48 <CanTx_init+0x68>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	751a      	strb	r2, [r3, #20]
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &txMailbox);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	4904      	ldr	r1, [pc, #16]	@ (8000c48 <CanTx_init+0x68>)
 8000c38:	4804      	ldr	r0, [pc, #16]	@ (8000c4c <CanTx_init+0x6c>)
 8000c3a:	f001 f8e6 	bl	8001e0a <HAL_CAN_AddTxMessage>
}
 8000c3e:	bf00      	nop
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	2000039c 	.word	0x2000039c
 8000c4c:	20000320 	.word	0x20000320

08000c50 <CanRx_init>:

void CanRx_init(void){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0

		sFilterConfig.FilterBank = 0;
 8000c54:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <CanRx_init+0x50>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	615a      	str	r2, [r3, #20]
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <CanRx_init+0x50>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <CanRx_init+0x50>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	61da      	str	r2, [r3, #28]
		sFilterConfig.FilterIdHigh = 0x0000;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <CanRx_init+0x50>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
		sFilterConfig.FilterIdLow = 0;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <CanRx_init+0x50>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	605a      	str	r2, [r3, #4]
		sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <CanRx_init+0x50>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
		sFilterConfig.FilterMaskIdLow = 0;
 8000c78:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <CanRx_init+0x50>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
		sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <CanRx_init+0x50>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
		sFilterConfig.FilterActivation = ENABLE;
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <CanRx_init+0x50>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	621a      	str	r2, [r3, #32]
		HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8000c8a:	4905      	ldr	r1, [pc, #20]	@ (8000ca0 <CanRx_init+0x50>)
 8000c8c:	4805      	ldr	r0, [pc, #20]	@ (8000ca4 <CanRx_init+0x54>)
 8000c8e:	f000 ff51 	bl	8001b34 <HAL_CAN_ConfigFilter>
		HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);
 8000c92:	2102      	movs	r1, #2
 8000c94:	4803      	ldr	r0, [pc, #12]	@ (8000ca4 <CanRx_init+0x54>)
 8000c96:	f001 faaa 	bl	80021ee <HAL_CAN_ActivateNotification>
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200003d0 	.word	0x200003d0
 8000ca4:	20000320 	.word	0x20000320

08000ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cac:	f000 fd8e 	bl	80017cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb0:	f000 f818 	bl	8000ce4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb4:	f7ff fd16 	bl	80006e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cb8:	f7ff fcec 	bl	8000694 <MX_DMA_Init>
  //MX_CAN1_Init();
  MX_USB_OTG_FS_PCD_Init();
 8000cbc:	f000 fcda 	bl	8001674 <MX_USB_OTG_FS_PCD_Init>
  MX_UART5_Init();
 8000cc0:	f000 fba4 	bl	800140c <MX_UART5_Init>
  MX_I2C1_Init();
 8000cc4:	f7ff fd7a 	bl	80007bc <MX_I2C1_Init>
  MX_TIM1_Init();
 8000cc8:	f000 f9f0 	bl	80010ac <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ccc:	f000 fa3e 	bl	800114c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000cd0:	f000 fa88 	bl	80011e4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000cd4:	f000 fad4 	bl	8001280 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000cd8:	f007 fe06 	bl	80088e8 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Process_HID_Frames();
 8000cdc:	f7ff fde4 	bl	80008a8 <Process_HID_Frames>
 8000ce0:	e7fc      	b.n	8000cdc <main+0x34>
	...

08000ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b094      	sub	sp, #80	@ 0x50
 8000ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cea:	f107 0320 	add.w	r3, r7, #32
 8000cee:	2230      	movs	r2, #48	@ 0x30
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f00b fb3a 	bl	800c36c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	4b28      	ldr	r3, [pc, #160]	@ (8000db0 <SystemClock_Config+0xcc>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d10:	4a27      	ldr	r2, [pc, #156]	@ (8000db0 <SystemClock_Config+0xcc>)
 8000d12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d18:	4b25      	ldr	r3, [pc, #148]	@ (8000db0 <SystemClock_Config+0xcc>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d24:	2300      	movs	r3, #0
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	4b22      	ldr	r3, [pc, #136]	@ (8000db4 <SystemClock_Config+0xd0>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a21      	ldr	r2, [pc, #132]	@ (8000db4 <SystemClock_Config+0xd0>)
 8000d2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	4b1f      	ldr	r3, [pc, #124]	@ (8000db4 <SystemClock_Config+0xd0>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d40:	2301      	movs	r3, #1
 8000d42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d48:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d4e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d54:	2304      	movs	r3, #4
 8000d56:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d58:	23a8      	movs	r3, #168	@ 0xa8
 8000d5a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d60:	2307      	movs	r3, #7
 8000d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d64:	f107 0320 	add.w	r3, r7, #32
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f004 f815 	bl	8004d98 <HAL_RCC_OscConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d74:	f000 f89a 	bl	8000eac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d78:	230f      	movs	r3, #15
 8000d7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d84:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2105      	movs	r1, #5
 8000d96:	4618      	mov	r0, r3
 8000d98:	f004 fa76 	bl	8005288 <HAL_RCC_ClockConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000da2:	f000 f883 	bl	8000eac <Error_Handler>
  }
}
 8000da6:	bf00      	nop
 8000da8:	3750      	adds	r7, #80	@ 0x50
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40007000 	.word	0x40007000

08000db8 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
    memset(usbFrame, 0, sizeof(usbFrame));
 8000dc0:	2240      	movs	r2, #64	@ 0x40
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4833      	ldr	r0, [pc, #204]	@ (8000e94 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000dc6:	f00b fad1 	bl	800c36c <memset>
        uint32_t timestemp = __HAL_TIM_GET_COUNTER(&htim5);
 8000dca:	4b33      	ldr	r3, [pc, #204]	@ (8000e98 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dd0:	613b      	str	r3, [r7, #16]
    if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, &usbFrame[6]) == HAL_OK)
 8000dd2:	4b32      	ldr	r3, [pc, #200]	@ (8000e9c <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000dd4:	4a32      	ldr	r2, [pc, #200]	@ (8000ea0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4832      	ldr	r0, [pc, #200]	@ (8000ea4 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000dda:	f001 f8e6 	bl	8001faa <HAL_CAN_GetRxMessage>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d152      	bne.n	8000e8a <HAL_CAN_RxFifo0MsgPendingCallback+0xd2>
    {
      // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7); // báo nhận
        // Byte 0: CMD
        usbFrame[0] = 0x03;
 8000de4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e94 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000de6:	2203      	movs	r2, #3
 8000de8:	701a      	strb	r2, [r3, #0]

        // Byte 1: DLC (4-bit high), FrameType (4-bit low)
        uint8_t dlc = RxHeader.DLC & 0x0F;
 8000dea:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	f003 030f 	and.w	r3, r3, #15
 8000df4:	73fb      	strb	r3, [r7, #15]
        uint8_t frameType = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	75fb      	strb	r3, [r7, #23]
        if (RxHeader.IDE == CAN_ID_EXT)
 8000dfa:	4b29      	ldr	r3, [pc, #164]	@ (8000ea0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	d101      	bne.n	8000e06 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
            {frameType = 8;}
 8000e02:	2308      	movs	r3, #8
 8000e04:	75fb      	strb	r3, [r7, #23]
//        else if (RxHeader.RTR == CAN_RTR_REMOTE)
//            frameType = 2;

        usbFrame[1] = (dlc << 4) | (frameType & 0x0F);
 8000e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0a:	011b      	lsls	r3, r3, #4
 8000e0c:	b25a      	sxtb	r2, r3
 8000e0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e12:	f003 030f 	and.w	r3, r3, #15
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	b25b      	sxtb	r3, r3
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e94 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000e20:	705a      	strb	r2, [r3, #1]
        //usbFrame[1] = (dlc << 4) | (RxHeader.IDE & 0x0F);

        // Byte 2~5: CAN ID (big-endian)
        uint32_t canId = (RxHeader.IDE == CAN_ID_EXT) ? RxHeader.ExtId : RxHeader.StdId;
 8000e22:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	d102      	bne.n	8000e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	e001      	b.n	8000e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
 8000e30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	60bb      	str	r3, [r7, #8]
        usbFrame[2] = (canId >> 24) & 0xFF;
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	0e1b      	lsrs	r3, r3, #24
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000e3e:	709a      	strb	r2, [r3, #2]
        usbFrame[3] = (canId >> 16) & 0xFF;
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	0c1b      	lsrs	r3, r3, #16
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000e48:	70da      	strb	r2, [r3, #3]
        usbFrame[4] = (canId >> 8) & 0xFF;
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	0a1b      	lsrs	r3, r3, #8
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	4b10      	ldr	r3, [pc, #64]	@ (8000e94 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000e52:	711a      	strb	r2, [r3, #4]
        usbFrame[5] = canId & 0xFF;
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000e5a:	715a      	strb	r2, [r3, #5]
        usbFrame[14] = (timestemp >> 24) & 0xFF;
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	0e1b      	lsrs	r3, r3, #24
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000e64:	739a      	strb	r2, [r3, #14]
        usbFrame[15] = (timestemp >> 16) & 0xFF;
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	0c1b      	lsrs	r3, r3, #16
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	4b09      	ldr	r3, [pc, #36]	@ (8000e94 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000e6e:	73da      	strb	r2, [r3, #15]
        usbFrame[16]= (timestemp >> 8) & 0xFF;
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	0a1b      	lsrs	r3, r3, #8
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4b07      	ldr	r3, [pc, #28]	@ (8000e94 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000e78:	741a      	strb	r2, [r3, #16]
        usbFrame[17] = (timestemp ) & 0xFF;
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4b05      	ldr	r3, [pc, #20]	@ (8000e94 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000e80:	745a      	strb	r2, [r3, #17]
        HID_Frame_Write(&hid_frame_fifo_receive,usbFrame);
 8000e82:	4904      	ldr	r1, [pc, #16]	@ (8000e94 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000e84:	4808      	ldr	r0, [pc, #32]	@ (8000ea8 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000e86:	f008 fa95 	bl	80093b4 <HID_Frame_Write>
        //USBD_CUSTOM_HID_SendReport(&hUsbDevice,usbFrame, HID_FRAME_SIZE);
    }
}
 8000e8a:	bf00      	nop
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200003f8 	.word	0x200003f8
 8000e98:	20000718 	.word	0x20000718
 8000e9c:	200003fe 	.word	0x200003fe
 8000ea0:	200003b4 	.word	0x200003b4
 8000ea4:	20000320 	.word	0x20000320
 8000ea8:	20000438 	.word	0x20000438

08000eac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb0:	b672      	cpsid	i
}
 8000eb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <Error_Handler+0x8>

08000eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	4b10      	ldr	r3, [pc, #64]	@ (8000f04 <HAL_MspInit+0x4c>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec6:	4a0f      	ldr	r2, [pc, #60]	@ (8000f04 <HAL_MspInit+0x4c>)
 8000ec8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ecc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ece:	4b0d      	ldr	r3, [pc, #52]	@ (8000f04 <HAL_MspInit+0x4c>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <HAL_MspInit+0x4c>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee2:	4a08      	ldr	r2, [pc, #32]	@ (8000f04 <HAL_MspInit+0x4c>)
 8000ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ee8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eea:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <HAL_MspInit+0x4c>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40023800 	.word	0x40023800

08000f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <NMI_Handler+0x4>

08000f10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <HardFault_Handler+0x4>

08000f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <MemManage_Handler+0x4>

08000f20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <BusFault_Handler+0x4>

08000f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <UsageFault_Handler+0x4>

08000f30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5e:	f000 fc87 	bl	8001870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8000f6c:	4802      	ldr	r0, [pc, #8]	@ (8000f78 <DMA1_Stream0_IRQHandler+0x10>)
 8000f6e:	f001 fe75 	bl	8002c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000808 	.word	0x20000808

08000f7c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f80:	4802      	ldr	r0, [pc, #8]	@ (8000f8c <CAN1_RX0_IRQHandler+0x10>)
 8000f82:	f001 f95a 	bl	800223a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000320 	.word	0x20000320

08000f90 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f94:	4802      	ldr	r0, [pc, #8]	@ (8000fa0 <CAN1_RX1_IRQHandler+0x10>)
 8000f96:	f001 f950 	bl	800223a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000320 	.word	0x20000320

08000fa4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fa8:	4802      	ldr	r0, [pc, #8]	@ (8000fb4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000faa:	f004 fd0c 	bl	80059c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000640 	.word	0x20000640

08000fb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fbc:	4802      	ldr	r0, [pc, #8]	@ (8000fc8 <TIM2_IRQHandler+0x10>)
 8000fbe:	f004 fd02 	bl	80059c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000688 	.word	0x20000688

08000fcc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000fd0:	4802      	ldr	r0, [pc, #8]	@ (8000fdc <TIM4_IRQHandler+0x10>)
 8000fd2:	f004 fcf8 	bl	80059c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200006d0 	.word	0x200006d0

08000fe0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8000fe4:	4802      	ldr	r0, [pc, #8]	@ (8000ff0 <DMA1_Stream7_IRQHandler+0x10>)
 8000fe6:	f001 fe39 	bl	8002c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200007a8 	.word	0x200007a8

08000ff4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000ff8:	4802      	ldr	r0, [pc, #8]	@ (8001004 <UART5_IRQHandler+0x10>)
 8000ffa:	f005 f9c5 	bl	8006388 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000760 	.word	0x20000760

08001008 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800100c:	4802      	ldr	r0, [pc, #8]	@ (8001018 <OTG_FS_IRQHandler+0x10>)
 800100e:	f002 fdb5 	bl	8003b7c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000868 	.word	0x20000868

0800101c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001024:	4a14      	ldr	r2, [pc, #80]	@ (8001078 <_sbrk+0x5c>)
 8001026:	4b15      	ldr	r3, [pc, #84]	@ (800107c <_sbrk+0x60>)
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001030:	4b13      	ldr	r3, [pc, #76]	@ (8001080 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d102      	bne.n	800103e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001038:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <_sbrk+0x64>)
 800103a:	4a12      	ldr	r2, [pc, #72]	@ (8001084 <_sbrk+0x68>)
 800103c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800103e:	4b10      	ldr	r3, [pc, #64]	@ (8001080 <_sbrk+0x64>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	429a      	cmp	r2, r3
 800104a:	d207      	bcs.n	800105c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800104c:	f00b f996 	bl	800c37c <__errno>
 8001050:	4603      	mov	r3, r0
 8001052:	220c      	movs	r2, #12
 8001054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
 800105a:	e009      	b.n	8001070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800105c:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <_sbrk+0x64>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001062:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	4a05      	ldr	r2, [pc, #20]	@ (8001080 <_sbrk+0x64>)
 800106c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20020000 	.word	0x20020000
 800107c:	00000400 	.word	0x00000400
 8001080:	2000063c 	.word	0x2000063c
 8001084:	20002a08 	.word	0x20002a08

08001088 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800108c:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <SystemInit+0x20>)
 800108e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001092:	4a05      	ldr	r2, [pc, #20]	@ (80010a8 <SystemInit+0x20>)
 8001094:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001098:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b2:	f107 0308 	add.w	r3, r7, #8
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	463b      	mov	r3, r7
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001144 <MX_TIM1_Init+0x98>)
 80010ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001148 <MX_TIM1_Init+0x9c>)
 80010cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 80010ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001144 <MX_TIM1_Init+0x98>)
 80010d0:	22a7      	movs	r2, #167	@ 0xa7
 80010d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001144 <MX_TIM1_Init+0x98>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80010da:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <MX_TIM1_Init+0x98>)
 80010dc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e2:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <MX_TIM1_Init+0x98>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010e8:	4b16      	ldr	r3, [pc, #88]	@ (8001144 <MX_TIM1_Init+0x98>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ee:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <MX_TIM1_Init+0x98>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010f4:	4813      	ldr	r0, [pc, #76]	@ (8001144 <MX_TIM1_Init+0x98>)
 80010f6:	f004 fae7 	bl	80056c8 <HAL_TIM_Base_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001100:	f7ff fed4 	bl	8000eac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001104:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001108:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	4619      	mov	r1, r3
 8001110:	480c      	ldr	r0, [pc, #48]	@ (8001144 <MX_TIM1_Init+0x98>)
 8001112:	f004 fd48 	bl	8005ba6 <HAL_TIM_ConfigClockSource>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800111c:	f7ff fec6 	bl	8000eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001120:	2300      	movs	r3, #0
 8001122:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001128:	463b      	mov	r3, r7
 800112a:	4619      	mov	r1, r3
 800112c:	4805      	ldr	r0, [pc, #20]	@ (8001144 <MX_TIM1_Init+0x98>)
 800112e:	f004 ff69 	bl	8006004 <HAL_TIMEx_MasterConfigSynchronization>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001138:	f7ff feb8 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800113c:	bf00      	nop
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000640 	.word	0x20000640
 8001148:	40010000 	.word	0x40010000

0800114c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001152:	f107 0308 	add.w	r3, r7, #8
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001160:	463b      	mov	r3, r7
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001168:	4b1d      	ldr	r3, [pc, #116]	@ (80011e0 <MX_TIM2_Init+0x94>)
 800116a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800116e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001170:	4b1b      	ldr	r3, [pc, #108]	@ (80011e0 <MX_TIM2_Init+0x94>)
 8001172:	2253      	movs	r2, #83	@ 0x53
 8001174:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001176:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <MX_TIM2_Init+0x94>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 800117c:	4b18      	ldr	r3, [pc, #96]	@ (80011e0 <MX_TIM2_Init+0x94>)
 800117e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001182:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001184:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <MX_TIM2_Init+0x94>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118a:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <MX_TIM2_Init+0x94>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001190:	4813      	ldr	r0, [pc, #76]	@ (80011e0 <MX_TIM2_Init+0x94>)
 8001192:	f004 fa99 	bl	80056c8 <HAL_TIM_Base_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800119c:	f7ff fe86 	bl	8000eac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011a6:	f107 0308 	add.w	r3, r7, #8
 80011aa:	4619      	mov	r1, r3
 80011ac:	480c      	ldr	r0, [pc, #48]	@ (80011e0 <MX_TIM2_Init+0x94>)
 80011ae:	f004 fcfa 	bl	8005ba6 <HAL_TIM_ConfigClockSource>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011b8:	f7ff fe78 	bl	8000eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011bc:	2300      	movs	r3, #0
 80011be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011c4:	463b      	mov	r3, r7
 80011c6:	4619      	mov	r1, r3
 80011c8:	4805      	ldr	r0, [pc, #20]	@ (80011e0 <MX_TIM2_Init+0x94>)
 80011ca:	f004 ff1b 	bl	8006004 <HAL_TIMEx_MasterConfigSynchronization>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011d4:	f7ff fe6a 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000688 	.word	0x20000688

080011e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ea:	f107 0308 	add.w	r3, r7, #8
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f8:	463b      	mov	r3, r7
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001200:	4b1d      	ldr	r3, [pc, #116]	@ (8001278 <MX_TIM4_Init+0x94>)
 8001202:	4a1e      	ldr	r2, [pc, #120]	@ (800127c <MX_TIM4_Init+0x98>)
 8001204:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001206:	4b1c      	ldr	r3, [pc, #112]	@ (8001278 <MX_TIM4_Init+0x94>)
 8001208:	2253      	movs	r2, #83	@ 0x53
 800120a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120c:	4b1a      	ldr	r3, [pc, #104]	@ (8001278 <MX_TIM4_Init+0x94>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 450;
 8001212:	4b19      	ldr	r3, [pc, #100]	@ (8001278 <MX_TIM4_Init+0x94>)
 8001214:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001218:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121a:	4b17      	ldr	r3, [pc, #92]	@ (8001278 <MX_TIM4_Init+0x94>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001220:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <MX_TIM4_Init+0x94>)
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001226:	4814      	ldr	r0, [pc, #80]	@ (8001278 <MX_TIM4_Init+0x94>)
 8001228:	f004 fa4e 	bl	80056c8 <HAL_TIM_Base_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001232:	f7ff fe3b 	bl	8000eac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001236:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800123a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800123c:	f107 0308 	add.w	r3, r7, #8
 8001240:	4619      	mov	r1, r3
 8001242:	480d      	ldr	r0, [pc, #52]	@ (8001278 <MX_TIM4_Init+0x94>)
 8001244:	f004 fcaf 	bl	8005ba6 <HAL_TIM_ConfigClockSource>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800124e:	f7ff fe2d 	bl	8000eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800125a:	463b      	mov	r3, r7
 800125c:	4619      	mov	r1, r3
 800125e:	4806      	ldr	r0, [pc, #24]	@ (8001278 <MX_TIM4_Init+0x94>)
 8001260:	f004 fed0 	bl	8006004 <HAL_TIMEx_MasterConfigSynchronization>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800126a:	f7ff fe1f 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200006d0 	.word	0x200006d0
 800127c:	40000800 	.word	0x40000800

08001280 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001286:	f107 0308 	add.w	r3, r7, #8
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001294:	463b      	mov	r3, r7
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800129c:	4b1d      	ldr	r3, [pc, #116]	@ (8001314 <MX_TIM5_Init+0x94>)
 800129e:	4a1e      	ldr	r2, [pc, #120]	@ (8001318 <MX_TIM5_Init+0x98>)
 80012a0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8399;
 80012a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001314 <MX_TIM5_Init+0x94>)
 80012a4:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80012a8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001314 <MX_TIM5_Init+0x94>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffffffff;
 80012b0:	4b18      	ldr	r3, [pc, #96]	@ (8001314 <MX_TIM5_Init+0x94>)
 80012b2:	f04f 32ff 	mov.w	r2, #4294967295
 80012b6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b8:	4b16      	ldr	r3, [pc, #88]	@ (8001314 <MX_TIM5_Init+0x94>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012be:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <MX_TIM5_Init+0x94>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80012c4:	4813      	ldr	r0, [pc, #76]	@ (8001314 <MX_TIM5_Init+0x94>)
 80012c6:	f004 f9ff 	bl	80056c8 <HAL_TIM_Base_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80012d0:	f7ff fdec 	bl	8000eac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80012da:	f107 0308 	add.w	r3, r7, #8
 80012de:	4619      	mov	r1, r3
 80012e0:	480c      	ldr	r0, [pc, #48]	@ (8001314 <MX_TIM5_Init+0x94>)
 80012e2:	f004 fc60 	bl	8005ba6 <HAL_TIM_ConfigClockSource>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80012ec:	f7ff fdde 	bl	8000eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f0:	2300      	movs	r3, #0
 80012f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80012f8:	463b      	mov	r3, r7
 80012fa:	4619      	mov	r1, r3
 80012fc:	4805      	ldr	r0, [pc, #20]	@ (8001314 <MX_TIM5_Init+0x94>)
 80012fe:	f004 fe81 	bl	8006004 <HAL_TIMEx_MasterConfigSynchronization>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001308:	f7ff fdd0 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000718 	.word	0x20000718
 8001318:	40000c00 	.word	0x40000c00

0800131c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a34      	ldr	r2, [pc, #208]	@ (80013fc <HAL_TIM_Base_MspInit+0xe0>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d116      	bne.n	800135c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	4b33      	ldr	r3, [pc, #204]	@ (8001400 <HAL_TIM_Base_MspInit+0xe4>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001336:	4a32      	ldr	r2, [pc, #200]	@ (8001400 <HAL_TIM_Base_MspInit+0xe4>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6453      	str	r3, [r2, #68]	@ 0x44
 800133e:	4b30      	ldr	r3, [pc, #192]	@ (8001400 <HAL_TIM_Base_MspInit+0xe4>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	2100      	movs	r1, #0
 800134e:	2019      	movs	r0, #25
 8001350:	f001 faa1 	bl	8002896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001354:	2019      	movs	r0, #25
 8001356:	f001 faba 	bl	80028ce <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800135a:	e04a      	b.n	80013f2 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM2)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001364:	d116      	bne.n	8001394 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	4b25      	ldr	r3, [pc, #148]	@ (8001400 <HAL_TIM_Base_MspInit+0xe4>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	4a24      	ldr	r2, [pc, #144]	@ (8001400 <HAL_TIM_Base_MspInit+0xe4>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6413      	str	r3, [r2, #64]	@ 0x40
 8001376:	4b22      	ldr	r3, [pc, #136]	@ (8001400 <HAL_TIM_Base_MspInit+0xe4>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	201c      	movs	r0, #28
 8001388:	f001 fa85 	bl	8002896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800138c:	201c      	movs	r0, #28
 800138e:	f001 fa9e 	bl	80028ce <HAL_NVIC_EnableIRQ>
}
 8001392:	e02e      	b.n	80013f2 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a1a      	ldr	r2, [pc, #104]	@ (8001404 <HAL_TIM_Base_MspInit+0xe8>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d116      	bne.n	80013cc <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b17      	ldr	r3, [pc, #92]	@ (8001400 <HAL_TIM_Base_MspInit+0xe4>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a6:	4a16      	ldr	r2, [pc, #88]	@ (8001400 <HAL_TIM_Base_MspInit+0xe4>)
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ae:	4b14      	ldr	r3, [pc, #80]	@ (8001400 <HAL_TIM_Base_MspInit+0xe4>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2100      	movs	r1, #0
 80013be:	201e      	movs	r0, #30
 80013c0:	f001 fa69 	bl	8002896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013c4:	201e      	movs	r0, #30
 80013c6:	f001 fa82 	bl	80028ce <HAL_NVIC_EnableIRQ>
}
 80013ca:	e012      	b.n	80013f2 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM5)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001408 <HAL_TIM_Base_MspInit+0xec>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d10d      	bne.n	80013f2 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <HAL_TIM_Base_MspInit+0xe4>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	4a08      	ldr	r2, [pc, #32]	@ (8001400 <HAL_TIM_Base_MspInit+0xe4>)
 80013e0:	f043 0308 	orr.w	r3, r3, #8
 80013e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e6:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <HAL_TIM_Base_MspInit+0xe4>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	f003 0308 	and.w	r3, r3, #8
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
}
 80013f2:	bf00      	nop
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40010000 	.word	0x40010000
 8001400:	40023800 	.word	0x40023800
 8001404:	40000800 	.word	0x40000800
 8001408:	40000c00 	.word	0x40000c00

0800140c <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_tx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001410:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <MX_UART5_Init+0x4c>)
 8001412:	4a12      	ldr	r2, [pc, #72]	@ (800145c <MX_UART5_Init+0x50>)
 8001414:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001416:	4b10      	ldr	r3, [pc, #64]	@ (8001458 <MX_UART5_Init+0x4c>)
 8001418:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800141c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800141e:	4b0e      	ldr	r3, [pc, #56]	@ (8001458 <MX_UART5_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001424:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <MX_UART5_Init+0x4c>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800142a:	4b0b      	ldr	r3, [pc, #44]	@ (8001458 <MX_UART5_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001430:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <MX_UART5_Init+0x4c>)
 8001432:	220c      	movs	r2, #12
 8001434:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001436:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <MX_UART5_Init+0x4c>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <MX_UART5_Init+0x4c>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001442:	4805      	ldr	r0, [pc, #20]	@ (8001458 <MX_UART5_Init+0x4c>)
 8001444:	f004 fe6e 	bl	8006124 <HAL_UART_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800144e:	f7ff fd2d 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
 // HAL_UART_Receive_IT(&huart5, &uart5_rx_byte, UART5_RX_BUF_LEN);
  /* USER CODE END UART5_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000760 	.word	0x20000760
 800145c:	40005000 	.word	0x40005000

08001460 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	@ 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a5c      	ldr	r2, [pc, #368]	@ (80015f0 <HAL_UART_MspInit+0x190>)
 800147e:	4293      	cmp	r3, r2
 8001480:	f040 80b1 	bne.w	80015e6 <HAL_UART_MspInit+0x186>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001484:	2300      	movs	r3, #0
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	4b5a      	ldr	r3, [pc, #360]	@ (80015f4 <HAL_UART_MspInit+0x194>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148c:	4a59      	ldr	r2, [pc, #356]	@ (80015f4 <HAL_UART_MspInit+0x194>)
 800148e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001492:	6413      	str	r3, [r2, #64]	@ 0x40
 8001494:	4b57      	ldr	r3, [pc, #348]	@ (80015f4 <HAL_UART_MspInit+0x194>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001498:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	4b53      	ldr	r3, [pc, #332]	@ (80015f4 <HAL_UART_MspInit+0x194>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a8:	4a52      	ldr	r2, [pc, #328]	@ (80015f4 <HAL_UART_MspInit+0x194>)
 80014aa:	f043 0304 	orr.w	r3, r3, #4
 80014ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b0:	4b50      	ldr	r3, [pc, #320]	@ (80015f4 <HAL_UART_MspInit+0x194>)
 80014b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	4b4c      	ldr	r3, [pc, #304]	@ (80015f4 <HAL_UART_MspInit+0x194>)
 80014c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c4:	4a4b      	ldr	r2, [pc, #300]	@ (80015f4 <HAL_UART_MspInit+0x194>)
 80014c6:	f043 0308 	orr.w	r3, r3, #8
 80014ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80014cc:	4b49      	ldr	r3, [pc, #292]	@ (80015f4 <HAL_UART_MspInit+0x194>)
 80014ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d0:	f003 0308 	and.w	r3, r3, #8
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014de:	2302      	movs	r3, #2
 80014e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e6:	2303      	movs	r3, #3
 80014e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80014ea:	2308      	movs	r3, #8
 80014ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4619      	mov	r1, r3
 80014f4:	4840      	ldr	r0, [pc, #256]	@ (80015f8 <HAL_UART_MspInit+0x198>)
 80014f6:	f001 fded 	bl	80030d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014fa:	2304      	movs	r3, #4
 80014fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800150a:	2308      	movs	r3, #8
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	4839      	ldr	r0, [pc, #228]	@ (80015fc <HAL_UART_MspInit+0x19c>)
 8001516:	f001 fddd 	bl	80030d4 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 800151a:	4b39      	ldr	r3, [pc, #228]	@ (8001600 <HAL_UART_MspInit+0x1a0>)
 800151c:	4a39      	ldr	r2, [pc, #228]	@ (8001604 <HAL_UART_MspInit+0x1a4>)
 800151e:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8001520:	4b37      	ldr	r3, [pc, #220]	@ (8001600 <HAL_UART_MspInit+0x1a0>)
 8001522:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001526:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001528:	4b35      	ldr	r3, [pc, #212]	@ (8001600 <HAL_UART_MspInit+0x1a0>)
 800152a:	2240      	movs	r2, #64	@ 0x40
 800152c:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800152e:	4b34      	ldr	r3, [pc, #208]	@ (8001600 <HAL_UART_MspInit+0x1a0>)
 8001530:	2200      	movs	r2, #0
 8001532:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001534:	4b32      	ldr	r3, [pc, #200]	@ (8001600 <HAL_UART_MspInit+0x1a0>)
 8001536:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800153a:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800153c:	4b30      	ldr	r3, [pc, #192]	@ (8001600 <HAL_UART_MspInit+0x1a0>)
 800153e:	2200      	movs	r2, #0
 8001540:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001542:	4b2f      	ldr	r3, [pc, #188]	@ (8001600 <HAL_UART_MspInit+0x1a0>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8001548:	4b2d      	ldr	r3, [pc, #180]	@ (8001600 <HAL_UART_MspInit+0x1a0>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800154e:	4b2c      	ldr	r3, [pc, #176]	@ (8001600 <HAL_UART_MspInit+0x1a0>)
 8001550:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001554:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001556:	4b2a      	ldr	r3, [pc, #168]	@ (8001600 <HAL_UART_MspInit+0x1a0>)
 8001558:	2200      	movs	r2, #0
 800155a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800155c:	4828      	ldr	r0, [pc, #160]	@ (8001600 <HAL_UART_MspInit+0x1a0>)
 800155e:	f001 f9df 	bl	8002920 <HAL_DMA_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001568:	f7ff fca0 	bl	8000eac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a24      	ldr	r2, [pc, #144]	@ (8001600 <HAL_UART_MspInit+0x1a0>)
 8001570:	639a      	str	r2, [r3, #56]	@ 0x38
 8001572:	4a23      	ldr	r2, [pc, #140]	@ (8001600 <HAL_UART_MspInit+0x1a0>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001578:	4b23      	ldr	r3, [pc, #140]	@ (8001608 <HAL_UART_MspInit+0x1a8>)
 800157a:	4a24      	ldr	r2, [pc, #144]	@ (800160c <HAL_UART_MspInit+0x1ac>)
 800157c:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800157e:	4b22      	ldr	r3, [pc, #136]	@ (8001608 <HAL_UART_MspInit+0x1a8>)
 8001580:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001584:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001586:	4b20      	ldr	r3, [pc, #128]	@ (8001608 <HAL_UART_MspInit+0x1a8>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800158c:	4b1e      	ldr	r3, [pc, #120]	@ (8001608 <HAL_UART_MspInit+0x1a8>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001592:	4b1d      	ldr	r3, [pc, #116]	@ (8001608 <HAL_UART_MspInit+0x1a8>)
 8001594:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001598:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800159a:	4b1b      	ldr	r3, [pc, #108]	@ (8001608 <HAL_UART_MspInit+0x1a8>)
 800159c:	2200      	movs	r2, #0
 800159e:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015a0:	4b19      	ldr	r3, [pc, #100]	@ (8001608 <HAL_UART_MspInit+0x1a8>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80015a6:	4b18      	ldr	r3, [pc, #96]	@ (8001608 <HAL_UART_MspInit+0x1a8>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80015ac:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <HAL_UART_MspInit+0x1a8>)
 80015ae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80015b2:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015b4:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <HAL_UART_MspInit+0x1a8>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80015ba:	4813      	ldr	r0, [pc, #76]	@ (8001608 <HAL_UART_MspInit+0x1a8>)
 80015bc:	f001 f9b0 	bl	8002920 <HAL_DMA_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 80015c6:	f7ff fc71 	bl	8000eac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001608 <HAL_UART_MspInit+0x1a8>)
 80015ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80015d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001608 <HAL_UART_MspInit+0x1a8>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2100      	movs	r1, #0
 80015da:	2035      	movs	r0, #53	@ 0x35
 80015dc:	f001 f95b 	bl	8002896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80015e0:	2035      	movs	r0, #53	@ 0x35
 80015e2:	f001 f974 	bl	80028ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 80015e6:	bf00      	nop
 80015e8:	3728      	adds	r7, #40	@ 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40005000 	.word	0x40005000
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020800 	.word	0x40020800
 80015fc:	40020c00 	.word	0x40020c00
 8001600:	200007a8 	.word	0x200007a8
 8001604:	400260b8 	.word	0x400260b8
 8001608:	20000808 	.word	0x20000808
 800160c:	40026010 	.word	0x40026010

08001610 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==UART5)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a11      	ldr	r2, [pc, #68]	@ (8001664 <HAL_UART_MspDeInit+0x54>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d11b      	bne.n	800165a <HAL_UART_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN UART5_MspDeInit 0 */

  /* USER CODE END UART5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART5_CLK_DISABLE();
 8001622:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <HAL_UART_MspDeInit+0x58>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	4a10      	ldr	r2, [pc, #64]	@ (8001668 <HAL_UART_MspDeInit+0x58>)
 8001628:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800162c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 800162e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001632:	480e      	ldr	r0, [pc, #56]	@ (800166c <HAL_UART_MspDeInit+0x5c>)
 8001634:	f001 feea 	bl	800340c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 8001638:	2104      	movs	r1, #4
 800163a:	480d      	ldr	r0, [pc, #52]	@ (8001670 <HAL_UART_MspDeInit+0x60>)
 800163c:	f001 fee6 	bl	800340c <HAL_GPIO_DeInit>

    /* UART5 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001644:	4618      	mov	r0, r3
 8001646:	f001 fa19 	bl	8002a7c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800164e:	4618      	mov	r0, r3
 8001650:	f001 fa14 	bl	8002a7c <HAL_DMA_DeInit>

    /* UART5 interrupt Deinit */
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8001654:	2035      	movs	r0, #53	@ 0x35
 8001656:	f001 f948 	bl	80028ea <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40005000 	.word	0x40005000
 8001668:	40023800 	.word	0x40023800
 800166c:	40020800 	.word	0x40020800
 8001670:	40020c00 	.word	0x40020c00

08001674 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001678:	4b14      	ldr	r3, [pc, #80]	@ (80016cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800167a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800167e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001680:	4b12      	ldr	r3, [pc, #72]	@ (80016cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001682:	2204      	movs	r2, #4
 8001684:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001686:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001688:	2202      	movs	r2, #2
 800168a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800168c:	4b0f      	ldr	r3, [pc, #60]	@ (80016cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800168e:	2200      	movs	r2, #0
 8001690:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001692:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001694:	2202      	movs	r2, #2
 8001696:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001698:	4b0c      	ldr	r3, [pc, #48]	@ (80016cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800169a:	2200      	movs	r2, #0
 800169c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800169e:	4b0b      	ldr	r3, [pc, #44]	@ (80016cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80016a4:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80016aa:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80016b0:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80016b6:	4805      	ldr	r0, [pc, #20]	@ (80016cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016b8:	f002 f91c 	bl	80038f4 <HAL_PCD_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80016c2:	f7ff fbf3 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000868 	.word	0x20000868

080016d0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	@ 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016f0:	d13a      	bne.n	8001768 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001770 <HAL_PCD_MspInit+0xa0>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001770 <HAL_PCD_MspInit+0xa0>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6313      	str	r3, [r2, #48]	@ 0x30
 8001702:	4b1b      	ldr	r3, [pc, #108]	@ (8001770 <HAL_PCD_MspInit+0xa0>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800170e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001720:	230a      	movs	r3, #10
 8001722:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4619      	mov	r1, r3
 800172a:	4812      	ldr	r0, [pc, #72]	@ (8001774 <HAL_PCD_MspInit+0xa4>)
 800172c:	f001 fcd2 	bl	80030d4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001730:	4b0f      	ldr	r3, [pc, #60]	@ (8001770 <HAL_PCD_MspInit+0xa0>)
 8001732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001734:	4a0e      	ldr	r2, [pc, #56]	@ (8001770 <HAL_PCD_MspInit+0xa0>)
 8001736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800173a:	6353      	str	r3, [r2, #52]	@ 0x34
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <HAL_PCD_MspInit+0xa0>)
 8001742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001744:	4a0a      	ldr	r2, [pc, #40]	@ (8001770 <HAL_PCD_MspInit+0xa0>)
 8001746:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800174a:	6453      	str	r3, [r2, #68]	@ 0x44
 800174c:	4b08      	ldr	r3, [pc, #32]	@ (8001770 <HAL_PCD_MspInit+0xa0>)
 800174e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001750:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001758:	2200      	movs	r2, #0
 800175a:	2100      	movs	r1, #0
 800175c:	2043      	movs	r0, #67	@ 0x43
 800175e:	f001 f89a 	bl	8002896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001762:	2043      	movs	r0, #67	@ 0x43
 8001764:	f001 f8b3 	bl	80028ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001768:	bf00      	nop
 800176a:	3728      	adds	r7, #40	@ 0x28
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40023800 	.word	0x40023800
 8001774:	40020000 	.word	0x40020000

08001778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001778:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800177c:	f7ff fc84 	bl	8001088 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001780:	480c      	ldr	r0, [pc, #48]	@ (80017b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001782:	490d      	ldr	r1, [pc, #52]	@ (80017b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001784:	4a0d      	ldr	r2, [pc, #52]	@ (80017bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001788:	e002      	b.n	8001790 <LoopCopyDataInit>

0800178a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800178c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800178e:	3304      	adds	r3, #4

08001790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001794:	d3f9      	bcc.n	800178a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001796:	4a0a      	ldr	r2, [pc, #40]	@ (80017c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001798:	4c0a      	ldr	r4, [pc, #40]	@ (80017c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800179a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800179c:	e001      	b.n	80017a2 <LoopFillZerobss>

0800179e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800179e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a0:	3204      	adds	r2, #4

080017a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a4:	d3fb      	bcc.n	800179e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017a6:	f00a fdef 	bl	800c388 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017aa:	f7ff fa7d 	bl	8000ca8 <main>
  bx  lr    
 80017ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b8:	20000304 	.word	0x20000304
  ldr r2, =_sidata
 80017bc:	0800cd40 	.word	0x0800cd40
  ldr r2, =_sbss
 80017c0:	20000304 	.word	0x20000304
  ldr r4, =_ebss
 80017c4:	20002a08 	.word	0x20002a08

080017c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c8:	e7fe      	b.n	80017c8 <ADC_IRQHandler>
	...

080017cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017d0:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <HAL_Init+0x40>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a0d      	ldr	r2, [pc, #52]	@ (800180c <HAL_Init+0x40>)
 80017d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017dc:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <HAL_Init+0x40>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0a      	ldr	r2, [pc, #40]	@ (800180c <HAL_Init+0x40>)
 80017e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e8:	4b08      	ldr	r3, [pc, #32]	@ (800180c <HAL_Init+0x40>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a07      	ldr	r2, [pc, #28]	@ (800180c <HAL_Init+0x40>)
 80017ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f4:	2003      	movs	r0, #3
 80017f6:	f001 f843 	bl	8002880 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017fa:	200f      	movs	r0, #15
 80017fc:	f000 f808 	bl	8001810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001800:	f7ff fb5a 	bl	8000eb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023c00 	.word	0x40023c00

08001810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001818:	4b12      	ldr	r3, [pc, #72]	@ (8001864 <HAL_InitTick+0x54>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b12      	ldr	r3, [pc, #72]	@ (8001868 <HAL_InitTick+0x58>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	4619      	mov	r1, r3
 8001822:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001826:	fbb3 f3f1 	udiv	r3, r3, r1
 800182a:	fbb2 f3f3 	udiv	r3, r2, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f001 f869 	bl	8002906 <HAL_SYSTICK_Config>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e00e      	b.n	800185c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b0f      	cmp	r3, #15
 8001842:	d80a      	bhi.n	800185a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001844:	2200      	movs	r2, #0
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	f001 f823 	bl	8002896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001850:	4a06      	ldr	r2, [pc, #24]	@ (800186c <HAL_InitTick+0x5c>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	e000      	b.n	800185c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	2000000c 	.word	0x2000000c
 8001868:	20000014 	.word	0x20000014
 800186c:	20000010 	.word	0x20000010

08001870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001874:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <HAL_IncTick+0x20>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <HAL_IncTick+0x24>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4413      	add	r3, r2
 8001880:	4a04      	ldr	r2, [pc, #16]	@ (8001894 <HAL_IncTick+0x24>)
 8001882:	6013      	str	r3, [r2, #0]
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000014 	.word	0x20000014
 8001894:	20000d4c 	.word	0x20000d4c

08001898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return uwTick;
 800189c:	4b03      	ldr	r3, [pc, #12]	@ (80018ac <HAL_GetTick+0x14>)
 800189e:	681b      	ldr	r3, [r3, #0]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000d4c 	.word	0x20000d4c

080018b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b8:	f7ff ffee 	bl	8001898 <HAL_GetTick>
 80018bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c8:	d005      	beq.n	80018d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ca:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <HAL_Delay+0x44>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	461a      	mov	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4413      	add	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018d6:	bf00      	nop
 80018d8:	f7ff ffde 	bl	8001898 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d8f7      	bhi.n	80018d8 <HAL_Delay+0x28>
  {
  }
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000014 	.word	0x20000014

080018f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e0ed      	b.n	8001ae6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d102      	bne.n	800191c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7fe fe40 	bl	800059c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0201 	orr.w	r2, r2, #1
 800192a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800192c:	f7ff ffb4 	bl	8001898 <HAL_GetTick>
 8001930:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001932:	e012      	b.n	800195a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001934:	f7ff ffb0 	bl	8001898 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b0a      	cmp	r3, #10
 8001940:	d90b      	bls.n	800195a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001946:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2205      	movs	r2, #5
 8001952:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e0c5      	b.n	8001ae6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0e5      	beq.n	8001934 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0202 	bic.w	r2, r2, #2
 8001976:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001978:	f7ff ff8e 	bl	8001898 <HAL_GetTick>
 800197c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800197e:	e012      	b.n	80019a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001980:	f7ff ff8a 	bl	8001898 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b0a      	cmp	r3, #10
 800198c:	d90b      	bls.n	80019a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001992:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2205      	movs	r2, #5
 800199e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e09f      	b.n	8001ae6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1e5      	bne.n	8001980 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	7e1b      	ldrb	r3, [r3, #24]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d108      	bne.n	80019ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	e007      	b.n	80019de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	7e5b      	ldrb	r3, [r3, #25]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d108      	bne.n	80019f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	e007      	b.n	8001a08 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	7e9b      	ldrb	r3, [r3, #26]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d108      	bne.n	8001a22 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 0220 	orr.w	r2, r2, #32
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	e007      	b.n	8001a32 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 0220 	bic.w	r2, r2, #32
 8001a30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	7edb      	ldrb	r3, [r3, #27]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d108      	bne.n	8001a4c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0210 	bic.w	r2, r2, #16
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	e007      	b.n	8001a5c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 0210 	orr.w	r2, r2, #16
 8001a5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	7f1b      	ldrb	r3, [r3, #28]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d108      	bne.n	8001a76 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0208 	orr.w	r2, r2, #8
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	e007      	b.n	8001a86 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 0208 	bic.w	r2, r2, #8
 8001a84:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	7f5b      	ldrb	r3, [r3, #29]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d108      	bne.n	8001aa0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f042 0204 	orr.w	r2, r2, #4
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	e007      	b.n	8001ab0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 0204 	bic.w	r2, r2, #4
 8001aae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	ea42 0103 	orr.w	r1, r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	1e5a      	subs	r2, r3, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e015      	b.n	8001b2c <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f939 	bl	8001d78 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7fe fda0 	bl	800064c <HAL_CAN_MspDeInit>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b1a:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b44:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b46:	7dfb      	ldrb	r3, [r7, #23]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d003      	beq.n	8001b54 <HAL_CAN_ConfigFilter+0x20>
 8001b4c:	7dfb      	ldrb	r3, [r7, #23]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	f040 80be 	bne.w	8001cd0 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001b54:	4b65      	ldr	r3, [pc, #404]	@ (8001cec <HAL_CAN_ConfigFilter+0x1b8>)
 8001b56:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001b5e:	f043 0201 	orr.w	r2, r3, #1
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001b6e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b82:	021b      	lsls	r3, r3, #8
 8001b84:	431a      	orrs	r2, r3
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	2201      	movs	r2, #1
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	401a      	ands	r2, r3
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d123      	bne.n	8001bfe <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	401a      	ands	r2, r3
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001bd8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	3248      	adds	r2, #72	@ 0x48
 8001bde:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bf2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bf4:	6939      	ldr	r1, [r7, #16]
 8001bf6:	3348      	adds	r3, #72	@ 0x48
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	440b      	add	r3, r1
 8001bfc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d122      	bne.n	8001c4c <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c26:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	3248      	adds	r2, #72	@ 0x48
 8001c2c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c40:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c42:	6939      	ldr	r1, [r7, #16]
 8001c44:	3348      	adds	r3, #72	@ 0x48
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	440b      	add	r3, r1
 8001c4a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d109      	bne.n	8001c68 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	401a      	ands	r2, r3
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001c66:	e007      	b.n	8001c78 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	431a      	orrs	r2, r3
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d109      	bne.n	8001c94 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	401a      	ands	r2, r3
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001c92:	e007      	b.n	8001ca4 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d107      	bne.n	8001cbc <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001cc2:	f023 0201 	bic.w	r2, r3, #1
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	e006      	b.n	8001cde <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
  }
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	371c      	adds	r7, #28
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40006400 	.word	0x40006400

08001cf0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d12e      	bne.n	8001d62 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2202      	movs	r2, #2
 8001d08:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0201 	bic.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d1c:	f7ff fdbc 	bl	8001898 <HAL_GetTick>
 8001d20:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d22:	e012      	b.n	8001d4a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d24:	f7ff fdb8 	bl	8001898 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b0a      	cmp	r3, #10
 8001d30:	d90b      	bls.n	8001d4a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d36:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2205      	movs	r2, #5
 8001d42:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e012      	b.n	8001d70 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1e5      	bne.n	8001d24 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	e006      	b.n	8001d70 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d66:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
  }
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d133      	bne.n	8001df4 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0201 	orr.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d9c:	f7ff fd7c 	bl	8001898 <HAL_GetTick>
 8001da0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001da2:	e012      	b.n	8001dca <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001da4:	f7ff fd78 	bl	8001898 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b0a      	cmp	r3, #10
 8001db0:	d90b      	bls.n	8001dca <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2205      	movs	r2, #5
 8001dc2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e01b      	b.n	8001e02 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0e5      	beq.n	8001da4 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0202 	bic.w	r2, r2, #2
 8001de6:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	e006      	b.n	8001e02 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
  }
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b089      	sub	sp, #36	@ 0x24
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	60f8      	str	r0, [r7, #12]
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e28:	7ffb      	ldrb	r3, [r7, #31]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d003      	beq.n	8001e36 <HAL_CAN_AddTxMessage+0x2c>
 8001e2e:	7ffb      	ldrb	r3, [r7, #31]
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	f040 80ad 	bne.w	8001f90 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10a      	bne.n	8001e56 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d105      	bne.n	8001e56 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 8095 	beq.w	8001f80 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	0e1b      	lsrs	r3, r3, #24
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001e60:	2201      	movs	r2, #1
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	409a      	lsls	r2, r3
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10d      	bne.n	8001e8e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e7c:	68f9      	ldr	r1, [r7, #12]
 8001e7e:	6809      	ldr	r1, [r1, #0]
 8001e80:	431a      	orrs	r2, r3
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	3318      	adds	r3, #24
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	440b      	add	r3, r1
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	e00f      	b.n	8001eae <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e98:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e9e:	68f9      	ldr	r1, [r7, #12]
 8001ea0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001ea2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	3318      	adds	r3, #24
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	440b      	add	r3, r1
 8001eac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6819      	ldr	r1, [r3, #0]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	691a      	ldr	r2, [r3, #16]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	3318      	adds	r3, #24
 8001eba:	011b      	lsls	r3, r3, #4
 8001ebc:	440b      	add	r3, r1
 8001ebe:	3304      	adds	r3, #4
 8001ec0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	7d1b      	ldrb	r3, [r3, #20]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d111      	bne.n	8001eee <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	3318      	adds	r3, #24
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	6811      	ldr	r1, [r2, #0]
 8001ede:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	3318      	adds	r3, #24
 8001ee6:	011b      	lsls	r3, r3, #4
 8001ee8:	440b      	add	r3, r1
 8001eea:	3304      	adds	r3, #4
 8001eec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3307      	adds	r3, #7
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	061a      	lsls	r2, r3, #24
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3306      	adds	r3, #6
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	041b      	lsls	r3, r3, #16
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3305      	adds	r3, #5
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	3204      	adds	r2, #4
 8001f0e:	7812      	ldrb	r2, [r2, #0]
 8001f10:	4610      	mov	r0, r2
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	6811      	ldr	r1, [r2, #0]
 8001f16:	ea43 0200 	orr.w	r2, r3, r0
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	440b      	add	r3, r1
 8001f20:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001f24:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3303      	adds	r3, #3
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	061a      	lsls	r2, r3, #24
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3302      	adds	r3, #2
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	041b      	lsls	r3, r3, #16
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	4313      	orrs	r3, r2
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	7812      	ldrb	r2, [r2, #0]
 8001f46:	4610      	mov	r0, r2
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	6811      	ldr	r1, [r2, #0]
 8001f4c:	ea43 0200 	orr.w	r2, r3, r0
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	011b      	lsls	r3, r3, #4
 8001f54:	440b      	add	r3, r1
 8001f56:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001f5a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	3318      	adds	r3, #24
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	4413      	add	r3, r2
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	6811      	ldr	r1, [r2, #0]
 8001f6e:	f043 0201 	orr.w	r2, r3, #1
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	3318      	adds	r3, #24
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	440b      	add	r3, r1
 8001f7a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	e00e      	b.n	8001f9e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f84:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e006      	b.n	8001f9e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f94:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
  }
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3724      	adds	r7, #36	@ 0x24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001faa:	b480      	push	{r7}
 8001fac:	b087      	sub	sp, #28
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fbe:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fc0:	7dfb      	ldrb	r3, [r7, #23]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d003      	beq.n	8001fce <HAL_CAN_GetRxMessage+0x24>
 8001fc6:	7dfb      	ldrb	r3, [r7, #23]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	f040 8103 	bne.w	80021d4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10e      	bne.n	8001ff2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d116      	bne.n	8002010 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e0f7      	b.n	80021e2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	f003 0303 	and.w	r3, r3, #3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d107      	bne.n	8002010 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002004:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0e8      	b.n	80021e2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	331b      	adds	r3, #27
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	4413      	add	r3, r2
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0204 	and.w	r2, r3, #4
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10c      	bne.n	8002048 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	331b      	adds	r3, #27
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	4413      	add	r3, r2
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	0d5b      	lsrs	r3, r3, #21
 800203e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	e00b      	b.n	8002060 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	331b      	adds	r3, #27
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	4413      	add	r3, r2
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	08db      	lsrs	r3, r3, #3
 8002058:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	331b      	adds	r3, #27
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	4413      	add	r3, r2
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0202 	and.w	r2, r3, #2
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	331b      	adds	r3, #27
 800207e:	011b      	lsls	r3, r3, #4
 8002080:	4413      	add	r3, r2
 8002082:	3304      	adds	r3, #4
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2208      	movs	r2, #8
 8002092:	611a      	str	r2, [r3, #16]
 8002094:	e00b      	b.n	80020ae <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	331b      	adds	r3, #27
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	4413      	add	r3, r2
 80020a2:	3304      	adds	r3, #4
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 020f 	and.w	r2, r3, #15
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	331b      	adds	r3, #27
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	4413      	add	r3, r2
 80020ba:	3304      	adds	r3, #4
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	0a1b      	lsrs	r3, r3, #8
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	331b      	adds	r3, #27
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	4413      	add	r3, r2
 80020d2:	3304      	adds	r3, #4
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	0c1b      	lsrs	r3, r3, #16
 80020d8:	b29a      	uxth	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	4413      	add	r3, r2
 80020e8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	4413      	add	r3, r2
 80020fe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	0a1a      	lsrs	r2, r3, #8
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	3301      	adds	r3, #1
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	4413      	add	r3, r2
 8002118:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	0c1a      	lsrs	r2, r3, #16
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	3302      	adds	r3, #2
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	011b      	lsls	r3, r3, #4
 8002130:	4413      	add	r3, r2
 8002132:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	0e1a      	lsrs	r2, r3, #24
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	3303      	adds	r3, #3
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	4413      	add	r3, r2
 800214c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	3304      	adds	r3, #4
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	011b      	lsls	r3, r3, #4
 8002162:	4413      	add	r3, r2
 8002164:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	0a1a      	lsrs	r2, r3, #8
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	3305      	adds	r3, #5
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	4413      	add	r3, r2
 800217e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	0c1a      	lsrs	r2, r3, #16
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	3306      	adds	r3, #6
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	4413      	add	r3, r2
 8002198:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	0e1a      	lsrs	r2, r3, #24
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	3307      	adds	r3, #7
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d108      	bne.n	80021c0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f042 0220 	orr.w	r2, r2, #32
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	e007      	b.n	80021d0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691a      	ldr	r2, [r3, #16]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0220 	orr.w	r2, r2, #32
 80021ce:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	e006      	b.n	80021e2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
  }
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	371c      	adds	r7, #28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b085      	sub	sp, #20
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021fe:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002200:	7bfb      	ldrb	r3, [r7, #15]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d002      	beq.n	800220c <HAL_CAN_ActivateNotification+0x1e>
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d109      	bne.n	8002220 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6959      	ldr	r1, [r3, #20]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800221c:	2300      	movs	r3, #0
 800221e:	e006      	b.n	800222e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002224:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
  }
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b08a      	sub	sp, #40	@ 0x28
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002242:	2300      	movs	r3, #0
 8002244:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b00      	cmp	r3, #0
 800227e:	d07c      	beq.n	800237a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d023      	beq.n	80022d2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2201      	movs	r2, #1
 8002290:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f983 	bl	80025a8 <HAL_CAN_TxMailbox0CompleteCallback>
 80022a2:	e016      	b.n	80022d2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d004      	beq.n	80022b8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80022b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80022b6:	e00c      	b.n	80022d2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d004      	beq.n	80022cc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80022c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80022ca:	e002      	b.n	80022d2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f989 	bl	80025e4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d024      	beq.n	8002326 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f963 	bl	80025bc <HAL_CAN_TxMailbox1CompleteCallback>
 80022f6:	e016      	b.n	8002326 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d004      	beq.n	800230c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002304:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002308:	627b      	str	r3, [r7, #36]	@ 0x24
 800230a:	e00c      	b.n	8002326 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002312:	2b00      	cmp	r3, #0
 8002314:	d004      	beq.n	8002320 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002318:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800231c:	627b      	str	r3, [r7, #36]	@ 0x24
 800231e:	e002      	b.n	8002326 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 f969 	bl	80025f8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d024      	beq.n	800237a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002338:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f943 	bl	80025d0 <HAL_CAN_TxMailbox2CompleteCallback>
 800234a:	e016      	b.n	800237a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d004      	beq.n	8002360 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002358:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800235c:	627b      	str	r3, [r7, #36]	@ 0x24
 800235e:	e00c      	b.n	800237a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d004      	beq.n	8002374 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800236a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002370:	627b      	str	r3, [r7, #36]	@ 0x24
 8002372:	e002      	b.n	800237a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 f949 	bl	800260c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00c      	beq.n	800239e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f003 0310 	and.w	r3, r3, #16
 800238a:	2b00      	cmp	r3, #0
 800238c:	d007      	beq.n	800239e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800238e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002390:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002394:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2210      	movs	r2, #16
 800239c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00b      	beq.n	80023c0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d006      	beq.n	80023c0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2208      	movs	r2, #8
 80023b8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f930 	bl	8002620 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d002      	beq.n	80023de <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7fe fced 	bl	8000db8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00c      	beq.n	8002402 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	f003 0310 	and.w	r3, r3, #16
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d007      	beq.n	8002402 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80023f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023f8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2210      	movs	r2, #16
 8002400:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	f003 0320 	and.w	r3, r3, #32
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00b      	beq.n	8002424 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d006      	beq.n	8002424 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2208      	movs	r2, #8
 800241c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f912 	bl	8002648 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	2b00      	cmp	r3, #0
 800242c:	d009      	beq.n	8002442 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f8f9 	bl	8002634 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00b      	beq.n	8002464 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 0310 	and.w	r3, r3, #16
 8002452:	2b00      	cmp	r3, #0
 8002454:	d006      	beq.n	8002464 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2210      	movs	r2, #16
 800245c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f8fc 	bl	800265c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00b      	beq.n	8002486 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	2b00      	cmp	r3, #0
 8002476:	d006      	beq.n	8002486 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2208      	movs	r2, #8
 800247e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f8f5 	bl	8002670 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d07b      	beq.n	8002588 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	2b00      	cmp	r3, #0
 8002498:	d072      	beq.n	8002580 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80024ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d008      	beq.n	80024d2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80024ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024cc:	f043 0302 	orr.w	r3, r3, #2
 80024d0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80024e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e8:	f043 0304 	orr.w	r3, r3, #4
 80024ec:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d043      	beq.n	8002580 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d03e      	beq.n	8002580 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002508:	2b60      	cmp	r3, #96	@ 0x60
 800250a:	d02b      	beq.n	8002564 <HAL_CAN_IRQHandler+0x32a>
 800250c:	2b60      	cmp	r3, #96	@ 0x60
 800250e:	d82e      	bhi.n	800256e <HAL_CAN_IRQHandler+0x334>
 8002510:	2b50      	cmp	r3, #80	@ 0x50
 8002512:	d022      	beq.n	800255a <HAL_CAN_IRQHandler+0x320>
 8002514:	2b50      	cmp	r3, #80	@ 0x50
 8002516:	d82a      	bhi.n	800256e <HAL_CAN_IRQHandler+0x334>
 8002518:	2b40      	cmp	r3, #64	@ 0x40
 800251a:	d019      	beq.n	8002550 <HAL_CAN_IRQHandler+0x316>
 800251c:	2b40      	cmp	r3, #64	@ 0x40
 800251e:	d826      	bhi.n	800256e <HAL_CAN_IRQHandler+0x334>
 8002520:	2b30      	cmp	r3, #48	@ 0x30
 8002522:	d010      	beq.n	8002546 <HAL_CAN_IRQHandler+0x30c>
 8002524:	2b30      	cmp	r3, #48	@ 0x30
 8002526:	d822      	bhi.n	800256e <HAL_CAN_IRQHandler+0x334>
 8002528:	2b10      	cmp	r3, #16
 800252a:	d002      	beq.n	8002532 <HAL_CAN_IRQHandler+0x2f8>
 800252c:	2b20      	cmp	r3, #32
 800252e:	d005      	beq.n	800253c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002530:	e01d      	b.n	800256e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002534:	f043 0308 	orr.w	r3, r3, #8
 8002538:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800253a:	e019      	b.n	8002570 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800253c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253e:	f043 0310 	orr.w	r3, r3, #16
 8002542:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002544:	e014      	b.n	8002570 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	f043 0320 	orr.w	r3, r3, #32
 800254c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800254e:	e00f      	b.n	8002570 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002556:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002558:	e00a      	b.n	8002570 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800255a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002560:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002562:	e005      	b.n	8002570 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002566:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800256a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800256c:	e000      	b.n	8002570 <HAL_CAN_IRQHandler+0x336>
            break;
 800256e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	699a      	ldr	r2, [r3, #24]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800257e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2204      	movs	r2, #4
 8002586:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258a:	2b00      	cmp	r3, #0
 800258c:	d008      	beq.n	80025a0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f872 	bl	8002684 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80025a0:	bf00      	nop
 80025a2:	3728      	adds	r7, #40	@ 0x28
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a8:	4b0c      	ldr	r3, [pc, #48]	@ (80026dc <__NVIC_SetPriorityGrouping+0x44>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026b4:	4013      	ands	r3, r2
 80026b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ca:	4a04      	ldr	r2, [pc, #16]	@ (80026dc <__NVIC_SetPriorityGrouping+0x44>)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	60d3      	str	r3, [r2, #12]
}
 80026d0:	bf00      	nop
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026e4:	4b04      	ldr	r3, [pc, #16]	@ (80026f8 <__NVIC_GetPriorityGrouping+0x18>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	0a1b      	lsrs	r3, r3, #8
 80026ea:	f003 0307 	and.w	r3, r3, #7
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	2b00      	cmp	r3, #0
 800270c:	db0b      	blt.n	8002726 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	f003 021f 	and.w	r2, r3, #31
 8002714:	4907      	ldr	r1, [pc, #28]	@ (8002734 <__NVIC_EnableIRQ+0x38>)
 8002716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	2001      	movs	r0, #1
 800271e:	fa00 f202 	lsl.w	r2, r0, r2
 8002722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	e000e100 	.word	0xe000e100

08002738 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002746:	2b00      	cmp	r3, #0
 8002748:	db12      	blt.n	8002770 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	f003 021f 	and.w	r2, r3, #31
 8002750:	490a      	ldr	r1, [pc, #40]	@ (800277c <__NVIC_DisableIRQ+0x44>)
 8002752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	2001      	movs	r0, #1
 800275a:	fa00 f202 	lsl.w	r2, r0, r2
 800275e:	3320      	adds	r3, #32
 8002760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002764:	f3bf 8f4f 	dsb	sy
}
 8002768:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800276a:	f3bf 8f6f 	isb	sy
}
 800276e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000e100 	.word	0xe000e100

08002780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	6039      	str	r1, [r7, #0]
 800278a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002790:	2b00      	cmp	r3, #0
 8002792:	db0a      	blt.n	80027aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	b2da      	uxtb	r2, r3
 8002798:	490c      	ldr	r1, [pc, #48]	@ (80027cc <__NVIC_SetPriority+0x4c>)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	0112      	lsls	r2, r2, #4
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	440b      	add	r3, r1
 80027a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027a8:	e00a      	b.n	80027c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	4908      	ldr	r1, [pc, #32]	@ (80027d0 <__NVIC_SetPriority+0x50>)
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	3b04      	subs	r3, #4
 80027b8:	0112      	lsls	r2, r2, #4
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	440b      	add	r3, r1
 80027be:	761a      	strb	r2, [r3, #24]
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	e000e100 	.word	0xe000e100
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b089      	sub	sp, #36	@ 0x24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f1c3 0307 	rsb	r3, r3, #7
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	bf28      	it	cs
 80027f2:	2304      	movcs	r3, #4
 80027f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3304      	adds	r3, #4
 80027fa:	2b06      	cmp	r3, #6
 80027fc:	d902      	bls.n	8002804 <NVIC_EncodePriority+0x30>
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3b03      	subs	r3, #3
 8002802:	e000      	b.n	8002806 <NVIC_EncodePriority+0x32>
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002808:	f04f 32ff 	mov.w	r2, #4294967295
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43da      	mvns	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	401a      	ands	r2, r3
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800281c:	f04f 31ff 	mov.w	r1, #4294967295
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	fa01 f303 	lsl.w	r3, r1, r3
 8002826:	43d9      	mvns	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800282c:	4313      	orrs	r3, r2
         );
}
 800282e:	4618      	mov	r0, r3
 8002830:	3724      	adds	r7, #36	@ 0x24
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3b01      	subs	r3, #1
 8002848:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800284c:	d301      	bcc.n	8002852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800284e:	2301      	movs	r3, #1
 8002850:	e00f      	b.n	8002872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002852:	4a0a      	ldr	r2, [pc, #40]	@ (800287c <SysTick_Config+0x40>)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800285a:	210f      	movs	r1, #15
 800285c:	f04f 30ff 	mov.w	r0, #4294967295
 8002860:	f7ff ff8e 	bl	8002780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002864:	4b05      	ldr	r3, [pc, #20]	@ (800287c <SysTick_Config+0x40>)
 8002866:	2200      	movs	r2, #0
 8002868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800286a:	4b04      	ldr	r3, [pc, #16]	@ (800287c <SysTick_Config+0x40>)
 800286c:	2207      	movs	r2, #7
 800286e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	e000e010 	.word	0xe000e010

08002880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff ff05 	bl	8002698 <__NVIC_SetPriorityGrouping>
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002896:	b580      	push	{r7, lr}
 8002898:	b086      	sub	sp, #24
 800289a:	af00      	add	r7, sp, #0
 800289c:	4603      	mov	r3, r0
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028a8:	f7ff ff1a 	bl	80026e0 <__NVIC_GetPriorityGrouping>
 80028ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68b9      	ldr	r1, [r7, #8]
 80028b2:	6978      	ldr	r0, [r7, #20]
 80028b4:	f7ff ff8e 	bl	80027d4 <NVIC_EncodePriority>
 80028b8:	4602      	mov	r2, r0
 80028ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028be:	4611      	mov	r1, r2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff ff5d 	bl	8002780 <__NVIC_SetPriority>
}
 80028c6:	bf00      	nop
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	4603      	mov	r3, r0
 80028d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff ff0d 	bl	80026fc <__NVIC_EnableIRQ>
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	4603      	mov	r3, r0
 80028f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80028f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff1d 	bl	8002738 <__NVIC_DisableIRQ>
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff ff94 	bl	800283c <SysTick_Config>
 8002914:	4603      	mov	r3, r0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800292c:	f7fe ffb4 	bl	8001898 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e099      	b.n	8002a70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0201 	bic.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800295c:	e00f      	b.n	800297e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800295e:	f7fe ff9b 	bl	8001898 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b05      	cmp	r3, #5
 800296a:	d908      	bls.n	800297e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2220      	movs	r2, #32
 8002970:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2203      	movs	r2, #3
 8002976:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e078      	b.n	8002a70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1e8      	bne.n	800295e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	4b38      	ldr	r3, [pc, #224]	@ (8002a78 <HAL_DMA_Init+0x158>)
 8002998:	4013      	ands	r3, r2
 800299a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d107      	bne.n	80029e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e0:	4313      	orrs	r3, r2
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f023 0307 	bic.w	r3, r3, #7
 80029fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d117      	bne.n	8002a42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00e      	beq.n	8002a42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 fad9 	bl	8002fdc <DMA_CheckFifoParam>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2240      	movs	r2, #64	@ 0x40
 8002a34:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e016      	b.n	8002a70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 fa90 	bl	8002f70 <DMA_CalcBaseAndBitshift>
 8002a50:	4603      	mov	r3, r0
 8002a52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a58:	223f      	movs	r2, #63	@ 0x3f
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	f010803f 	.word	0xf010803f

08002a7c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e050      	b.n	8002b30 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d101      	bne.n	8002a9e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e048      	b.n	8002b30 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0201 	bic.w	r2, r2, #1
 8002aac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2200      	movs	r2, #0
 8002abc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2200      	movs	r2, #0
 8002acc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2221      	movs	r2, #33	@ 0x21
 8002adc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fa46 	bl	8002f70 <DMA_CalcBaseAndBitshift>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b10:	223f      	movs	r2, #63	@ 0x3f
 8002b12:	409a      	lsls	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b44:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b46:	f7fe fea7 	bl	8001898 <HAL_GetTick>
 8002b4a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d008      	beq.n	8002b6a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2280      	movs	r2, #128	@ 0x80
 8002b5c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e052      	b.n	8002c10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0216 	bic.w	r2, r2, #22
 8002b78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695a      	ldr	r2, [r3, #20]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b88:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d103      	bne.n	8002b9a <HAL_DMA_Abort+0x62>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d007      	beq.n	8002baa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0208 	bic.w	r2, r2, #8
 8002ba8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0201 	bic.w	r2, r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bba:	e013      	b.n	8002be4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bbc:	f7fe fe6c 	bl	8001898 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b05      	cmp	r3, #5
 8002bc8:	d90c      	bls.n	8002be4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e015      	b.n	8002c10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1e4      	bne.n	8002bbc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf6:	223f      	movs	r2, #63	@ 0x3f
 8002bf8:	409a      	lsls	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d004      	beq.n	8002c36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2280      	movs	r2, #128	@ 0x80
 8002c30:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e00c      	b.n	8002c50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2205      	movs	r2, #5
 8002c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0201 	bic.w	r2, r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c68:	4b8e      	ldr	r3, [pc, #568]	@ (8002ea4 <HAL_DMA_IRQHandler+0x248>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a8e      	ldr	r2, [pc, #568]	@ (8002ea8 <HAL_DMA_IRQHandler+0x24c>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	0a9b      	lsrs	r3, r3, #10
 8002c74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c86:	2208      	movs	r2, #8
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d01a      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d013      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0204 	bic.w	r2, r2, #4
 8002cae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb4:	2208      	movs	r2, #8
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc0:	f043 0201 	orr.w	r2, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ccc:	2201      	movs	r2, #1
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d012      	beq.n	8002cfe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00b      	beq.n	8002cfe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cea:	2201      	movs	r2, #1
 8002cec:	409a      	lsls	r2, r3
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf6:	f043 0202 	orr.w	r2, r3, #2
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d02:	2204      	movs	r2, #4
 8002d04:	409a      	lsls	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d012      	beq.n	8002d34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00b      	beq.n	8002d34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d20:	2204      	movs	r2, #4
 8002d22:	409a      	lsls	r2, r3
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2c:	f043 0204 	orr.w	r2, r3, #4
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d38:	2210      	movs	r2, #16
 8002d3a:	409a      	lsls	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d043      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d03c      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d56:	2210      	movs	r2, #16
 8002d58:	409a      	lsls	r2, r3
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d018      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d108      	bne.n	8002d8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d024      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	4798      	blx	r3
 8002d8a:	e01f      	b.n	8002dcc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d01b      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	4798      	blx	r3
 8002d9c:	e016      	b.n	8002dcc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d107      	bne.n	8002dbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0208 	bic.w	r2, r2, #8
 8002dba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	409a      	lsls	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 808f 	beq.w	8002efc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 8087 	beq.w	8002efc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df2:	2220      	movs	r2, #32
 8002df4:	409a      	lsls	r2, r3
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b05      	cmp	r3, #5
 8002e04:	d136      	bne.n	8002e74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0216 	bic.w	r2, r2, #22
 8002e14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695a      	ldr	r2, [r3, #20]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d103      	bne.n	8002e36 <HAL_DMA_IRQHandler+0x1da>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d007      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0208 	bic.w	r2, r2, #8
 8002e44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e4a:	223f      	movs	r2, #63	@ 0x3f
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d07e      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	4798      	blx	r3
        }
        return;
 8002e72:	e079      	b.n	8002f68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d01d      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10d      	bne.n	8002eac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d031      	beq.n	8002efc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	4798      	blx	r3
 8002ea0:	e02c      	b.n	8002efc <HAL_DMA_IRQHandler+0x2a0>
 8002ea2:	bf00      	nop
 8002ea4:	2000000c 	.word	0x2000000c
 8002ea8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d023      	beq.n	8002efc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	4798      	blx	r3
 8002ebc:	e01e      	b.n	8002efc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10f      	bne.n	8002eec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0210 	bic.w	r2, r2, #16
 8002eda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d032      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d022      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2205      	movs	r2, #5
 8002f14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0201 	bic.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	60bb      	str	r3, [r7, #8]
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d307      	bcc.n	8002f44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f2      	bne.n	8002f28 <HAL_DMA_IRQHandler+0x2cc>
 8002f42:	e000      	b.n	8002f46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d005      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	4798      	blx	r3
 8002f66:	e000      	b.n	8002f6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f68:	bf00      	nop
    }
  }
}
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	3b10      	subs	r3, #16
 8002f80:	4a14      	ldr	r2, [pc, #80]	@ (8002fd4 <DMA_CalcBaseAndBitshift+0x64>)
 8002f82:	fba2 2303 	umull	r2, r3, r2, r3
 8002f86:	091b      	lsrs	r3, r3, #4
 8002f88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f8a:	4a13      	ldr	r2, [pc, #76]	@ (8002fd8 <DMA_CalcBaseAndBitshift+0x68>)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4413      	add	r3, r2
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d909      	bls.n	8002fb2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002fa6:	f023 0303 	bic.w	r3, r3, #3
 8002faa:	1d1a      	adds	r2, r3, #4
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fb0:	e007      	b.n	8002fc2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002fba:	f023 0303 	bic.w	r3, r3, #3
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	aaaaaaab 	.word	0xaaaaaaab
 8002fd8:	0800ccf4 	.word	0x0800ccf4

08002fdc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d11f      	bne.n	8003036 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d856      	bhi.n	80030aa <DMA_CheckFifoParam+0xce>
 8002ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8003004 <DMA_CheckFifoParam+0x28>)
 8002ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003002:	bf00      	nop
 8003004:	08003015 	.word	0x08003015
 8003008:	08003027 	.word	0x08003027
 800300c:	08003015 	.word	0x08003015
 8003010:	080030ab 	.word	0x080030ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003018:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d046      	beq.n	80030ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003024:	e043      	b.n	80030ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800302e:	d140      	bne.n	80030b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003034:	e03d      	b.n	80030b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800303e:	d121      	bne.n	8003084 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b03      	cmp	r3, #3
 8003044:	d837      	bhi.n	80030b6 <DMA_CheckFifoParam+0xda>
 8003046:	a201      	add	r2, pc, #4	@ (adr r2, 800304c <DMA_CheckFifoParam+0x70>)
 8003048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304c:	0800305d 	.word	0x0800305d
 8003050:	08003063 	.word	0x08003063
 8003054:	0800305d 	.word	0x0800305d
 8003058:	08003075 	.word	0x08003075
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	73fb      	strb	r3, [r7, #15]
      break;
 8003060:	e030      	b.n	80030c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003066:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d025      	beq.n	80030ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003072:	e022      	b.n	80030ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003078:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800307c:	d11f      	bne.n	80030be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003082:	e01c      	b.n	80030be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d903      	bls.n	8003092 <DMA_CheckFifoParam+0xb6>
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2b03      	cmp	r3, #3
 800308e:	d003      	beq.n	8003098 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003090:	e018      	b.n	80030c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	73fb      	strb	r3, [r7, #15]
      break;
 8003096:	e015      	b.n	80030c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00e      	beq.n	80030c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	73fb      	strb	r3, [r7, #15]
      break;
 80030a8:	e00b      	b.n	80030c2 <DMA_CheckFifoParam+0xe6>
      break;
 80030aa:	bf00      	nop
 80030ac:	e00a      	b.n	80030c4 <DMA_CheckFifoParam+0xe8>
      break;
 80030ae:	bf00      	nop
 80030b0:	e008      	b.n	80030c4 <DMA_CheckFifoParam+0xe8>
      break;
 80030b2:	bf00      	nop
 80030b4:	e006      	b.n	80030c4 <DMA_CheckFifoParam+0xe8>
      break;
 80030b6:	bf00      	nop
 80030b8:	e004      	b.n	80030c4 <DMA_CheckFifoParam+0xe8>
      break;
 80030ba:	bf00      	nop
 80030bc:	e002      	b.n	80030c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80030be:	bf00      	nop
 80030c0:	e000      	b.n	80030c4 <DMA_CheckFifoParam+0xe8>
      break;
 80030c2:	bf00      	nop
    }
  } 
  
  return status; 
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop

080030d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b089      	sub	sp, #36	@ 0x24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030de:	2300      	movs	r3, #0
 80030e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ea:	2300      	movs	r3, #0
 80030ec:	61fb      	str	r3, [r7, #28]
 80030ee:	e16b      	b.n	80033c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030f0:	2201      	movs	r2, #1
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4013      	ands	r3, r2
 8003102:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	429a      	cmp	r2, r3
 800310a:	f040 815a 	bne.w	80033c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	2b01      	cmp	r3, #1
 8003118:	d005      	beq.n	8003126 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003122:	2b02      	cmp	r3, #2
 8003124:	d130      	bne.n	8003188 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	2203      	movs	r2, #3
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43db      	mvns	r3, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4013      	ands	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4313      	orrs	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800315c:	2201      	movs	r2, #1
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4013      	ands	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	f003 0201 	and.w	r2, r3, #1
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 0303 	and.w	r3, r3, #3
 8003190:	2b03      	cmp	r3, #3
 8003192:	d017      	beq.n	80031c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	2203      	movs	r2, #3
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d123      	bne.n	8003218 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	08da      	lsrs	r2, r3, #3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3208      	adds	r2, #8
 80031d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	220f      	movs	r2, #15
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4013      	ands	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	08da      	lsrs	r2, r3, #3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3208      	adds	r2, #8
 8003212:	69b9      	ldr	r1, [r7, #24]
 8003214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	2203      	movs	r2, #3
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	43db      	mvns	r3, r3
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4013      	ands	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 0203 	and.w	r2, r3, #3
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 80b4 	beq.w	80033c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	4b60      	ldr	r3, [pc, #384]	@ (80033e0 <HAL_GPIO_Init+0x30c>)
 8003260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003262:	4a5f      	ldr	r2, [pc, #380]	@ (80033e0 <HAL_GPIO_Init+0x30c>)
 8003264:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003268:	6453      	str	r3, [r2, #68]	@ 0x44
 800326a:	4b5d      	ldr	r3, [pc, #372]	@ (80033e0 <HAL_GPIO_Init+0x30c>)
 800326c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003276:	4a5b      	ldr	r2, [pc, #364]	@ (80033e4 <HAL_GPIO_Init+0x310>)
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	089b      	lsrs	r3, r3, #2
 800327c:	3302      	adds	r3, #2
 800327e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	220f      	movs	r2, #15
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	43db      	mvns	r3, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4013      	ands	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a52      	ldr	r2, [pc, #328]	@ (80033e8 <HAL_GPIO_Init+0x314>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d02b      	beq.n	80032fa <HAL_GPIO_Init+0x226>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a51      	ldr	r2, [pc, #324]	@ (80033ec <HAL_GPIO_Init+0x318>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d025      	beq.n	80032f6 <HAL_GPIO_Init+0x222>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a50      	ldr	r2, [pc, #320]	@ (80033f0 <HAL_GPIO_Init+0x31c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d01f      	beq.n	80032f2 <HAL_GPIO_Init+0x21e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a4f      	ldr	r2, [pc, #316]	@ (80033f4 <HAL_GPIO_Init+0x320>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d019      	beq.n	80032ee <HAL_GPIO_Init+0x21a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a4e      	ldr	r2, [pc, #312]	@ (80033f8 <HAL_GPIO_Init+0x324>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d013      	beq.n	80032ea <HAL_GPIO_Init+0x216>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a4d      	ldr	r2, [pc, #308]	@ (80033fc <HAL_GPIO_Init+0x328>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00d      	beq.n	80032e6 <HAL_GPIO_Init+0x212>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a4c      	ldr	r2, [pc, #304]	@ (8003400 <HAL_GPIO_Init+0x32c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d007      	beq.n	80032e2 <HAL_GPIO_Init+0x20e>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003404 <HAL_GPIO_Init+0x330>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d101      	bne.n	80032de <HAL_GPIO_Init+0x20a>
 80032da:	2307      	movs	r3, #7
 80032dc:	e00e      	b.n	80032fc <HAL_GPIO_Init+0x228>
 80032de:	2308      	movs	r3, #8
 80032e0:	e00c      	b.n	80032fc <HAL_GPIO_Init+0x228>
 80032e2:	2306      	movs	r3, #6
 80032e4:	e00a      	b.n	80032fc <HAL_GPIO_Init+0x228>
 80032e6:	2305      	movs	r3, #5
 80032e8:	e008      	b.n	80032fc <HAL_GPIO_Init+0x228>
 80032ea:	2304      	movs	r3, #4
 80032ec:	e006      	b.n	80032fc <HAL_GPIO_Init+0x228>
 80032ee:	2303      	movs	r3, #3
 80032f0:	e004      	b.n	80032fc <HAL_GPIO_Init+0x228>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e002      	b.n	80032fc <HAL_GPIO_Init+0x228>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <HAL_GPIO_Init+0x228>
 80032fa:	2300      	movs	r3, #0
 80032fc:	69fa      	ldr	r2, [r7, #28]
 80032fe:	f002 0203 	and.w	r2, r2, #3
 8003302:	0092      	lsls	r2, r2, #2
 8003304:	4093      	lsls	r3, r2
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4313      	orrs	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800330c:	4935      	ldr	r1, [pc, #212]	@ (80033e4 <HAL_GPIO_Init+0x310>)
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	089b      	lsrs	r3, r3, #2
 8003312:	3302      	adds	r3, #2
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800331a:	4b3b      	ldr	r3, [pc, #236]	@ (8003408 <HAL_GPIO_Init+0x334>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	43db      	mvns	r3, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4013      	ands	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4313      	orrs	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800333e:	4a32      	ldr	r2, [pc, #200]	@ (8003408 <HAL_GPIO_Init+0x334>)
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003344:	4b30      	ldr	r3, [pc, #192]	@ (8003408 <HAL_GPIO_Init+0x334>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	43db      	mvns	r3, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4013      	ands	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003368:	4a27      	ldr	r2, [pc, #156]	@ (8003408 <HAL_GPIO_Init+0x334>)
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800336e:	4b26      	ldr	r3, [pc, #152]	@ (8003408 <HAL_GPIO_Init+0x334>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	43db      	mvns	r3, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4013      	ands	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4313      	orrs	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003392:	4a1d      	ldr	r2, [pc, #116]	@ (8003408 <HAL_GPIO_Init+0x334>)
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003398:	4b1b      	ldr	r3, [pc, #108]	@ (8003408 <HAL_GPIO_Init+0x334>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	43db      	mvns	r3, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4013      	ands	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033bc:	4a12      	ldr	r2, [pc, #72]	@ (8003408 <HAL_GPIO_Init+0x334>)
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	3301      	adds	r3, #1
 80033c6:	61fb      	str	r3, [r7, #28]
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	2b0f      	cmp	r3, #15
 80033cc:	f67f ae90 	bls.w	80030f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033d0:	bf00      	nop
 80033d2:	bf00      	nop
 80033d4:	3724      	adds	r7, #36	@ 0x24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40023800 	.word	0x40023800
 80033e4:	40013800 	.word	0x40013800
 80033e8:	40020000 	.word	0x40020000
 80033ec:	40020400 	.word	0x40020400
 80033f0:	40020800 	.word	0x40020800
 80033f4:	40020c00 	.word	0x40020c00
 80033f8:	40021000 	.word	0x40021000
 80033fc:	40021400 	.word	0x40021400
 8003400:	40021800 	.word	0x40021800
 8003404:	40021c00 	.word	0x40021c00
 8003408:	40013c00 	.word	0x40013c00

0800340c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003416:	2300      	movs	r3, #0
 8003418:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800341e:	2300      	movs	r3, #0
 8003420:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	e0cd      	b.n	80035c4 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003428:	2201      	movs	r2, #1
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4013      	ands	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	429a      	cmp	r2, r3
 8003440:	f040 80bd 	bne.w	80035be <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003444:	4a65      	ldr	r2, [pc, #404]	@ (80035dc <HAL_GPIO_DeInit+0x1d0>)
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	089b      	lsrs	r3, r3, #2
 800344a:	3302      	adds	r3, #2
 800344c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003450:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f003 0303 	and.w	r3, r3, #3
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	220f      	movs	r2, #15
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	4013      	ands	r3, r2
 8003464:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a5d      	ldr	r2, [pc, #372]	@ (80035e0 <HAL_GPIO_DeInit+0x1d4>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d02b      	beq.n	80034c6 <HAL_GPIO_DeInit+0xba>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a5c      	ldr	r2, [pc, #368]	@ (80035e4 <HAL_GPIO_DeInit+0x1d8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d025      	beq.n	80034c2 <HAL_GPIO_DeInit+0xb6>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a5b      	ldr	r2, [pc, #364]	@ (80035e8 <HAL_GPIO_DeInit+0x1dc>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d01f      	beq.n	80034be <HAL_GPIO_DeInit+0xb2>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a5a      	ldr	r2, [pc, #360]	@ (80035ec <HAL_GPIO_DeInit+0x1e0>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d019      	beq.n	80034ba <HAL_GPIO_DeInit+0xae>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a59      	ldr	r2, [pc, #356]	@ (80035f0 <HAL_GPIO_DeInit+0x1e4>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d013      	beq.n	80034b6 <HAL_GPIO_DeInit+0xaa>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a58      	ldr	r2, [pc, #352]	@ (80035f4 <HAL_GPIO_DeInit+0x1e8>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d00d      	beq.n	80034b2 <HAL_GPIO_DeInit+0xa6>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a57      	ldr	r2, [pc, #348]	@ (80035f8 <HAL_GPIO_DeInit+0x1ec>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d007      	beq.n	80034ae <HAL_GPIO_DeInit+0xa2>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a56      	ldr	r2, [pc, #344]	@ (80035fc <HAL_GPIO_DeInit+0x1f0>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d101      	bne.n	80034aa <HAL_GPIO_DeInit+0x9e>
 80034a6:	2307      	movs	r3, #7
 80034a8:	e00e      	b.n	80034c8 <HAL_GPIO_DeInit+0xbc>
 80034aa:	2308      	movs	r3, #8
 80034ac:	e00c      	b.n	80034c8 <HAL_GPIO_DeInit+0xbc>
 80034ae:	2306      	movs	r3, #6
 80034b0:	e00a      	b.n	80034c8 <HAL_GPIO_DeInit+0xbc>
 80034b2:	2305      	movs	r3, #5
 80034b4:	e008      	b.n	80034c8 <HAL_GPIO_DeInit+0xbc>
 80034b6:	2304      	movs	r3, #4
 80034b8:	e006      	b.n	80034c8 <HAL_GPIO_DeInit+0xbc>
 80034ba:	2303      	movs	r3, #3
 80034bc:	e004      	b.n	80034c8 <HAL_GPIO_DeInit+0xbc>
 80034be:	2302      	movs	r3, #2
 80034c0:	e002      	b.n	80034c8 <HAL_GPIO_DeInit+0xbc>
 80034c2:	2301      	movs	r3, #1
 80034c4:	e000      	b.n	80034c8 <HAL_GPIO_DeInit+0xbc>
 80034c6:	2300      	movs	r3, #0
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	f002 0203 	and.w	r2, r2, #3
 80034ce:	0092      	lsls	r2, r2, #2
 80034d0:	4093      	lsls	r3, r2
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d132      	bne.n	800353e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80034d8:	4b49      	ldr	r3, [pc, #292]	@ (8003600 <HAL_GPIO_DeInit+0x1f4>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	43db      	mvns	r3, r3
 80034e0:	4947      	ldr	r1, [pc, #284]	@ (8003600 <HAL_GPIO_DeInit+0x1f4>)
 80034e2:	4013      	ands	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80034e6:	4b46      	ldr	r3, [pc, #280]	@ (8003600 <HAL_GPIO_DeInit+0x1f4>)
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	43db      	mvns	r3, r3
 80034ee:	4944      	ldr	r1, [pc, #272]	@ (8003600 <HAL_GPIO_DeInit+0x1f4>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80034f4:	4b42      	ldr	r3, [pc, #264]	@ (8003600 <HAL_GPIO_DeInit+0x1f4>)
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	43db      	mvns	r3, r3
 80034fc:	4940      	ldr	r1, [pc, #256]	@ (8003600 <HAL_GPIO_DeInit+0x1f4>)
 80034fe:	4013      	ands	r3, r2
 8003500:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003502:	4b3f      	ldr	r3, [pc, #252]	@ (8003600 <HAL_GPIO_DeInit+0x1f4>)
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	43db      	mvns	r3, r3
 800350a:	493d      	ldr	r1, [pc, #244]	@ (8003600 <HAL_GPIO_DeInit+0x1f4>)
 800350c:	4013      	ands	r3, r2
 800350e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	220f      	movs	r2, #15
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003520:	4a2e      	ldr	r2, [pc, #184]	@ (80035dc <HAL_GPIO_DeInit+0x1d0>)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	089b      	lsrs	r3, r3, #2
 8003526:	3302      	adds	r3, #2
 8003528:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	43da      	mvns	r2, r3
 8003530:	482a      	ldr	r0, [pc, #168]	@ (80035dc <HAL_GPIO_DeInit+0x1d0>)
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	089b      	lsrs	r3, r3, #2
 8003536:	400a      	ands	r2, r1
 8003538:	3302      	adds	r3, #2
 800353a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	2103      	movs	r1, #3
 8003548:	fa01 f303 	lsl.w	r3, r1, r3
 800354c:	43db      	mvns	r3, r3
 800354e:	401a      	ands	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	08da      	lsrs	r2, r3, #3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3208      	adds	r2, #8
 800355c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	220f      	movs	r2, #15
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	43db      	mvns	r3, r3
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	08d2      	lsrs	r2, r2, #3
 8003574:	4019      	ands	r1, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3208      	adds	r2, #8
 800357a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	2103      	movs	r1, #3
 8003588:	fa01 f303 	lsl.w	r3, r1, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	401a      	ands	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	2101      	movs	r1, #1
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	fa01 f303 	lsl.w	r3, r1, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	401a      	ands	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	2103      	movs	r1, #3
 80035b2:	fa01 f303 	lsl.w	r3, r1, r3
 80035b6:	43db      	mvns	r3, r3
 80035b8:	401a      	ands	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	3301      	adds	r3, #1
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	2b0f      	cmp	r3, #15
 80035c8:	f67f af2e 	bls.w	8003428 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80035cc:	bf00      	nop
 80035ce:	bf00      	nop
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40013800 	.word	0x40013800
 80035e0:	40020000 	.word	0x40020000
 80035e4:	40020400 	.word	0x40020400
 80035e8:	40020800 	.word	0x40020800
 80035ec:	40020c00 	.word	0x40020c00
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40021400 	.word	0x40021400
 80035f8:	40021800 	.word	0x40021800
 80035fc:	40021c00 	.word	0x40021c00
 8003600:	40013c00 	.word	0x40013c00

08003604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	807b      	strh	r3, [r7, #2]
 8003610:	4613      	mov	r3, r2
 8003612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003614:	787b      	ldrb	r3, [r7, #1]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800361a:	887a      	ldrh	r2, [r7, #2]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003620:	e003      	b.n	800362a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003622:	887b      	ldrh	r3, [r7, #2]
 8003624:	041a      	lsls	r2, r3, #16
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	619a      	str	r2, [r3, #24]
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003636:	b480      	push	{r7}
 8003638:	b085      	sub	sp, #20
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	460b      	mov	r3, r1
 8003640:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003648:	887a      	ldrh	r2, [r7, #2]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4013      	ands	r3, r2
 800364e:	041a      	lsls	r2, r3, #16
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	43d9      	mvns	r1, r3
 8003654:	887b      	ldrh	r3, [r7, #2]
 8003656:	400b      	ands	r3, r1
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	619a      	str	r2, [r3, #24]
}
 800365e:	bf00      	nop
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e12b      	b.n	80038d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7fd f8c0 	bl	8000818 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2224      	movs	r2, #36	@ 0x24
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0201 	bic.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036d0:	f001 ffd2 	bl	8005678 <HAL_RCC_GetPCLK1Freq>
 80036d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	4a81      	ldr	r2, [pc, #516]	@ (80038e0 <HAL_I2C_Init+0x274>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d807      	bhi.n	80036f0 <HAL_I2C_Init+0x84>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4a80      	ldr	r2, [pc, #512]	@ (80038e4 <HAL_I2C_Init+0x278>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	bf94      	ite	ls
 80036e8:	2301      	movls	r3, #1
 80036ea:	2300      	movhi	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	e006      	b.n	80036fe <HAL_I2C_Init+0x92>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4a7d      	ldr	r2, [pc, #500]	@ (80038e8 <HAL_I2C_Init+0x27c>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	bf94      	ite	ls
 80036f8:	2301      	movls	r3, #1
 80036fa:	2300      	movhi	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e0e7      	b.n	80038d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4a78      	ldr	r2, [pc, #480]	@ (80038ec <HAL_I2C_Init+0x280>)
 800370a:	fba2 2303 	umull	r2, r3, r2, r3
 800370e:	0c9b      	lsrs	r3, r3, #18
 8003710:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	430a      	orrs	r2, r1
 8003724:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	4a6a      	ldr	r2, [pc, #424]	@ (80038e0 <HAL_I2C_Init+0x274>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d802      	bhi.n	8003740 <HAL_I2C_Init+0xd4>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	3301      	adds	r3, #1
 800373e:	e009      	b.n	8003754 <HAL_I2C_Init+0xe8>
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003746:	fb02 f303 	mul.w	r3, r2, r3
 800374a:	4a69      	ldr	r2, [pc, #420]	@ (80038f0 <HAL_I2C_Init+0x284>)
 800374c:	fba2 2303 	umull	r2, r3, r2, r3
 8003750:	099b      	lsrs	r3, r3, #6
 8003752:	3301      	adds	r3, #1
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	430b      	orrs	r3, r1
 800375a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003766:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	495c      	ldr	r1, [pc, #368]	@ (80038e0 <HAL_I2C_Init+0x274>)
 8003770:	428b      	cmp	r3, r1
 8003772:	d819      	bhi.n	80037a8 <HAL_I2C_Init+0x13c>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	1e59      	subs	r1, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003782:	1c59      	adds	r1, r3, #1
 8003784:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003788:	400b      	ands	r3, r1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <HAL_I2C_Init+0x138>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1e59      	subs	r1, r3, #1
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	fbb1 f3f3 	udiv	r3, r1, r3
 800379c:	3301      	adds	r3, #1
 800379e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a2:	e051      	b.n	8003848 <HAL_I2C_Init+0x1dc>
 80037a4:	2304      	movs	r3, #4
 80037a6:	e04f      	b.n	8003848 <HAL_I2C_Init+0x1dc>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d111      	bne.n	80037d4 <HAL_I2C_Init+0x168>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	1e58      	subs	r0, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6859      	ldr	r1, [r3, #4]
 80037b8:	460b      	mov	r3, r1
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	440b      	add	r3, r1
 80037be:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c2:	3301      	adds	r3, #1
 80037c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	bf0c      	ite	eq
 80037cc:	2301      	moveq	r3, #1
 80037ce:	2300      	movne	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	e012      	b.n	80037fa <HAL_I2C_Init+0x18e>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	1e58      	subs	r0, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6859      	ldr	r1, [r3, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	0099      	lsls	r1, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ea:	3301      	adds	r3, #1
 80037ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bf0c      	ite	eq
 80037f4:	2301      	moveq	r3, #1
 80037f6:	2300      	movne	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <HAL_I2C_Init+0x196>
 80037fe:	2301      	movs	r3, #1
 8003800:	e022      	b.n	8003848 <HAL_I2C_Init+0x1dc>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10e      	bne.n	8003828 <HAL_I2C_Init+0x1bc>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	1e58      	subs	r0, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6859      	ldr	r1, [r3, #4]
 8003812:	460b      	mov	r3, r1
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	440b      	add	r3, r1
 8003818:	fbb0 f3f3 	udiv	r3, r0, r3
 800381c:	3301      	adds	r3, #1
 800381e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003822:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003826:	e00f      	b.n	8003848 <HAL_I2C_Init+0x1dc>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	1e58      	subs	r0, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6859      	ldr	r1, [r3, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	0099      	lsls	r1, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	fbb0 f3f3 	udiv	r3, r0, r3
 800383e:	3301      	adds	r3, #1
 8003840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003844:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	6809      	ldr	r1, [r1, #0]
 800384c:	4313      	orrs	r3, r2
 800384e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69da      	ldr	r2, [r3, #28]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003876:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6911      	ldr	r1, [r2, #16]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	68d2      	ldr	r2, [r2, #12]
 8003882:	4311      	orrs	r1, r2
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	430b      	orrs	r3, r1
 800388a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	000186a0 	.word	0x000186a0
 80038e4:	001e847f 	.word	0x001e847f
 80038e8:	003d08ff 	.word	0x003d08ff
 80038ec:	431bde83 	.word	0x431bde83
 80038f0:	10624dd3 	.word	0x10624dd3

080038f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af02      	add	r7, sp, #8
 80038fa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e101      	b.n	8003b0a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d106      	bne.n	8003926 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7fd fed5 	bl	80016d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2203      	movs	r2, #3
 800392a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003934:	d102      	bne.n	800393c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f003 fd9a 	bl	800747a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6818      	ldr	r0, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	7c1a      	ldrb	r2, [r3, #16]
 800394e:	f88d 2000 	strb.w	r2, [sp]
 8003952:	3304      	adds	r3, #4
 8003954:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003956:	f003 fc79 	bl	800724c <USB_CoreInit>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e0ce      	b.n	8003b0a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2100      	movs	r1, #0
 8003972:	4618      	mov	r0, r3
 8003974:	f003 fd92 	bl	800749c <USB_SetCurrentMode>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d005      	beq.n	800398a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2202      	movs	r2, #2
 8003982:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e0bf      	b.n	8003b0a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800398a:	2300      	movs	r3, #0
 800398c:	73fb      	strb	r3, [r7, #15]
 800398e:	e04a      	b.n	8003a26 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003990:	7bfa      	ldrb	r2, [r7, #15]
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	3315      	adds	r3, #21
 80039a0:	2201      	movs	r2, #1
 80039a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039a4:	7bfa      	ldrb	r2, [r7, #15]
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	4613      	mov	r3, r2
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	4413      	add	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	3314      	adds	r3, #20
 80039b4:	7bfa      	ldrb	r2, [r7, #15]
 80039b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039b8:	7bfa      	ldrb	r2, [r7, #15]
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	b298      	uxth	r0, r3
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4413      	add	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	332e      	adds	r3, #46	@ 0x2e
 80039cc:	4602      	mov	r2, r0
 80039ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039d0:	7bfa      	ldrb	r2, [r7, #15]
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	4613      	mov	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	4413      	add	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	3318      	adds	r3, #24
 80039e0:	2200      	movs	r2, #0
 80039e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039e4:	7bfa      	ldrb	r2, [r7, #15]
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	4613      	mov	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	4413      	add	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	331c      	adds	r3, #28
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039f8:	7bfa      	ldrb	r2, [r7, #15]
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	4613      	mov	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	3320      	adds	r3, #32
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a0c:	7bfa      	ldrb	r2, [r7, #15]
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	4613      	mov	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	3324      	adds	r3, #36	@ 0x24
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a20:	7bfb      	ldrb	r3, [r7, #15]
 8003a22:	3301      	adds	r3, #1
 8003a24:	73fb      	strb	r3, [r7, #15]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	791b      	ldrb	r3, [r3, #4]
 8003a2a:	7bfa      	ldrb	r2, [r7, #15]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d3af      	bcc.n	8003990 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a30:	2300      	movs	r3, #0
 8003a32:	73fb      	strb	r3, [r7, #15]
 8003a34:	e044      	b.n	8003ac0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a36:	7bfa      	ldrb	r2, [r7, #15]
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	4413      	add	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	440b      	add	r3, r1
 8003a44:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003a48:	2200      	movs	r2, #0
 8003a4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a4c:	7bfa      	ldrb	r2, [r7, #15]
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	4613      	mov	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003a5e:	7bfa      	ldrb	r2, [r7, #15]
 8003a60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a62:	7bfa      	ldrb	r2, [r7, #15]
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a78:	7bfa      	ldrb	r2, [r7, #15]
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a8e:	7bfa      	ldrb	r2, [r7, #15]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003aa4:	7bfa      	ldrb	r2, [r7, #15]
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4413      	add	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
 8003abc:	3301      	adds	r3, #1
 8003abe:	73fb      	strb	r3, [r7, #15]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	791b      	ldrb	r3, [r3, #4]
 8003ac4:	7bfa      	ldrb	r2, [r7, #15]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d3b5      	bcc.n	8003a36 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	7c1a      	ldrb	r2, [r3, #16]
 8003ad2:	f88d 2000 	strb.w	r2, [sp]
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ada:	f003 fd2b 	bl	8007534 <USB_DevInit>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e00c      	b.n	8003b0a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f004 fd75 	bl	80085f2 <USB_DevDisconnect>

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b084      	sub	sp, #16
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_PCD_Start+0x1c>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e022      	b.n	8003b74 <HAL_PCD_Start+0x62>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d009      	beq.n	8003b56 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d105      	bne.n	8003b56 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b4e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f003 fc7c 	bl	8007458 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f004 fd23 	bl	80085b0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b7c:	b590      	push	{r4, r7, lr}
 8003b7e:	b08d      	sub	sp, #52	@ 0x34
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f004 fde1 	bl	800875a <USB_GetMode>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f040 848c 	bne.w	80044b8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f004 fd45 	bl	8008634 <USB_ReadInterrupts>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 8482 	beq.w	80044b6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	0a1b      	lsrs	r3, r3, #8
 8003bbc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f004 fd32 	bl	8008634 <USB_ReadInterrupts>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d107      	bne.n	8003bea <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695a      	ldr	r2, [r3, #20]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f002 0202 	and.w	r2, r2, #2
 8003be8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f004 fd20 	bl	8008634 <USB_ReadInterrupts>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	f003 0310 	and.w	r3, r3, #16
 8003bfa:	2b10      	cmp	r3, #16
 8003bfc:	d161      	bne.n	8003cc2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	699a      	ldr	r2, [r3, #24]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0210 	bic.w	r2, r2, #16
 8003c0c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	f003 020f 	and.w	r2, r3, #15
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	4413      	add	r3, r2
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003c34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c38:	d124      	bne.n	8003c84 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003c40:	4013      	ands	r3, r2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d035      	beq.n	8003cb2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	091b      	lsrs	r3, r3, #4
 8003c4e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	461a      	mov	r2, r3
 8003c58:	6a38      	ldr	r0, [r7, #32]
 8003c5a:	f004 fb57 	bl	800830c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	091b      	lsrs	r3, r3, #4
 8003c66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c6a:	441a      	add	r2, r3
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	695a      	ldr	r2, [r3, #20]
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	091b      	lsrs	r3, r3, #4
 8003c78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c7c:	441a      	add	r2, r3
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	615a      	str	r2, [r3, #20]
 8003c82:	e016      	b.n	8003cb2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003c8a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003c8e:	d110      	bne.n	8003cb2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c96:	2208      	movs	r2, #8
 8003c98:	4619      	mov	r1, r3
 8003c9a:	6a38      	ldr	r0, [r7, #32]
 8003c9c:	f004 fb36 	bl	800830c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	695a      	ldr	r2, [r3, #20]
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	091b      	lsrs	r3, r3, #4
 8003ca8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cac:	441a      	add	r2, r3
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699a      	ldr	r2, [r3, #24]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f042 0210 	orr.w	r2, r2, #16
 8003cc0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f004 fcb4 	bl	8008634 <USB_ReadInterrupts>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cd2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003cd6:	f040 80a7 	bne.w	8003e28 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f004 fcb9 	bl	800865a <USB_ReadDevAllOutEpInterrupt>
 8003ce8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003cea:	e099      	b.n	8003e20 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 808e 	beq.w	8003e14 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	4611      	mov	r1, r2
 8003d02:	4618      	mov	r0, r3
 8003d04:	f004 fcdd 	bl	80086c2 <USB_ReadDevOutEPInterrupt>
 8003d08:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00c      	beq.n	8003d2e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	015a      	lsls	r2, r3, #5
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d20:	461a      	mov	r2, r3
 8003d22:	2301      	movs	r3, #1
 8003d24:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003d26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 fea3 	bl	8004a74 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f003 0308 	and.w	r3, r3, #8
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00c      	beq.n	8003d52 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d44:	461a      	mov	r2, r3
 8003d46:	2308      	movs	r3, #8
 8003d48:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003d4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 ff79 	bl	8004c44 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d008      	beq.n	8003d6e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d68:	461a      	mov	r2, r3
 8003d6a:	2310      	movs	r3, #16
 8003d6c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d030      	beq.n	8003dda <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d80:	2b80      	cmp	r3, #128	@ 0x80
 8003d82:	d109      	bne.n	8003d98 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	69fa      	ldr	r2, [r7, #28]
 8003d8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d96:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003d98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	4413      	add	r3, r2
 8003daa:	3304      	adds	r3, #4
 8003dac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	78db      	ldrb	r3, [r3, #3]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d108      	bne.n	8003dc8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2200      	movs	r2, #0
 8003dba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f008 f894 	bl	800bef0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f003 0320 	and.w	r3, r3, #32
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d008      	beq.n	8003df6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003df0:	461a      	mov	r2, r3
 8003df2:	2320      	movs	r3, #32
 8003df4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d009      	beq.n	8003e14 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e12:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e16:	3301      	adds	r3, #1
 8003e18:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e1c:	085b      	lsrs	r3, r3, #1
 8003e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f47f af62 	bne.w	8003cec <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f004 fc01 	bl	8008634 <USB_ReadInterrupts>
 8003e32:	4603      	mov	r3, r0
 8003e34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e3c:	f040 80db 	bne.w	8003ff6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f004 fc22 	bl	800868e <USB_ReadDevAllInEpInterrupt>
 8003e4a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003e50:	e0cd      	b.n	8003fee <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 80c2 	beq.w	8003fe2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	4611      	mov	r1, r2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f004 fc48 	bl	80086fe <USB_ReadDevInEPInterrupt>
 8003e6e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d057      	beq.n	8003f2a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	2201      	movs	r2, #1
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	43db      	mvns	r3, r3
 8003e94:	69f9      	ldr	r1, [r7, #28]
 8003e96:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea0:	015a      	lsls	r2, r3, #5
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eaa:	461a      	mov	r2, r3
 8003eac:	2301      	movs	r3, #1
 8003eae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	799b      	ldrb	r3, [r3, #6]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d132      	bne.n	8003f1e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003eb8:	6879      	ldr	r1, [r7, #4]
 8003eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	3320      	adds	r3, #32
 8003ec8:	6819      	ldr	r1, [r3, #0]
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ece:	4613      	mov	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4403      	add	r3, r0
 8003ed8:	331c      	adds	r3, #28
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4419      	add	r1, r3
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4403      	add	r3, r0
 8003eec:	3320      	adds	r3, #32
 8003eee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d113      	bne.n	8003f1e <HAL_PCD_IRQHandler+0x3a2>
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003efa:	4613      	mov	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	3324      	adds	r3, #36	@ 0x24
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d108      	bne.n	8003f1e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f16:	461a      	mov	r2, r3
 8003f18:	2101      	movs	r1, #1
 8003f1a:	f004 fc4f 	bl	80087bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	4619      	mov	r1, r3
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f007 ff5e 	bl	800bde6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d008      	beq.n	8003f46 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f40:	461a      	mov	r2, r3
 8003f42:	2308      	movs	r3, #8
 8003f44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f003 0310 	and.w	r3, r3, #16
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d008      	beq.n	8003f62 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	2310      	movs	r3, #16
 8003f60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d008      	beq.n	8003f7e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f78:	461a      	mov	r2, r3
 8003f7a:	2340      	movs	r3, #64	@ 0x40
 8003f7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d023      	beq.n	8003fd0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003f88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f8a:	6a38      	ldr	r0, [r7, #32]
 8003f8c:	f003 fc36 	bl	80077fc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003f90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f92:	4613      	mov	r3, r2
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	4413      	add	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	3310      	adds	r3, #16
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	78db      	ldrb	r3, [r3, #3]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d108      	bne.n	8003fbe <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f007 ffab 	bl	800bf14 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc0:	015a      	lsls	r2, r3, #5
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fca:	461a      	mov	r2, r3
 8003fcc:	2302      	movs	r3, #2
 8003fce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003fda:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 fcbd 	bl	800495c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fea:	085b      	lsrs	r3, r3, #1
 8003fec:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f47f af2e 	bne.w	8003e52 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f004 fb1a 	bl	8008634 <USB_ReadInterrupts>
 8004000:	4603      	mov	r3, r0
 8004002:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004006:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800400a:	d122      	bne.n	8004052 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	69fa      	ldr	r2, [r7, #28]
 8004016:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800401a:	f023 0301 	bic.w	r3, r3, #1
 800401e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004026:	2b01      	cmp	r3, #1
 8004028:	d108      	bne.n	800403c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004032:	2100      	movs	r1, #0
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fea3 	bl	8004d80 <HAL_PCDEx_LPM_Callback>
 800403a:	e002      	b.n	8004042 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f007 ff49 	bl	800bed4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695a      	ldr	r2, [r3, #20]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004050:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f004 faec 	bl	8008634 <USB_ReadInterrupts>
 800405c:	4603      	mov	r3, r0
 800405e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004062:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004066:	d112      	bne.n	800408e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b01      	cmp	r3, #1
 8004076:	d102      	bne.n	800407e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f007 ff05 	bl	800be88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695a      	ldr	r2, [r3, #20]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800408c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f004 face 	bl	8008634 <USB_ReadInterrupts>
 8004098:	4603      	mov	r3, r0
 800409a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800409e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040a2:	f040 80b7 	bne.w	8004214 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	69fa      	ldr	r2, [r7, #28]
 80040b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040b4:	f023 0301 	bic.w	r3, r3, #1
 80040b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2110      	movs	r1, #16
 80040c0:	4618      	mov	r0, r3
 80040c2:	f003 fb9b 	bl	80077fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040c6:	2300      	movs	r3, #0
 80040c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040ca:	e046      	b.n	800415a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80040cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040d8:	461a      	mov	r2, r3
 80040da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80040de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80040e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040f0:	0151      	lsls	r1, r2, #5
 80040f2:	69fa      	ldr	r2, [r7, #28]
 80040f4:	440a      	add	r2, r1
 80040f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80040fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800410c:	461a      	mov	r2, r3
 800410e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004112:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	4413      	add	r3, r2
 800411c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004124:	0151      	lsls	r1, r2, #5
 8004126:	69fa      	ldr	r2, [r7, #28]
 8004128:	440a      	add	r2, r1
 800412a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800412e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004132:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	4413      	add	r3, r2
 800413c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004144:	0151      	lsls	r1, r2, #5
 8004146:	69fa      	ldr	r2, [r7, #28]
 8004148:	440a      	add	r2, r1
 800414a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800414e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004152:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004156:	3301      	adds	r3, #1
 8004158:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	791b      	ldrb	r3, [r3, #4]
 800415e:	461a      	mov	r2, r3
 8004160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004162:	4293      	cmp	r3, r2
 8004164:	d3b2      	bcc.n	80040cc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	69fa      	ldr	r2, [r7, #28]
 8004170:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004174:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004178:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	7bdb      	ldrb	r3, [r3, #15]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d016      	beq.n	80041b0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004188:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800418c:	69fa      	ldr	r2, [r7, #28]
 800418e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004192:	f043 030b 	orr.w	r3, r3, #11
 8004196:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a2:	69fa      	ldr	r2, [r7, #28]
 80041a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041a8:	f043 030b 	orr.w	r3, r3, #11
 80041ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80041ae:	e015      	b.n	80041dc <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	69fa      	ldr	r2, [r7, #28]
 80041ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80041c2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80041c6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	69fa      	ldr	r2, [r7, #28]
 80041d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041d6:	f043 030b 	orr.w	r3, r3, #11
 80041da:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	69fa      	ldr	r2, [r7, #28]
 80041e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041ea:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80041ee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6818      	ldr	r0, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80041fe:	461a      	mov	r2, r3
 8004200:	f004 fadc 	bl	80087bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695a      	ldr	r2, [r3, #20]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004212:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4618      	mov	r0, r3
 800421a:	f004 fa0b 	bl	8008634 <USB_ReadInterrupts>
 800421e:	4603      	mov	r3, r0
 8004220:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004224:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004228:	d123      	bne.n	8004272 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f004 faa1 	bl	8008776 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f003 fb58 	bl	80078ee <USB_GetDevSpeed>
 800423e:	4603      	mov	r3, r0
 8004240:	461a      	mov	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681c      	ldr	r4, [r3, #0]
 800424a:	f001 fa09 	bl	8005660 <HAL_RCC_GetHCLKFreq>
 800424e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004254:	461a      	mov	r2, r3
 8004256:	4620      	mov	r0, r4
 8004258:	f003 f85c 	bl	8007314 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f007 fdea 	bl	800be36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695a      	ldr	r2, [r3, #20]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004270:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f004 f9dc 	bl	8008634 <USB_ReadInterrupts>
 800427c:	4603      	mov	r3, r0
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b08      	cmp	r3, #8
 8004284:	d10a      	bne.n	800429c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f007 fdc7 	bl	800be1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695a      	ldr	r2, [r3, #20]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f002 0208 	and.w	r2, r2, #8
 800429a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f004 f9c7 	bl	8008634 <USB_ReadInterrupts>
 80042a6:	4603      	mov	r3, r0
 80042a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ac:	2b80      	cmp	r3, #128	@ 0x80
 80042ae:	d123      	bne.n	80042f8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042bc:	2301      	movs	r3, #1
 80042be:	627b      	str	r3, [r7, #36]	@ 0x24
 80042c0:	e014      	b.n	80042ec <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042c6:	4613      	mov	r3, r2
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	4413      	add	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	440b      	add	r3, r1
 80042d0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d105      	bne.n	80042e6 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	4619      	mov	r1, r3
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 fb0a 	bl	80048fa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e8:	3301      	adds	r3, #1
 80042ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	791b      	ldrb	r3, [r3, #4]
 80042f0:	461a      	mov	r2, r3
 80042f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d3e4      	bcc.n	80042c2 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f004 f999 	bl	8008634 <USB_ReadInterrupts>
 8004302:	4603      	mov	r3, r0
 8004304:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004308:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800430c:	d13c      	bne.n	8004388 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800430e:	2301      	movs	r3, #1
 8004310:	627b      	str	r3, [r7, #36]	@ 0x24
 8004312:	e02b      	b.n	800436c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	4413      	add	r3, r2
 800431c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004328:	4613      	mov	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	4413      	add	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	440b      	add	r3, r1
 8004332:	3318      	adds	r3, #24
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d115      	bne.n	8004366 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800433a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800433c:	2b00      	cmp	r3, #0
 800433e:	da12      	bge.n	8004366 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004340:	6879      	ldr	r1, [r7, #4]
 8004342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004344:	4613      	mov	r3, r2
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	4413      	add	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	440b      	add	r3, r1
 800434e:	3317      	adds	r3, #23
 8004350:	2201      	movs	r2, #1
 8004352:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004356:	b2db      	uxtb	r3, r3
 8004358:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800435c:	b2db      	uxtb	r3, r3
 800435e:	4619      	mov	r1, r3
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 faca 	bl	80048fa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004368:	3301      	adds	r3, #1
 800436a:	627b      	str	r3, [r7, #36]	@ 0x24
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	791b      	ldrb	r3, [r3, #4]
 8004370:	461a      	mov	r2, r3
 8004372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004374:	4293      	cmp	r3, r2
 8004376:	d3cd      	bcc.n	8004314 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695a      	ldr	r2, [r3, #20]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004386:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4618      	mov	r0, r3
 800438e:	f004 f951 	bl	8008634 <USB_ReadInterrupts>
 8004392:	4603      	mov	r3, r0
 8004394:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004398:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800439c:	d156      	bne.n	800444c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800439e:	2301      	movs	r3, #1
 80043a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80043a2:	e045      	b.n	8004430 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80043a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80043b4:	6879      	ldr	r1, [r7, #4]
 80043b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043b8:	4613      	mov	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	4413      	add	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	440b      	add	r3, r1
 80043c2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d12e      	bne.n	800442a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80043cc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	da2b      	bge.n	800442a <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	0c1a      	lsrs	r2, r3, #16
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80043dc:	4053      	eors	r3, r2
 80043de:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d121      	bne.n	800442a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80043e6:	6879      	ldr	r1, [r7, #4]
 80043e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ea:	4613      	mov	r3, r2
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	4413      	add	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	440b      	add	r3, r1
 80043f4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80043f8:	2201      	movs	r2, #1
 80043fa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10a      	bne.n	800442a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	69fa      	ldr	r2, [r7, #28]
 800441e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004422:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004426:	6053      	str	r3, [r2, #4]
            break;
 8004428:	e008      	b.n	800443c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800442a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442c:	3301      	adds	r3, #1
 800442e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	791b      	ldrb	r3, [r3, #4]
 8004434:	461a      	mov	r2, r3
 8004436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004438:	4293      	cmp	r3, r2
 800443a:	d3b3      	bcc.n	80043a4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695a      	ldr	r2, [r3, #20]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800444a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f004 f8ef 	bl	8008634 <USB_ReadInterrupts>
 8004456:	4603      	mov	r3, r0
 8004458:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800445c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004460:	d10a      	bne.n	8004478 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f007 fd68 	bl	800bf38 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695a      	ldr	r2, [r3, #20]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004476:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4618      	mov	r0, r3
 800447e:	f004 f8d9 	bl	8008634 <USB_ReadInterrupts>
 8004482:	4603      	mov	r3, r0
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b04      	cmp	r3, #4
 800448a:	d115      	bne.n	80044b8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	f003 0304 	and.w	r3, r3, #4
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f007 fd58 	bl	800bf54 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6859      	ldr	r1, [r3, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	605a      	str	r2, [r3, #4]
 80044b4:	e000      	b.n	80044b8 <HAL_PCD_IRQHandler+0x93c>
      return;
 80044b6:	bf00      	nop
    }
  }
}
 80044b8:	3734      	adds	r7, #52	@ 0x34
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd90      	pop	{r4, r7, pc}

080044be <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b082      	sub	sp, #8
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	460b      	mov	r3, r1
 80044c8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d101      	bne.n	80044d8 <HAL_PCD_SetAddress+0x1a>
 80044d4:	2302      	movs	r3, #2
 80044d6:	e012      	b.n	80044fe <HAL_PCD_SetAddress+0x40>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	78fa      	ldrb	r2, [r7, #3]
 80044e4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	78fa      	ldrb	r2, [r7, #3]
 80044ec:	4611      	mov	r1, r2
 80044ee:	4618      	mov	r0, r3
 80044f0:	f004 f838 	bl	8008564 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b084      	sub	sp, #16
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
 800450e:	4608      	mov	r0, r1
 8004510:	4611      	mov	r1, r2
 8004512:	461a      	mov	r2, r3
 8004514:	4603      	mov	r3, r0
 8004516:	70fb      	strb	r3, [r7, #3]
 8004518:	460b      	mov	r3, r1
 800451a:	803b      	strh	r3, [r7, #0]
 800451c:	4613      	mov	r3, r2
 800451e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004524:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004528:	2b00      	cmp	r3, #0
 800452a:	da0f      	bge.n	800454c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800452c:	78fb      	ldrb	r3, [r7, #3]
 800452e:	f003 020f 	and.w	r2, r3, #15
 8004532:	4613      	mov	r3, r2
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	3310      	adds	r3, #16
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	4413      	add	r3, r2
 8004540:	3304      	adds	r3, #4
 8004542:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2201      	movs	r2, #1
 8004548:	705a      	strb	r2, [r3, #1]
 800454a:	e00f      	b.n	800456c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800454c:	78fb      	ldrb	r3, [r7, #3]
 800454e:	f003 020f 	and.w	r2, r3, #15
 8004552:	4613      	mov	r3, r2
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	4413      	add	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	4413      	add	r3, r2
 8004562:	3304      	adds	r3, #4
 8004564:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800456c:	78fb      	ldrb	r3, [r7, #3]
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	b2da      	uxtb	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004578:	883b      	ldrh	r3, [r7, #0]
 800457a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	78ba      	ldrb	r2, [r7, #2]
 8004586:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	785b      	ldrb	r3, [r3, #1]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d004      	beq.n	800459a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	461a      	mov	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800459a:	78bb      	ldrb	r3, [r7, #2]
 800459c:	2b02      	cmp	r3, #2
 800459e:	d102      	bne.n	80045a6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d101      	bne.n	80045b4 <HAL_PCD_EP_Open+0xae>
 80045b0:	2302      	movs	r3, #2
 80045b2:	e00e      	b.n	80045d2 <HAL_PCD_EP_Open+0xcc>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68f9      	ldr	r1, [r7, #12]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f003 f9b8 	bl	8007938 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80045d0:	7afb      	ldrb	r3, [r7, #11]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b084      	sub	sp, #16
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	460b      	mov	r3, r1
 80045e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	da0f      	bge.n	800460e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045ee:	78fb      	ldrb	r3, [r7, #3]
 80045f0:	f003 020f 	and.w	r2, r3, #15
 80045f4:	4613      	mov	r3, r2
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	4413      	add	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	3310      	adds	r3, #16
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	4413      	add	r3, r2
 8004602:	3304      	adds	r3, #4
 8004604:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2201      	movs	r2, #1
 800460a:	705a      	strb	r2, [r3, #1]
 800460c:	e00f      	b.n	800462e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800460e:	78fb      	ldrb	r3, [r7, #3]
 8004610:	f003 020f 	and.w	r2, r3, #15
 8004614:	4613      	mov	r3, r2
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	4413      	add	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	4413      	add	r3, r2
 8004624:	3304      	adds	r3, #4
 8004626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800462e:	78fb      	ldrb	r3, [r7, #3]
 8004630:	f003 030f 	and.w	r3, r3, #15
 8004634:	b2da      	uxtb	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004640:	2b01      	cmp	r3, #1
 8004642:	d101      	bne.n	8004648 <HAL_PCD_EP_Close+0x6e>
 8004644:	2302      	movs	r3, #2
 8004646:	e00e      	b.n	8004666 <HAL_PCD_EP_Close+0x8c>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68f9      	ldr	r1, [r7, #12]
 8004656:	4618      	mov	r0, r3
 8004658:	f003 f9f6 	bl	8007a48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b086      	sub	sp, #24
 8004672:	af00      	add	r7, sp, #0
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	603b      	str	r3, [r7, #0]
 800467a:	460b      	mov	r3, r1
 800467c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800467e:	7afb      	ldrb	r3, [r7, #11]
 8004680:	f003 020f 	and.w	r2, r3, #15
 8004684:	4613      	mov	r3, r2
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	4413      	add	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	4413      	add	r3, r2
 8004694:	3304      	adds	r3, #4
 8004696:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	2200      	movs	r2, #0
 80046a8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2200      	movs	r2, #0
 80046ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046b0:	7afb      	ldrb	r3, [r7, #11]
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	799b      	ldrb	r3, [r3, #6]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d102      	bne.n	80046ca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6818      	ldr	r0, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	799b      	ldrb	r3, [r3, #6]
 80046d2:	461a      	mov	r2, r3
 80046d4:	6979      	ldr	r1, [r7, #20]
 80046d6:	f003 fa93 	bl	8007c00 <USB_EPStartXfer>

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	460b      	mov	r3, r1
 80046ee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80046f0:	78fb      	ldrb	r3, [r7, #3]
 80046f2:	f003 020f 	and.w	r2, r3, #15
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	4613      	mov	r3, r2
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	4413      	add	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004706:	681b      	ldr	r3, [r3, #0]
}
 8004708:	4618      	mov	r0, r3
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	607a      	str	r2, [r7, #4]
 800471e:	603b      	str	r3, [r7, #0]
 8004720:	460b      	mov	r3, r1
 8004722:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004724:	7afb      	ldrb	r3, [r7, #11]
 8004726:	f003 020f 	and.w	r2, r3, #15
 800472a:	4613      	mov	r3, r2
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	4413      	add	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	3310      	adds	r3, #16
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	4413      	add	r3, r2
 8004738:	3304      	adds	r3, #4
 800473a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	2200      	movs	r2, #0
 800474c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2201      	movs	r2, #1
 8004752:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004754:	7afb      	ldrb	r3, [r7, #11]
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	b2da      	uxtb	r2, r3
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	799b      	ldrb	r3, [r3, #6]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d102      	bne.n	800476e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	799b      	ldrb	r3, [r3, #6]
 8004776:	461a      	mov	r2, r3
 8004778:	6979      	ldr	r1, [r7, #20]
 800477a:	f003 fa41 	bl	8007c00 <USB_EPStartXfer>

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	460b      	mov	r3, r1
 8004792:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004794:	78fb      	ldrb	r3, [r7, #3]
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	7912      	ldrb	r2, [r2, #4]
 800479e:	4293      	cmp	r3, r2
 80047a0:	d901      	bls.n	80047a6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e04f      	b.n	8004846 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80047a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	da0f      	bge.n	80047ce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047ae:	78fb      	ldrb	r3, [r7, #3]
 80047b0:	f003 020f 	and.w	r2, r3, #15
 80047b4:	4613      	mov	r3, r2
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	4413      	add	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	3310      	adds	r3, #16
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	4413      	add	r3, r2
 80047c2:	3304      	adds	r3, #4
 80047c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2201      	movs	r2, #1
 80047ca:	705a      	strb	r2, [r3, #1]
 80047cc:	e00d      	b.n	80047ea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80047ce:	78fa      	ldrb	r2, [r7, #3]
 80047d0:	4613      	mov	r3, r2
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	4413      	add	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	4413      	add	r3, r2
 80047e0:	3304      	adds	r3, #4
 80047e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2201      	movs	r2, #1
 80047ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047f0:	78fb      	ldrb	r3, [r7, #3]
 80047f2:	f003 030f 	and.w	r3, r3, #15
 80047f6:	b2da      	uxtb	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004802:	2b01      	cmp	r3, #1
 8004804:	d101      	bne.n	800480a <HAL_PCD_EP_SetStall+0x82>
 8004806:	2302      	movs	r3, #2
 8004808:	e01d      	b.n	8004846 <HAL_PCD_EP_SetStall+0xbe>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68f9      	ldr	r1, [r7, #12]
 8004818:	4618      	mov	r0, r3
 800481a:	f003 fdcf 	bl	80083bc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800481e:	78fb      	ldrb	r3, [r7, #3]
 8004820:	f003 030f 	and.w	r3, r3, #15
 8004824:	2b00      	cmp	r3, #0
 8004826:	d109      	bne.n	800483c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6818      	ldr	r0, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	7999      	ldrb	r1, [r3, #6]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004836:	461a      	mov	r2, r3
 8004838:	f003 ffc0 	bl	80087bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b084      	sub	sp, #16
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	460b      	mov	r3, r1
 8004858:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800485a:	78fb      	ldrb	r3, [r7, #3]
 800485c:	f003 030f 	and.w	r3, r3, #15
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	7912      	ldrb	r2, [r2, #4]
 8004864:	4293      	cmp	r3, r2
 8004866:	d901      	bls.n	800486c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e042      	b.n	80048f2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800486c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004870:	2b00      	cmp	r3, #0
 8004872:	da0f      	bge.n	8004894 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004874:	78fb      	ldrb	r3, [r7, #3]
 8004876:	f003 020f 	and.w	r2, r3, #15
 800487a:	4613      	mov	r3, r2
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	4413      	add	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	3310      	adds	r3, #16
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	4413      	add	r3, r2
 8004888:	3304      	adds	r3, #4
 800488a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2201      	movs	r2, #1
 8004890:	705a      	strb	r2, [r3, #1]
 8004892:	e00f      	b.n	80048b4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	f003 020f 	and.w	r2, r3, #15
 800489a:	4613      	mov	r3, r2
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	4413      	add	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	4413      	add	r3, r2
 80048aa:	3304      	adds	r3, #4
 80048ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048ba:	78fb      	ldrb	r3, [r7, #3]
 80048bc:	f003 030f 	and.w	r3, r3, #15
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d101      	bne.n	80048d4 <HAL_PCD_EP_ClrStall+0x86>
 80048d0:	2302      	movs	r3, #2
 80048d2:	e00e      	b.n	80048f2 <HAL_PCD_EP_ClrStall+0xa4>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68f9      	ldr	r1, [r7, #12]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f003 fdd8 	bl	8008498 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b084      	sub	sp, #16
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
 8004902:	460b      	mov	r3, r1
 8004904:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004906:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800490a:	2b00      	cmp	r3, #0
 800490c:	da0c      	bge.n	8004928 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800490e:	78fb      	ldrb	r3, [r7, #3]
 8004910:	f003 020f 	and.w	r2, r3, #15
 8004914:	4613      	mov	r3, r2
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	4413      	add	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	3310      	adds	r3, #16
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	4413      	add	r3, r2
 8004922:	3304      	adds	r3, #4
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	e00c      	b.n	8004942 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004928:	78fb      	ldrb	r3, [r7, #3]
 800492a:	f003 020f 	and.w	r2, r3, #15
 800492e:	4613      	mov	r3, r2
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	4413      	add	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	4413      	add	r3, r2
 800493e:	3304      	adds	r3, #4
 8004940:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68f9      	ldr	r1, [r7, #12]
 8004948:	4618      	mov	r0, r3
 800494a:	f003 fbf7 	bl	800813c <USB_EPStopXfer>
 800494e:	4603      	mov	r3, r0
 8004950:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004952:	7afb      	ldrb	r3, [r7, #11]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b08a      	sub	sp, #40	@ 0x28
 8004960:	af02      	add	r7, sp, #8
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	4613      	mov	r3, r2
 8004974:	00db      	lsls	r3, r3, #3
 8004976:	4413      	add	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	3310      	adds	r3, #16
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	4413      	add	r3, r2
 8004980:	3304      	adds	r3, #4
 8004982:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	695a      	ldr	r2, [r3, #20]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	429a      	cmp	r2, r3
 800498e:	d901      	bls.n	8004994 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e06b      	b.n	8004a6c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	69fa      	ldr	r2, [r7, #28]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d902      	bls.n	80049b0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	3303      	adds	r3, #3
 80049b4:	089b      	lsrs	r3, r3, #2
 80049b6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80049b8:	e02a      	b.n	8004a10 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	69fa      	ldr	r2, [r7, #28]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d902      	bls.n	80049d6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	3303      	adds	r3, #3
 80049da:	089b      	lsrs	r3, r3, #2
 80049dc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	68d9      	ldr	r1, [r3, #12]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	4603      	mov	r3, r0
 80049f2:	6978      	ldr	r0, [r7, #20]
 80049f4:	f003 fc4c 	bl	8008290 <USB_WritePacket>

    ep->xfer_buff  += len;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	441a      	add	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	695a      	ldr	r2, [r3, #20]
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	441a      	add	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d809      	bhi.n	8004a3a <PCD_WriteEmptyTxFifo+0xde>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	695a      	ldr	r2, [r3, #20]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d203      	bcs.n	8004a3a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1bf      	bne.n	80049ba <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	691a      	ldr	r2, [r3, #16]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d811      	bhi.n	8004a6a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	f003 030f 	and.w	r3, r3, #15
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a52:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	6939      	ldr	r1, [r7, #16]
 8004a62:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a66:	4013      	ands	r3, r2
 8004a68:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3720      	adds	r7, #32
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b088      	sub	sp, #32
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	333c      	adds	r3, #60	@ 0x3c
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	799b      	ldrb	r3, [r3, #6]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d17b      	bne.n	8004ba2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f003 0308 	and.w	r3, r3, #8
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d015      	beq.n	8004ae0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	4a61      	ldr	r2, [pc, #388]	@ (8004c3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	f240 80b9 	bls.w	8004c30 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 80b3 	beq.w	8004c30 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004adc:	6093      	str	r3, [r2, #8]
 8004ade:	e0a7      	b.n	8004c30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f003 0320 	and.w	r3, r3, #32
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d009      	beq.n	8004afe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004af6:	461a      	mov	r2, r3
 8004af8:	2320      	movs	r3, #32
 8004afa:	6093      	str	r3, [r2, #8]
 8004afc:	e098      	b.n	8004c30 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f040 8093 	bne.w	8004c30 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	4a4b      	ldr	r2, [pc, #300]	@ (8004c3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d90f      	bls.n	8004b32 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00a      	beq.n	8004b32 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b28:	461a      	mov	r2, r3
 8004b2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b2e:	6093      	str	r3, [r2, #8]
 8004b30:	e07e      	b.n	8004c30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	4613      	mov	r3, r2
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	4413      	add	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	4413      	add	r3, r2
 8004b44:	3304      	adds	r3, #4
 8004b46:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a1a      	ldr	r2, [r3, #32]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	0159      	lsls	r1, r3, #5
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	440b      	add	r3, r1
 8004b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b5e:	1ad2      	subs	r2, r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d114      	bne.n	8004b94 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d109      	bne.n	8004b86 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	2101      	movs	r1, #1
 8004b80:	f003 fe1c 	bl	80087bc <USB_EP0_OutStart>
 8004b84:	e006      	b.n	8004b94 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	441a      	add	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	4619      	mov	r1, r3
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f007 f908 	bl	800bdb0 <HAL_PCD_DataOutStageCallback>
 8004ba0:	e046      	b.n	8004c30 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	4a26      	ldr	r2, [pc, #152]	@ (8004c40 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d124      	bne.n	8004bf4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00a      	beq.n	8004bca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bc6:	6093      	str	r3, [r2, #8]
 8004bc8:	e032      	b.n	8004c30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f003 0320 	and.w	r3, r3, #32
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d008      	beq.n	8004be6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004be0:	461a      	mov	r2, r3
 8004be2:	2320      	movs	r3, #32
 8004be4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	4619      	mov	r1, r3
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f007 f8df 	bl	800bdb0 <HAL_PCD_DataOutStageCallback>
 8004bf2:	e01d      	b.n	8004c30 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d114      	bne.n	8004c24 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004bfa:	6879      	ldr	r1, [r7, #4]
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	4413      	add	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	440b      	add	r3, r1
 8004c08:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d108      	bne.n	8004c24 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6818      	ldr	r0, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	2100      	movs	r1, #0
 8004c20:	f003 fdcc 	bl	80087bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	4619      	mov	r1, r3
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f007 f8c0 	bl	800bdb0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3720      	adds	r7, #32
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	4f54300a 	.word	0x4f54300a
 8004c40:	4f54310a 	.word	0x4f54310a

08004c44 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	333c      	adds	r3, #60	@ 0x3c
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4a15      	ldr	r2, [pc, #84]	@ (8004ccc <PCD_EP_OutSetupPacket_int+0x88>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d90e      	bls.n	8004c98 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d009      	beq.n	8004c98 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c90:	461a      	mov	r2, r3
 8004c92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c96:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f007 f877 	bl	800bd8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8004ccc <PCD_EP_OutSetupPacket_int+0x88>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d90c      	bls.n	8004cc0 <PCD_EP_OutSetupPacket_int+0x7c>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	799b      	ldrb	r3, [r3, #6]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d108      	bne.n	8004cc0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6818      	ldr	r0, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004cb8:	461a      	mov	r2, r3
 8004cba:	2101      	movs	r1, #1
 8004cbc:	f003 fd7e 	bl	80087bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	4f54300a 	.word	0x4f54300a

08004cd0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	70fb      	strb	r3, [r7, #3]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004ce8:	78fb      	ldrb	r3, [r7, #3]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d107      	bne.n	8004cfe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004cee:	883b      	ldrh	r3, [r7, #0]
 8004cf0:	0419      	lsls	r1, r3, #16
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cfc:	e028      	b.n	8004d50 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d04:	0c1b      	lsrs	r3, r3, #16
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	4413      	add	r3, r2
 8004d0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	73fb      	strb	r3, [r7, #15]
 8004d10:	e00d      	b.n	8004d2e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	7bfb      	ldrb	r3, [r7, #15]
 8004d18:	3340      	adds	r3, #64	@ 0x40
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	0c1b      	lsrs	r3, r3, #16
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	4413      	add	r3, r2
 8004d26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	73fb      	strb	r3, [r7, #15]
 8004d2e:	7bfa      	ldrb	r2, [r7, #15]
 8004d30:	78fb      	ldrb	r3, [r7, #3]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d3ec      	bcc.n	8004d12 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004d38:	883b      	ldrh	r3, [r7, #0]
 8004d3a:	0418      	lsls	r0, r3, #16
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6819      	ldr	r1, [r3, #0]
 8004d40:	78fb      	ldrb	r3, [r7, #3]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	4302      	orrs	r2, r0
 8004d48:	3340      	adds	r3, #64	@ 0x40
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b083      	sub	sp, #12
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	460b      	mov	r3, r1
 8004d68:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	887a      	ldrh	r2, [r7, #2]
 8004d70:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	460b      	mov	r3, r1
 8004d8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e267      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d075      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004db6:	4b88      	ldr	r3, [pc, #544]	@ (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 030c 	and.w	r3, r3, #12
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d00c      	beq.n	8004ddc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dc2:	4b85      	ldr	r3, [pc, #532]	@ (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004dca:	2b08      	cmp	r3, #8
 8004dcc:	d112      	bne.n	8004df4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dce:	4b82      	ldr	r3, [pc, #520]	@ (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dda:	d10b      	bne.n	8004df4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ddc:	4b7e      	ldr	r3, [pc, #504]	@ (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d05b      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x108>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d157      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e242      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dfc:	d106      	bne.n	8004e0c <HAL_RCC_OscConfig+0x74>
 8004dfe:	4b76      	ldr	r3, [pc, #472]	@ (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a75      	ldr	r2, [pc, #468]	@ (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e08:	6013      	str	r3, [r2, #0]
 8004e0a:	e01d      	b.n	8004e48 <HAL_RCC_OscConfig+0xb0>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e14:	d10c      	bne.n	8004e30 <HAL_RCC_OscConfig+0x98>
 8004e16:	4b70      	ldr	r3, [pc, #448]	@ (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a6f      	ldr	r2, [pc, #444]	@ (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e20:	6013      	str	r3, [r2, #0]
 8004e22:	4b6d      	ldr	r3, [pc, #436]	@ (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a6c      	ldr	r2, [pc, #432]	@ (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e2c:	6013      	str	r3, [r2, #0]
 8004e2e:	e00b      	b.n	8004e48 <HAL_RCC_OscConfig+0xb0>
 8004e30:	4b69      	ldr	r3, [pc, #420]	@ (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a68      	ldr	r2, [pc, #416]	@ (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e3a:	6013      	str	r3, [r2, #0]
 8004e3c:	4b66      	ldr	r3, [pc, #408]	@ (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a65      	ldr	r2, [pc, #404]	@ (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d013      	beq.n	8004e78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e50:	f7fc fd22 	bl	8001898 <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e58:	f7fc fd1e 	bl	8001898 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b64      	cmp	r3, #100	@ 0x64
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e207      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e6a:	4b5b      	ldr	r3, [pc, #364]	@ (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0f0      	beq.n	8004e58 <HAL_RCC_OscConfig+0xc0>
 8004e76:	e014      	b.n	8004ea2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e78:	f7fc fd0e 	bl	8001898 <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e80:	f7fc fd0a 	bl	8001898 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b64      	cmp	r3, #100	@ 0x64
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e1f3      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e92:	4b51      	ldr	r3, [pc, #324]	@ (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1f0      	bne.n	8004e80 <HAL_RCC_OscConfig+0xe8>
 8004e9e:	e000      	b.n	8004ea2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d063      	beq.n	8004f76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004eae:	4b4a      	ldr	r3, [pc, #296]	@ (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 030c 	and.w	r3, r3, #12
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00b      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eba:	4b47      	ldr	r3, [pc, #284]	@ (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d11c      	bne.n	8004f00 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ec6:	4b44      	ldr	r3, [pc, #272]	@ (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d116      	bne.n	8004f00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ed2:	4b41      	ldr	r3, [pc, #260]	@ (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d005      	beq.n	8004eea <HAL_RCC_OscConfig+0x152>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d001      	beq.n	8004eea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e1c7      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eea:	4b3b      	ldr	r3, [pc, #236]	@ (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	4937      	ldr	r1, [pc, #220]	@ (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004efe:	e03a      	b.n	8004f76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d020      	beq.n	8004f4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f08:	4b34      	ldr	r3, [pc, #208]	@ (8004fdc <HAL_RCC_OscConfig+0x244>)
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0e:	f7fc fcc3 	bl	8001898 <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f16:	f7fc fcbf 	bl	8001898 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e1a8      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f28:	4b2b      	ldr	r3, [pc, #172]	@ (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0f0      	beq.n	8004f16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f34:	4b28      	ldr	r3, [pc, #160]	@ (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	00db      	lsls	r3, r3, #3
 8004f42:	4925      	ldr	r1, [pc, #148]	@ (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	600b      	str	r3, [r1, #0]
 8004f48:	e015      	b.n	8004f76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f4a:	4b24      	ldr	r3, [pc, #144]	@ (8004fdc <HAL_RCC_OscConfig+0x244>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f50:	f7fc fca2 	bl	8001898 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f58:	f7fc fc9e 	bl	8001898 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e187      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f0      	bne.n	8004f58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d036      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d016      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f8a:	4b15      	ldr	r3, [pc, #84]	@ (8004fe0 <HAL_RCC_OscConfig+0x248>)
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f90:	f7fc fc82 	bl	8001898 <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f96:	e008      	b.n	8004faa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f98:	f7fc fc7e 	bl	8001898 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e167      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004faa:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd8 <HAL_RCC_OscConfig+0x240>)
 8004fac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0f0      	beq.n	8004f98 <HAL_RCC_OscConfig+0x200>
 8004fb6:	e01b      	b.n	8004ff0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fb8:	4b09      	ldr	r3, [pc, #36]	@ (8004fe0 <HAL_RCC_OscConfig+0x248>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fbe:	f7fc fc6b 	bl	8001898 <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fc4:	e00e      	b.n	8004fe4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fc6:	f7fc fc67 	bl	8001898 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d907      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e150      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	42470000 	.word	0x42470000
 8004fe0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fe4:	4b88      	ldr	r3, [pc, #544]	@ (8005208 <HAL_RCC_OscConfig+0x470>)
 8004fe6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1ea      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 8097 	beq.w	800512c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ffe:	2300      	movs	r3, #0
 8005000:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005002:	4b81      	ldr	r3, [pc, #516]	@ (8005208 <HAL_RCC_OscConfig+0x470>)
 8005004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10f      	bne.n	800502e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800500e:	2300      	movs	r3, #0
 8005010:	60bb      	str	r3, [r7, #8]
 8005012:	4b7d      	ldr	r3, [pc, #500]	@ (8005208 <HAL_RCC_OscConfig+0x470>)
 8005014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005016:	4a7c      	ldr	r2, [pc, #496]	@ (8005208 <HAL_RCC_OscConfig+0x470>)
 8005018:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800501c:	6413      	str	r3, [r2, #64]	@ 0x40
 800501e:	4b7a      	ldr	r3, [pc, #488]	@ (8005208 <HAL_RCC_OscConfig+0x470>)
 8005020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005026:	60bb      	str	r3, [r7, #8]
 8005028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800502a:	2301      	movs	r3, #1
 800502c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800502e:	4b77      	ldr	r3, [pc, #476]	@ (800520c <HAL_RCC_OscConfig+0x474>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005036:	2b00      	cmp	r3, #0
 8005038:	d118      	bne.n	800506c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800503a:	4b74      	ldr	r3, [pc, #464]	@ (800520c <HAL_RCC_OscConfig+0x474>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a73      	ldr	r2, [pc, #460]	@ (800520c <HAL_RCC_OscConfig+0x474>)
 8005040:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005046:	f7fc fc27 	bl	8001898 <HAL_GetTick>
 800504a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800504c:	e008      	b.n	8005060 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800504e:	f7fc fc23 	bl	8001898 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d901      	bls.n	8005060 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e10c      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005060:	4b6a      	ldr	r3, [pc, #424]	@ (800520c <HAL_RCC_OscConfig+0x474>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0f0      	beq.n	800504e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d106      	bne.n	8005082 <HAL_RCC_OscConfig+0x2ea>
 8005074:	4b64      	ldr	r3, [pc, #400]	@ (8005208 <HAL_RCC_OscConfig+0x470>)
 8005076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005078:	4a63      	ldr	r2, [pc, #396]	@ (8005208 <HAL_RCC_OscConfig+0x470>)
 800507a:	f043 0301 	orr.w	r3, r3, #1
 800507e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005080:	e01c      	b.n	80050bc <HAL_RCC_OscConfig+0x324>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	2b05      	cmp	r3, #5
 8005088:	d10c      	bne.n	80050a4 <HAL_RCC_OscConfig+0x30c>
 800508a:	4b5f      	ldr	r3, [pc, #380]	@ (8005208 <HAL_RCC_OscConfig+0x470>)
 800508c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800508e:	4a5e      	ldr	r2, [pc, #376]	@ (8005208 <HAL_RCC_OscConfig+0x470>)
 8005090:	f043 0304 	orr.w	r3, r3, #4
 8005094:	6713      	str	r3, [r2, #112]	@ 0x70
 8005096:	4b5c      	ldr	r3, [pc, #368]	@ (8005208 <HAL_RCC_OscConfig+0x470>)
 8005098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800509a:	4a5b      	ldr	r2, [pc, #364]	@ (8005208 <HAL_RCC_OscConfig+0x470>)
 800509c:	f043 0301 	orr.w	r3, r3, #1
 80050a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80050a2:	e00b      	b.n	80050bc <HAL_RCC_OscConfig+0x324>
 80050a4:	4b58      	ldr	r3, [pc, #352]	@ (8005208 <HAL_RCC_OscConfig+0x470>)
 80050a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050a8:	4a57      	ldr	r2, [pc, #348]	@ (8005208 <HAL_RCC_OscConfig+0x470>)
 80050aa:	f023 0301 	bic.w	r3, r3, #1
 80050ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80050b0:	4b55      	ldr	r3, [pc, #340]	@ (8005208 <HAL_RCC_OscConfig+0x470>)
 80050b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b4:	4a54      	ldr	r2, [pc, #336]	@ (8005208 <HAL_RCC_OscConfig+0x470>)
 80050b6:	f023 0304 	bic.w	r3, r3, #4
 80050ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d015      	beq.n	80050f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c4:	f7fc fbe8 	bl	8001898 <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ca:	e00a      	b.n	80050e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050cc:	f7fc fbe4 	bl	8001898 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050da:	4293      	cmp	r3, r2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e0cb      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050e2:	4b49      	ldr	r3, [pc, #292]	@ (8005208 <HAL_RCC_OscConfig+0x470>)
 80050e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0ee      	beq.n	80050cc <HAL_RCC_OscConfig+0x334>
 80050ee:	e014      	b.n	800511a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050f0:	f7fc fbd2 	bl	8001898 <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050f6:	e00a      	b.n	800510e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f8:	f7fc fbce 	bl	8001898 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005106:	4293      	cmp	r3, r2
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e0b5      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800510e:	4b3e      	ldr	r3, [pc, #248]	@ (8005208 <HAL_RCC_OscConfig+0x470>)
 8005110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1ee      	bne.n	80050f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800511a:	7dfb      	ldrb	r3, [r7, #23]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d105      	bne.n	800512c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005120:	4b39      	ldr	r3, [pc, #228]	@ (8005208 <HAL_RCC_OscConfig+0x470>)
 8005122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005124:	4a38      	ldr	r2, [pc, #224]	@ (8005208 <HAL_RCC_OscConfig+0x470>)
 8005126:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800512a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 80a1 	beq.w	8005278 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005136:	4b34      	ldr	r3, [pc, #208]	@ (8005208 <HAL_RCC_OscConfig+0x470>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 030c 	and.w	r3, r3, #12
 800513e:	2b08      	cmp	r3, #8
 8005140:	d05c      	beq.n	80051fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	2b02      	cmp	r3, #2
 8005148:	d141      	bne.n	80051ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800514a:	4b31      	ldr	r3, [pc, #196]	@ (8005210 <HAL_RCC_OscConfig+0x478>)
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005150:	f7fc fba2 	bl	8001898 <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005158:	f7fc fb9e 	bl	8001898 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e087      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800516a:	4b27      	ldr	r3, [pc, #156]	@ (8005208 <HAL_RCC_OscConfig+0x470>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1f0      	bne.n	8005158 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69da      	ldr	r2, [r3, #28]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005184:	019b      	lsls	r3, r3, #6
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800518c:	085b      	lsrs	r3, r3, #1
 800518e:	3b01      	subs	r3, #1
 8005190:	041b      	lsls	r3, r3, #16
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005198:	061b      	lsls	r3, r3, #24
 800519a:	491b      	ldr	r1, [pc, #108]	@ (8005208 <HAL_RCC_OscConfig+0x470>)
 800519c:	4313      	orrs	r3, r2
 800519e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005210 <HAL_RCC_OscConfig+0x478>)
 80051a2:	2201      	movs	r2, #1
 80051a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a6:	f7fc fb77 	bl	8001898 <HAL_GetTick>
 80051aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ac:	e008      	b.n	80051c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ae:	f7fc fb73 	bl	8001898 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e05c      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051c0:	4b11      	ldr	r3, [pc, #68]	@ (8005208 <HAL_RCC_OscConfig+0x470>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d0f0      	beq.n	80051ae <HAL_RCC_OscConfig+0x416>
 80051cc:	e054      	b.n	8005278 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ce:	4b10      	ldr	r3, [pc, #64]	@ (8005210 <HAL_RCC_OscConfig+0x478>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d4:	f7fc fb60 	bl	8001898 <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051dc:	f7fc fb5c 	bl	8001898 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e045      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ee:	4b06      	ldr	r3, [pc, #24]	@ (8005208 <HAL_RCC_OscConfig+0x470>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1f0      	bne.n	80051dc <HAL_RCC_OscConfig+0x444>
 80051fa:	e03d      	b.n	8005278 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d107      	bne.n	8005214 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e038      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
 8005208:	40023800 	.word	0x40023800
 800520c:	40007000 	.word	0x40007000
 8005210:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005214:	4b1b      	ldr	r3, [pc, #108]	@ (8005284 <HAL_RCC_OscConfig+0x4ec>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d028      	beq.n	8005274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800522c:	429a      	cmp	r2, r3
 800522e:	d121      	bne.n	8005274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800523a:	429a      	cmp	r2, r3
 800523c:	d11a      	bne.n	8005274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005244:	4013      	ands	r3, r2
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800524a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800524c:	4293      	cmp	r3, r2
 800524e:	d111      	bne.n	8005274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525a:	085b      	lsrs	r3, r3, #1
 800525c:	3b01      	subs	r3, #1
 800525e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005260:	429a      	cmp	r2, r3
 8005262:	d107      	bne.n	8005274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005270:	429a      	cmp	r2, r3
 8005272:	d001      	beq.n	8005278 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e000      	b.n	800527a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	40023800 	.word	0x40023800

08005288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e0cc      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800529c:	4b68      	ldr	r3, [pc, #416]	@ (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d90c      	bls.n	80052c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052aa:	4b65      	ldr	r3, [pc, #404]	@ (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b2:	4b63      	ldr	r3, [pc, #396]	@ (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d001      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e0b8      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d020      	beq.n	8005312 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d005      	beq.n	80052e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052dc:	4b59      	ldr	r3, [pc, #356]	@ (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	4a58      	ldr	r2, [pc, #352]	@ (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80052e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80052e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0308 	and.w	r3, r3, #8
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d005      	beq.n	8005300 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052f4:	4b53      	ldr	r3, [pc, #332]	@ (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	4a52      	ldr	r2, [pc, #328]	@ (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80052fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80052fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005300:	4b50      	ldr	r3, [pc, #320]	@ (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	494d      	ldr	r1, [pc, #308]	@ (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 800530e:	4313      	orrs	r3, r2
 8005310:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	d044      	beq.n	80053a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d107      	bne.n	8005336 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005326:	4b47      	ldr	r3, [pc, #284]	@ (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d119      	bne.n	8005366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e07f      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	2b02      	cmp	r3, #2
 800533c:	d003      	beq.n	8005346 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005342:	2b03      	cmp	r3, #3
 8005344:	d107      	bne.n	8005356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005346:	4b3f      	ldr	r3, [pc, #252]	@ (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d109      	bne.n	8005366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e06f      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005356:	4b3b      	ldr	r3, [pc, #236]	@ (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e067      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005366:	4b37      	ldr	r3, [pc, #220]	@ (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f023 0203 	bic.w	r2, r3, #3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	4934      	ldr	r1, [pc, #208]	@ (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005374:	4313      	orrs	r3, r2
 8005376:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005378:	f7fc fa8e 	bl	8001898 <HAL_GetTick>
 800537c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800537e:	e00a      	b.n	8005396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005380:	f7fc fa8a 	bl	8001898 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800538e:	4293      	cmp	r3, r2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e04f      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005396:	4b2b      	ldr	r3, [pc, #172]	@ (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 020c 	and.w	r2, r3, #12
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d1eb      	bne.n	8005380 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053a8:	4b25      	ldr	r3, [pc, #148]	@ (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d20c      	bcs.n	80053d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053b6:	4b22      	ldr	r3, [pc, #136]	@ (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053be:	4b20      	ldr	r3, [pc, #128]	@ (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d001      	beq.n	80053d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e032      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d008      	beq.n	80053ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053dc:	4b19      	ldr	r3, [pc, #100]	@ (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	4916      	ldr	r1, [pc, #88]	@ (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0308 	and.w	r3, r3, #8
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d009      	beq.n	800540e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053fa:	4b12      	ldr	r3, [pc, #72]	@ (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	490e      	ldr	r1, [pc, #56]	@ (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 800540a:	4313      	orrs	r3, r2
 800540c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800540e:	f000 f821 	bl	8005454 <HAL_RCC_GetSysClockFreq>
 8005412:	4602      	mov	r2, r0
 8005414:	4b0b      	ldr	r3, [pc, #44]	@ (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	091b      	lsrs	r3, r3, #4
 800541a:	f003 030f 	and.w	r3, r3, #15
 800541e:	490a      	ldr	r1, [pc, #40]	@ (8005448 <HAL_RCC_ClockConfig+0x1c0>)
 8005420:	5ccb      	ldrb	r3, [r1, r3]
 8005422:	fa22 f303 	lsr.w	r3, r2, r3
 8005426:	4a09      	ldr	r2, [pc, #36]	@ (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800542a:	4b09      	ldr	r3, [pc, #36]	@ (8005450 <HAL_RCC_ClockConfig+0x1c8>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f7fc f9ee 	bl	8001810 <HAL_InitTick>

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	40023c00 	.word	0x40023c00
 8005444:	40023800 	.word	0x40023800
 8005448:	0800ccdc 	.word	0x0800ccdc
 800544c:	2000000c 	.word	0x2000000c
 8005450:	20000010 	.word	0x20000010

08005454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005458:	b094      	sub	sp, #80	@ 0x50
 800545a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800545c:	2300      	movs	r3, #0
 800545e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800546c:	4b79      	ldr	r3, [pc, #484]	@ (8005654 <HAL_RCC_GetSysClockFreq+0x200>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f003 030c 	and.w	r3, r3, #12
 8005474:	2b08      	cmp	r3, #8
 8005476:	d00d      	beq.n	8005494 <HAL_RCC_GetSysClockFreq+0x40>
 8005478:	2b08      	cmp	r3, #8
 800547a:	f200 80e1 	bhi.w	8005640 <HAL_RCC_GetSysClockFreq+0x1ec>
 800547e:	2b00      	cmp	r3, #0
 8005480:	d002      	beq.n	8005488 <HAL_RCC_GetSysClockFreq+0x34>
 8005482:	2b04      	cmp	r3, #4
 8005484:	d003      	beq.n	800548e <HAL_RCC_GetSysClockFreq+0x3a>
 8005486:	e0db      	b.n	8005640 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005488:	4b73      	ldr	r3, [pc, #460]	@ (8005658 <HAL_RCC_GetSysClockFreq+0x204>)
 800548a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800548c:	e0db      	b.n	8005646 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800548e:	4b73      	ldr	r3, [pc, #460]	@ (800565c <HAL_RCC_GetSysClockFreq+0x208>)
 8005490:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005492:	e0d8      	b.n	8005646 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005494:	4b6f      	ldr	r3, [pc, #444]	@ (8005654 <HAL_RCC_GetSysClockFreq+0x200>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800549c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800549e:	4b6d      	ldr	r3, [pc, #436]	@ (8005654 <HAL_RCC_GetSysClockFreq+0x200>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d063      	beq.n	8005572 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054aa:	4b6a      	ldr	r3, [pc, #424]	@ (8005654 <HAL_RCC_GetSysClockFreq+0x200>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	099b      	lsrs	r3, r3, #6
 80054b0:	2200      	movs	r2, #0
 80054b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80054b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80054be:	2300      	movs	r3, #0
 80054c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80054c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80054c6:	4622      	mov	r2, r4
 80054c8:	462b      	mov	r3, r5
 80054ca:	f04f 0000 	mov.w	r0, #0
 80054ce:	f04f 0100 	mov.w	r1, #0
 80054d2:	0159      	lsls	r1, r3, #5
 80054d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054d8:	0150      	lsls	r0, r2, #5
 80054da:	4602      	mov	r2, r0
 80054dc:	460b      	mov	r3, r1
 80054de:	4621      	mov	r1, r4
 80054e0:	1a51      	subs	r1, r2, r1
 80054e2:	6139      	str	r1, [r7, #16]
 80054e4:	4629      	mov	r1, r5
 80054e6:	eb63 0301 	sbc.w	r3, r3, r1
 80054ea:	617b      	str	r3, [r7, #20]
 80054ec:	f04f 0200 	mov.w	r2, #0
 80054f0:	f04f 0300 	mov.w	r3, #0
 80054f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054f8:	4659      	mov	r1, fp
 80054fa:	018b      	lsls	r3, r1, #6
 80054fc:	4651      	mov	r1, sl
 80054fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005502:	4651      	mov	r1, sl
 8005504:	018a      	lsls	r2, r1, #6
 8005506:	4651      	mov	r1, sl
 8005508:	ebb2 0801 	subs.w	r8, r2, r1
 800550c:	4659      	mov	r1, fp
 800550e:	eb63 0901 	sbc.w	r9, r3, r1
 8005512:	f04f 0200 	mov.w	r2, #0
 8005516:	f04f 0300 	mov.w	r3, #0
 800551a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800551e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005522:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005526:	4690      	mov	r8, r2
 8005528:	4699      	mov	r9, r3
 800552a:	4623      	mov	r3, r4
 800552c:	eb18 0303 	adds.w	r3, r8, r3
 8005530:	60bb      	str	r3, [r7, #8]
 8005532:	462b      	mov	r3, r5
 8005534:	eb49 0303 	adc.w	r3, r9, r3
 8005538:	60fb      	str	r3, [r7, #12]
 800553a:	f04f 0200 	mov.w	r2, #0
 800553e:	f04f 0300 	mov.w	r3, #0
 8005542:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005546:	4629      	mov	r1, r5
 8005548:	024b      	lsls	r3, r1, #9
 800554a:	4621      	mov	r1, r4
 800554c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005550:	4621      	mov	r1, r4
 8005552:	024a      	lsls	r2, r1, #9
 8005554:	4610      	mov	r0, r2
 8005556:	4619      	mov	r1, r3
 8005558:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800555a:	2200      	movs	r2, #0
 800555c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800555e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005560:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005564:	f7fa fe84 	bl	8000270 <__aeabi_uldivmod>
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	4613      	mov	r3, r2
 800556e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005570:	e058      	b.n	8005624 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005572:	4b38      	ldr	r3, [pc, #224]	@ (8005654 <HAL_RCC_GetSysClockFreq+0x200>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	099b      	lsrs	r3, r3, #6
 8005578:	2200      	movs	r2, #0
 800557a:	4618      	mov	r0, r3
 800557c:	4611      	mov	r1, r2
 800557e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005582:	623b      	str	r3, [r7, #32]
 8005584:	2300      	movs	r3, #0
 8005586:	627b      	str	r3, [r7, #36]	@ 0x24
 8005588:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800558c:	4642      	mov	r2, r8
 800558e:	464b      	mov	r3, r9
 8005590:	f04f 0000 	mov.w	r0, #0
 8005594:	f04f 0100 	mov.w	r1, #0
 8005598:	0159      	lsls	r1, r3, #5
 800559a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800559e:	0150      	lsls	r0, r2, #5
 80055a0:	4602      	mov	r2, r0
 80055a2:	460b      	mov	r3, r1
 80055a4:	4641      	mov	r1, r8
 80055a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80055aa:	4649      	mov	r1, r9
 80055ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80055b0:	f04f 0200 	mov.w	r2, #0
 80055b4:	f04f 0300 	mov.w	r3, #0
 80055b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80055c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80055c4:	ebb2 040a 	subs.w	r4, r2, sl
 80055c8:	eb63 050b 	sbc.w	r5, r3, fp
 80055cc:	f04f 0200 	mov.w	r2, #0
 80055d0:	f04f 0300 	mov.w	r3, #0
 80055d4:	00eb      	lsls	r3, r5, #3
 80055d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055da:	00e2      	lsls	r2, r4, #3
 80055dc:	4614      	mov	r4, r2
 80055de:	461d      	mov	r5, r3
 80055e0:	4643      	mov	r3, r8
 80055e2:	18e3      	adds	r3, r4, r3
 80055e4:	603b      	str	r3, [r7, #0]
 80055e6:	464b      	mov	r3, r9
 80055e8:	eb45 0303 	adc.w	r3, r5, r3
 80055ec:	607b      	str	r3, [r7, #4]
 80055ee:	f04f 0200 	mov.w	r2, #0
 80055f2:	f04f 0300 	mov.w	r3, #0
 80055f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055fa:	4629      	mov	r1, r5
 80055fc:	028b      	lsls	r3, r1, #10
 80055fe:	4621      	mov	r1, r4
 8005600:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005604:	4621      	mov	r1, r4
 8005606:	028a      	lsls	r2, r1, #10
 8005608:	4610      	mov	r0, r2
 800560a:	4619      	mov	r1, r3
 800560c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800560e:	2200      	movs	r2, #0
 8005610:	61bb      	str	r3, [r7, #24]
 8005612:	61fa      	str	r2, [r7, #28]
 8005614:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005618:	f7fa fe2a 	bl	8000270 <__aeabi_uldivmod>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	4613      	mov	r3, r2
 8005622:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005624:	4b0b      	ldr	r3, [pc, #44]	@ (8005654 <HAL_RCC_GetSysClockFreq+0x200>)
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	0c1b      	lsrs	r3, r3, #16
 800562a:	f003 0303 	and.w	r3, r3, #3
 800562e:	3301      	adds	r3, #1
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005634:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005636:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005638:	fbb2 f3f3 	udiv	r3, r2, r3
 800563c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800563e:	e002      	b.n	8005646 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005640:	4b05      	ldr	r3, [pc, #20]	@ (8005658 <HAL_RCC_GetSysClockFreq+0x204>)
 8005642:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005644:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005646:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005648:	4618      	mov	r0, r3
 800564a:	3750      	adds	r7, #80	@ 0x50
 800564c:	46bd      	mov	sp, r7
 800564e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005652:	bf00      	nop
 8005654:	40023800 	.word	0x40023800
 8005658:	00f42400 	.word	0x00f42400
 800565c:	007a1200 	.word	0x007a1200

08005660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005664:	4b03      	ldr	r3, [pc, #12]	@ (8005674 <HAL_RCC_GetHCLKFreq+0x14>)
 8005666:	681b      	ldr	r3, [r3, #0]
}
 8005668:	4618      	mov	r0, r3
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	2000000c 	.word	0x2000000c

08005678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800567c:	f7ff fff0 	bl	8005660 <HAL_RCC_GetHCLKFreq>
 8005680:	4602      	mov	r2, r0
 8005682:	4b05      	ldr	r3, [pc, #20]	@ (8005698 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	0a9b      	lsrs	r3, r3, #10
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	4903      	ldr	r1, [pc, #12]	@ (800569c <HAL_RCC_GetPCLK1Freq+0x24>)
 800568e:	5ccb      	ldrb	r3, [r1, r3]
 8005690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005694:	4618      	mov	r0, r3
 8005696:	bd80      	pop	{r7, pc}
 8005698:	40023800 	.word	0x40023800
 800569c:	0800ccec 	.word	0x0800ccec

080056a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80056a4:	f7ff ffdc 	bl	8005660 <HAL_RCC_GetHCLKFreq>
 80056a8:	4602      	mov	r2, r0
 80056aa:	4b05      	ldr	r3, [pc, #20]	@ (80056c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	0b5b      	lsrs	r3, r3, #13
 80056b0:	f003 0307 	and.w	r3, r3, #7
 80056b4:	4903      	ldr	r1, [pc, #12]	@ (80056c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056b6:	5ccb      	ldrb	r3, [r1, r3]
 80056b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056bc:	4618      	mov	r0, r3
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	40023800 	.word	0x40023800
 80056c4:	0800ccec 	.word	0x0800ccec

080056c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e041      	b.n	800575e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d106      	bne.n	80056f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7fb fe14 	bl	800131c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3304      	adds	r3, #4
 8005704:	4619      	mov	r1, r3
 8005706:	4610      	mov	r0, r2
 8005708:	f000 fb3c 	bl	8005d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
	...

08005768 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b01      	cmp	r3, #1
 800577a:	d001      	beq.n	8005780 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e046      	b.n	800580e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a23      	ldr	r2, [pc, #140]	@ (800581c <HAL_TIM_Base_Start+0xb4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d022      	beq.n	80057d8 <HAL_TIM_Base_Start+0x70>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800579a:	d01d      	beq.n	80057d8 <HAL_TIM_Base_Start+0x70>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005820 <HAL_TIM_Base_Start+0xb8>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d018      	beq.n	80057d8 <HAL_TIM_Base_Start+0x70>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005824 <HAL_TIM_Base_Start+0xbc>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d013      	beq.n	80057d8 <HAL_TIM_Base_Start+0x70>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005828 <HAL_TIM_Base_Start+0xc0>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00e      	beq.n	80057d8 <HAL_TIM_Base_Start+0x70>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a1b      	ldr	r2, [pc, #108]	@ (800582c <HAL_TIM_Base_Start+0xc4>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d009      	beq.n	80057d8 <HAL_TIM_Base_Start+0x70>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a19      	ldr	r2, [pc, #100]	@ (8005830 <HAL_TIM_Base_Start+0xc8>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d004      	beq.n	80057d8 <HAL_TIM_Base_Start+0x70>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a18      	ldr	r2, [pc, #96]	@ (8005834 <HAL_TIM_Base_Start+0xcc>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d111      	bne.n	80057fc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2b06      	cmp	r3, #6
 80057e8:	d010      	beq.n	800580c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f042 0201 	orr.w	r2, r2, #1
 80057f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057fa:	e007      	b.n	800580c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0201 	orr.w	r2, r2, #1
 800580a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	40010000 	.word	0x40010000
 8005820:	40000400 	.word	0x40000400
 8005824:	40000800 	.word	0x40000800
 8005828:	40000c00 	.word	0x40000c00
 800582c:	40010400 	.word	0x40010400
 8005830:	40014000 	.word	0x40014000
 8005834:	40001800 	.word	0x40001800

08005838 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6a1a      	ldr	r2, [r3, #32]
 8005846:	f241 1311 	movw	r3, #4369	@ 0x1111
 800584a:	4013      	ands	r3, r2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10f      	bne.n	8005870 <HAL_TIM_Base_Stop+0x38>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6a1a      	ldr	r2, [r3, #32]
 8005856:	f240 4344 	movw	r3, #1092	@ 0x444
 800585a:	4013      	ands	r3, r2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d107      	bne.n	8005870 <HAL_TIM_Base_Stop+0x38>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 0201 	bic.w	r2, r2, #1
 800586e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
	...

08005888 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b01      	cmp	r3, #1
 800589a:	d001      	beq.n	80058a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e04e      	b.n	800593e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68da      	ldr	r2, [r3, #12]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0201 	orr.w	r2, r2, #1
 80058b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a23      	ldr	r2, [pc, #140]	@ (800594c <HAL_TIM_Base_Start_IT+0xc4>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d022      	beq.n	8005908 <HAL_TIM_Base_Start_IT+0x80>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ca:	d01d      	beq.n	8005908 <HAL_TIM_Base_Start_IT+0x80>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a1f      	ldr	r2, [pc, #124]	@ (8005950 <HAL_TIM_Base_Start_IT+0xc8>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d018      	beq.n	8005908 <HAL_TIM_Base_Start_IT+0x80>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a1e      	ldr	r2, [pc, #120]	@ (8005954 <HAL_TIM_Base_Start_IT+0xcc>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d013      	beq.n	8005908 <HAL_TIM_Base_Start_IT+0x80>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005958 <HAL_TIM_Base_Start_IT+0xd0>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d00e      	beq.n	8005908 <HAL_TIM_Base_Start_IT+0x80>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a1b      	ldr	r2, [pc, #108]	@ (800595c <HAL_TIM_Base_Start_IT+0xd4>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d009      	beq.n	8005908 <HAL_TIM_Base_Start_IT+0x80>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a19      	ldr	r2, [pc, #100]	@ (8005960 <HAL_TIM_Base_Start_IT+0xd8>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d004      	beq.n	8005908 <HAL_TIM_Base_Start_IT+0x80>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a18      	ldr	r2, [pc, #96]	@ (8005964 <HAL_TIM_Base_Start_IT+0xdc>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d111      	bne.n	800592c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 0307 	and.w	r3, r3, #7
 8005912:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2b06      	cmp	r3, #6
 8005918:	d010      	beq.n	800593c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f042 0201 	orr.w	r2, r2, #1
 8005928:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800592a:	e007      	b.n	800593c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 0201 	orr.w	r2, r2, #1
 800593a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	40010000 	.word	0x40010000
 8005950:	40000400 	.word	0x40000400
 8005954:	40000800 	.word	0x40000800
 8005958:	40000c00 	.word	0x40000c00
 800595c:	40010400 	.word	0x40010400
 8005960:	40014000 	.word	0x40014000
 8005964:	40001800 	.word	0x40001800

08005968 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0201 	bic.w	r2, r2, #1
 800597e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6a1a      	ldr	r2, [r3, #32]
 8005986:	f241 1311 	movw	r3, #4369	@ 0x1111
 800598a:	4013      	ands	r3, r2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10f      	bne.n	80059b0 <HAL_TIM_Base_Stop_IT+0x48>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6a1a      	ldr	r2, [r3, #32]
 8005996:	f240 4344 	movw	r3, #1092	@ 0x444
 800599a:	4013      	ands	r3, r2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d107      	bne.n	80059b0 <HAL_TIM_Base_Stop_IT+0x48>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 0201 	bic.w	r2, r2, #1
 80059ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b084      	sub	sp, #16
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d020      	beq.n	8005a2a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d01b      	beq.n	8005a2a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f06f 0202 	mvn.w	r2, #2
 80059fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	f003 0303 	and.w	r3, r3, #3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f999 	bl	8005d48 <HAL_TIM_IC_CaptureCallback>
 8005a16:	e005      	b.n	8005a24 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f98b 	bl	8005d34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f99c 	bl	8005d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d020      	beq.n	8005a76 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f003 0304 	and.w	r3, r3, #4
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d01b      	beq.n	8005a76 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f06f 0204 	mvn.w	r2, #4
 8005a46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f973 	bl	8005d48 <HAL_TIM_IC_CaptureCallback>
 8005a62:	e005      	b.n	8005a70 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f965 	bl	8005d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f976 	bl	8005d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	f003 0308 	and.w	r3, r3, #8
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d020      	beq.n	8005ac2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f003 0308 	and.w	r3, r3, #8
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d01b      	beq.n	8005ac2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f06f 0208 	mvn.w	r2, #8
 8005a92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2204      	movs	r2, #4
 8005a98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	f003 0303 	and.w	r3, r3, #3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 f94d 	bl	8005d48 <HAL_TIM_IC_CaptureCallback>
 8005aae:	e005      	b.n	8005abc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 f93f 	bl	8005d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f950 	bl	8005d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	f003 0310 	and.w	r3, r3, #16
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d020      	beq.n	8005b0e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f003 0310 	and.w	r3, r3, #16
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d01b      	beq.n	8005b0e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f06f 0210 	mvn.w	r2, #16
 8005ade:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2208      	movs	r2, #8
 8005ae4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69db      	ldr	r3, [r3, #28]
 8005aec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f927 	bl	8005d48 <HAL_TIM_IC_CaptureCallback>
 8005afa:	e005      	b.n	8005b08 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f919 	bl	8005d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f92a 	bl	8005d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00c      	beq.n	8005b32 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d007      	beq.n	8005b32 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f06f 0201 	mvn.w	r2, #1
 8005b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f003 faa5 	bl	800907c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00c      	beq.n	8005b56 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d007      	beq.n	8005b56 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fadd 	bl	8006110 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00c      	beq.n	8005b7a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d007      	beq.n	8005b7a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f8fb 	bl	8005d70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	f003 0320 	and.w	r3, r3, #32
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00c      	beq.n	8005b9e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f003 0320 	and.w	r3, r3, #32
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d007      	beq.n	8005b9e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f06f 0220 	mvn.w	r2, #32
 8005b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 faaf 	bl	80060fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b9e:	bf00      	nop
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b084      	sub	sp, #16
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
 8005bae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d101      	bne.n	8005bc2 <HAL_TIM_ConfigClockSource+0x1c>
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	e0b4      	b.n	8005d2c <HAL_TIM_ConfigClockSource+0x186>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2202      	movs	r2, #2
 8005bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005be0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005be8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bfa:	d03e      	beq.n	8005c7a <HAL_TIM_ConfigClockSource+0xd4>
 8005bfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c00:	f200 8087 	bhi.w	8005d12 <HAL_TIM_ConfigClockSource+0x16c>
 8005c04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c08:	f000 8086 	beq.w	8005d18 <HAL_TIM_ConfigClockSource+0x172>
 8005c0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c10:	d87f      	bhi.n	8005d12 <HAL_TIM_ConfigClockSource+0x16c>
 8005c12:	2b70      	cmp	r3, #112	@ 0x70
 8005c14:	d01a      	beq.n	8005c4c <HAL_TIM_ConfigClockSource+0xa6>
 8005c16:	2b70      	cmp	r3, #112	@ 0x70
 8005c18:	d87b      	bhi.n	8005d12 <HAL_TIM_ConfigClockSource+0x16c>
 8005c1a:	2b60      	cmp	r3, #96	@ 0x60
 8005c1c:	d050      	beq.n	8005cc0 <HAL_TIM_ConfigClockSource+0x11a>
 8005c1e:	2b60      	cmp	r3, #96	@ 0x60
 8005c20:	d877      	bhi.n	8005d12 <HAL_TIM_ConfigClockSource+0x16c>
 8005c22:	2b50      	cmp	r3, #80	@ 0x50
 8005c24:	d03c      	beq.n	8005ca0 <HAL_TIM_ConfigClockSource+0xfa>
 8005c26:	2b50      	cmp	r3, #80	@ 0x50
 8005c28:	d873      	bhi.n	8005d12 <HAL_TIM_ConfigClockSource+0x16c>
 8005c2a:	2b40      	cmp	r3, #64	@ 0x40
 8005c2c:	d058      	beq.n	8005ce0 <HAL_TIM_ConfigClockSource+0x13a>
 8005c2e:	2b40      	cmp	r3, #64	@ 0x40
 8005c30:	d86f      	bhi.n	8005d12 <HAL_TIM_ConfigClockSource+0x16c>
 8005c32:	2b30      	cmp	r3, #48	@ 0x30
 8005c34:	d064      	beq.n	8005d00 <HAL_TIM_ConfigClockSource+0x15a>
 8005c36:	2b30      	cmp	r3, #48	@ 0x30
 8005c38:	d86b      	bhi.n	8005d12 <HAL_TIM_ConfigClockSource+0x16c>
 8005c3a:	2b20      	cmp	r3, #32
 8005c3c:	d060      	beq.n	8005d00 <HAL_TIM_ConfigClockSource+0x15a>
 8005c3e:	2b20      	cmp	r3, #32
 8005c40:	d867      	bhi.n	8005d12 <HAL_TIM_ConfigClockSource+0x16c>
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d05c      	beq.n	8005d00 <HAL_TIM_ConfigClockSource+0x15a>
 8005c46:	2b10      	cmp	r3, #16
 8005c48:	d05a      	beq.n	8005d00 <HAL_TIM_ConfigClockSource+0x15a>
 8005c4a:	e062      	b.n	8005d12 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c5c:	f000 f9b2 	bl	8005fc4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005c6e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	609a      	str	r2, [r3, #8]
      break;
 8005c78:	e04f      	b.n	8005d1a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c8a:	f000 f99b 	bl	8005fc4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c9c:	609a      	str	r2, [r3, #8]
      break;
 8005c9e:	e03c      	b.n	8005d1a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cac:	461a      	mov	r2, r3
 8005cae:	f000 f90f 	bl	8005ed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2150      	movs	r1, #80	@ 0x50
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f000 f968 	bl	8005f8e <TIM_ITRx_SetConfig>
      break;
 8005cbe:	e02c      	b.n	8005d1a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ccc:	461a      	mov	r2, r3
 8005cce:	f000 f92e 	bl	8005f2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2160      	movs	r1, #96	@ 0x60
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 f958 	bl	8005f8e <TIM_ITRx_SetConfig>
      break;
 8005cde:	e01c      	b.n	8005d1a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cec:	461a      	mov	r2, r3
 8005cee:	f000 f8ef 	bl	8005ed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2140      	movs	r1, #64	@ 0x40
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 f948 	bl	8005f8e <TIM_ITRx_SetConfig>
      break;
 8005cfe:	e00c      	b.n	8005d1a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	f000 f93f 	bl	8005f8e <TIM_ITRx_SetConfig>
      break;
 8005d10:	e003      	b.n	8005d1a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	73fb      	strb	r3, [r7, #15]
      break;
 8005d16:	e000      	b.n	8005d1a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d18:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a43      	ldr	r2, [pc, #268]	@ (8005ea4 <TIM_Base_SetConfig+0x120>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d013      	beq.n	8005dc4 <TIM_Base_SetConfig+0x40>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005da2:	d00f      	beq.n	8005dc4 <TIM_Base_SetConfig+0x40>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a40      	ldr	r2, [pc, #256]	@ (8005ea8 <TIM_Base_SetConfig+0x124>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00b      	beq.n	8005dc4 <TIM_Base_SetConfig+0x40>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a3f      	ldr	r2, [pc, #252]	@ (8005eac <TIM_Base_SetConfig+0x128>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d007      	beq.n	8005dc4 <TIM_Base_SetConfig+0x40>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a3e      	ldr	r2, [pc, #248]	@ (8005eb0 <TIM_Base_SetConfig+0x12c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d003      	beq.n	8005dc4 <TIM_Base_SetConfig+0x40>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a3d      	ldr	r2, [pc, #244]	@ (8005eb4 <TIM_Base_SetConfig+0x130>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d108      	bne.n	8005dd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a32      	ldr	r2, [pc, #200]	@ (8005ea4 <TIM_Base_SetConfig+0x120>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d02b      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005de4:	d027      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a2f      	ldr	r2, [pc, #188]	@ (8005ea8 <TIM_Base_SetConfig+0x124>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d023      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a2e      	ldr	r2, [pc, #184]	@ (8005eac <TIM_Base_SetConfig+0x128>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d01f      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a2d      	ldr	r2, [pc, #180]	@ (8005eb0 <TIM_Base_SetConfig+0x12c>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d01b      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a2c      	ldr	r2, [pc, #176]	@ (8005eb4 <TIM_Base_SetConfig+0x130>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d017      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a2b      	ldr	r2, [pc, #172]	@ (8005eb8 <TIM_Base_SetConfig+0x134>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d013      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a2a      	ldr	r2, [pc, #168]	@ (8005ebc <TIM_Base_SetConfig+0x138>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d00f      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a29      	ldr	r2, [pc, #164]	@ (8005ec0 <TIM_Base_SetConfig+0x13c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d00b      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a28      	ldr	r2, [pc, #160]	@ (8005ec4 <TIM_Base_SetConfig+0x140>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d007      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a27      	ldr	r2, [pc, #156]	@ (8005ec8 <TIM_Base_SetConfig+0x144>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d003      	beq.n	8005e36 <TIM_Base_SetConfig+0xb2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a26      	ldr	r2, [pc, #152]	@ (8005ecc <TIM_Base_SetConfig+0x148>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d108      	bne.n	8005e48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	689a      	ldr	r2, [r3, #8]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a0e      	ldr	r2, [pc, #56]	@ (8005ea4 <TIM_Base_SetConfig+0x120>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d003      	beq.n	8005e76 <TIM_Base_SetConfig+0xf2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a10      	ldr	r2, [pc, #64]	@ (8005eb4 <TIM_Base_SetConfig+0x130>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d103      	bne.n	8005e7e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	691a      	ldr	r2, [r3, #16]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f043 0204 	orr.w	r2, r3, #4
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	601a      	str	r2, [r3, #0]
}
 8005e96:	bf00      	nop
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	40010000 	.word	0x40010000
 8005ea8:	40000400 	.word	0x40000400
 8005eac:	40000800 	.word	0x40000800
 8005eb0:	40000c00 	.word	0x40000c00
 8005eb4:	40010400 	.word	0x40010400
 8005eb8:	40014000 	.word	0x40014000
 8005ebc:	40014400 	.word	0x40014400
 8005ec0:	40014800 	.word	0x40014800
 8005ec4:	40001800 	.word	0x40001800
 8005ec8:	40001c00 	.word	0x40001c00
 8005ecc:	40002000 	.word	0x40002000

08005ed0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	f023 0201 	bic.w	r2, r3, #1
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005efa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	011b      	lsls	r3, r3, #4
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f023 030a 	bic.w	r3, r3, #10
 8005f0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	621a      	str	r2, [r3, #32]
}
 8005f22:	bf00      	nop
 8005f24:	371c      	adds	r7, #28
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b087      	sub	sp, #28
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	60f8      	str	r0, [r7, #12]
 8005f36:	60b9      	str	r1, [r7, #8]
 8005f38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6a1b      	ldr	r3, [r3, #32]
 8005f44:	f023 0210 	bic.w	r2, r3, #16
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	031b      	lsls	r3, r3, #12
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	621a      	str	r2, [r3, #32]
}
 8005f82:	bf00      	nop
 8005f84:	371c      	adds	r7, #28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b085      	sub	sp, #20
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	f043 0307 	orr.w	r3, r3, #7
 8005fb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	609a      	str	r2, [r3, #8]
}
 8005fb8:	bf00      	nop
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	021a      	lsls	r2, r3, #8
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	609a      	str	r2, [r3, #8]
}
 8005ff8:	bf00      	nop
 8005ffa:	371c      	adds	r7, #28
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006014:	2b01      	cmp	r3, #1
 8006016:	d101      	bne.n	800601c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006018:	2302      	movs	r3, #2
 800601a:	e05a      	b.n	80060d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006042:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a21      	ldr	r2, [pc, #132]	@ (80060e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d022      	beq.n	80060a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006068:	d01d      	beq.n	80060a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a1d      	ldr	r2, [pc, #116]	@ (80060e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d018      	beq.n	80060a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a1b      	ldr	r2, [pc, #108]	@ (80060e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d013      	beq.n	80060a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a1a      	ldr	r2, [pc, #104]	@ (80060ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d00e      	beq.n	80060a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a18      	ldr	r2, [pc, #96]	@ (80060f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d009      	beq.n	80060a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a17      	ldr	r2, [pc, #92]	@ (80060f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d004      	beq.n	80060a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a15      	ldr	r2, [pc, #84]	@ (80060f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d10c      	bne.n	80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	40010000 	.word	0x40010000
 80060e4:	40000400 	.word	0x40000400
 80060e8:	40000800 	.word	0x40000800
 80060ec:	40000c00 	.word	0x40000c00
 80060f0:	40010400 	.word	0x40010400
 80060f4:	40014000 	.word	0x40014000
 80060f8:	40001800 	.word	0x40001800

080060fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e042      	b.n	80061bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d106      	bne.n	8006150 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7fb f988 	bl	8001460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2224      	movs	r2, #36	@ 0x24
 8006154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006166:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fdfb 	bl	8006d64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	691a      	ldr	r2, [r3, #16]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800617c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	695a      	ldr	r2, [r3, #20]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800618c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68da      	ldr	r2, [r3, #12]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800619c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2220      	movs	r2, #32
 80061a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2220      	movs	r2, #32
 80061b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e024      	b.n	8006220 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2224      	movs	r2, #36	@ 0x24
 80061da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68da      	ldr	r2, [r3, #12]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061ec:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f7fb fa0e 	bl	8001610 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b08a      	sub	sp, #40	@ 0x28
 800622c:	af02      	add	r7, sp, #8
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	603b      	str	r3, [r7, #0]
 8006234:	4613      	mov	r3, r2
 8006236:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006238:	2300      	movs	r3, #0
 800623a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006242:	b2db      	uxtb	r3, r3
 8006244:	2b20      	cmp	r3, #32
 8006246:	d175      	bne.n	8006334 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d002      	beq.n	8006254 <HAL_UART_Transmit+0x2c>
 800624e:	88fb      	ldrh	r3, [r7, #6]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e06e      	b.n	8006336 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2221      	movs	r2, #33	@ 0x21
 8006262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006266:	f7fb fb17 	bl	8001898 <HAL_GetTick>
 800626a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	88fa      	ldrh	r2, [r7, #6]
 8006270:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	88fa      	ldrh	r2, [r7, #6]
 8006276:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006280:	d108      	bne.n	8006294 <HAL_UART_Transmit+0x6c>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d104      	bne.n	8006294 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800628a:	2300      	movs	r3, #0
 800628c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	61bb      	str	r3, [r7, #24]
 8006292:	e003      	b.n	800629c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006298:	2300      	movs	r3, #0
 800629a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800629c:	e02e      	b.n	80062fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	2200      	movs	r2, #0
 80062a6:	2180      	movs	r1, #128	@ 0x80
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 fb2d 	bl	8006908 <UART_WaitOnFlagUntilTimeout>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d005      	beq.n	80062c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e03a      	b.n	8006336 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10b      	bne.n	80062de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	461a      	mov	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	3302      	adds	r3, #2
 80062da:	61bb      	str	r3, [r7, #24]
 80062dc:	e007      	b.n	80062ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	781a      	ldrb	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	3301      	adds	r3, #1
 80062ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	3b01      	subs	r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006300:	b29b      	uxth	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1cb      	bne.n	800629e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	2200      	movs	r2, #0
 800630e:	2140      	movs	r1, #64	@ 0x40
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 faf9 	bl	8006908 <UART_WaitOnFlagUntilTimeout>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d005      	beq.n	8006328 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2220      	movs	r2, #32
 8006320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e006      	b.n	8006336 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2220      	movs	r2, #32
 800632c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006330:	2300      	movs	r3, #0
 8006332:	e000      	b.n	8006336 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006334:	2302      	movs	r3, #2
  }
}
 8006336:	4618      	mov	r0, r3
 8006338:	3720      	adds	r7, #32
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	60f8      	str	r0, [r7, #12]
 8006346:	60b9      	str	r1, [r7, #8]
 8006348:	4613      	mov	r3, r2
 800634a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b20      	cmp	r3, #32
 8006356:	d112      	bne.n	800637e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <HAL_UART_Receive_IT+0x26>
 800635e:	88fb      	ldrh	r3, [r7, #6]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e00b      	b.n	8006380 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800636e:	88fb      	ldrh	r3, [r7, #6]
 8006370:	461a      	mov	r2, r3
 8006372:	68b9      	ldr	r1, [r7, #8]
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 fb20 	bl	80069ba <UART_Start_Receive_IT>
 800637a:	4603      	mov	r3, r0
 800637c:	e000      	b.n	8006380 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800637e:	2302      	movs	r3, #2
  }
}
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b0ba      	sub	sp, #232	@ 0xe8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80063ae:	2300      	movs	r3, #0
 80063b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80063b4:	2300      	movs	r3, #0
 80063b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80063ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063be:	f003 030f 	and.w	r3, r3, #15
 80063c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80063c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10f      	bne.n	80063ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063d2:	f003 0320 	and.w	r3, r3, #32
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d009      	beq.n	80063ee <HAL_UART_IRQHandler+0x66>
 80063da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063de:	f003 0320 	and.w	r3, r3, #32
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fbfd 	bl	8006be6 <UART_Receive_IT>
      return;
 80063ec:	e273      	b.n	80068d6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80063ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f000 80de 	beq.w	80065b4 <HAL_UART_IRQHandler+0x22c>
 80063f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b00      	cmp	r3, #0
 8006402:	d106      	bne.n	8006412 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006408:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 80d1 	beq.w	80065b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00b      	beq.n	8006436 <HAL_UART_IRQHandler+0xae>
 800641e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006426:	2b00      	cmp	r3, #0
 8006428:	d005      	beq.n	8006436 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800642e:	f043 0201 	orr.w	r2, r3, #1
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800643a:	f003 0304 	and.w	r3, r3, #4
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00b      	beq.n	800645a <HAL_UART_IRQHandler+0xd2>
 8006442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b00      	cmp	r3, #0
 800644c:	d005      	beq.n	800645a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006452:	f043 0202 	orr.w	r2, r3, #2
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800645a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800645e:	f003 0302 	and.w	r3, r3, #2
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00b      	beq.n	800647e <HAL_UART_IRQHandler+0xf6>
 8006466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b00      	cmp	r3, #0
 8006470:	d005      	beq.n	800647e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006476:	f043 0204 	orr.w	r2, r3, #4
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800647e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006482:	f003 0308 	and.w	r3, r3, #8
 8006486:	2b00      	cmp	r3, #0
 8006488:	d011      	beq.n	80064ae <HAL_UART_IRQHandler+0x126>
 800648a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800648e:	f003 0320 	and.w	r3, r3, #32
 8006492:	2b00      	cmp	r3, #0
 8006494:	d105      	bne.n	80064a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006496:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d005      	beq.n	80064ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064a6:	f043 0208 	orr.w	r2, r3, #8
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 820a 	beq.w	80068cc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064bc:	f003 0320 	and.w	r3, r3, #32
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d008      	beq.n	80064d6 <HAL_UART_IRQHandler+0x14e>
 80064c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064c8:	f003 0320 	and.w	r3, r3, #32
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fb88 	bl	8006be6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064e0:	2b40      	cmp	r3, #64	@ 0x40
 80064e2:	bf0c      	ite	eq
 80064e4:	2301      	moveq	r3, #1
 80064e6:	2300      	movne	r3, #0
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064f2:	f003 0308 	and.w	r3, r3, #8
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d103      	bne.n	8006502 <HAL_UART_IRQHandler+0x17a>
 80064fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d04f      	beq.n	80065a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fa93 	bl	8006a2e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006512:	2b40      	cmp	r3, #64	@ 0x40
 8006514:	d141      	bne.n	800659a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3314      	adds	r3, #20
 800651c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006520:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006524:	e853 3f00 	ldrex	r3, [r3]
 8006528:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800652c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006530:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006534:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	3314      	adds	r3, #20
 800653e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006542:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006546:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800654e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006552:	e841 2300 	strex	r3, r2, [r1]
 8006556:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800655a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1d9      	bne.n	8006516 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006566:	2b00      	cmp	r3, #0
 8006568:	d013      	beq.n	8006592 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800656e:	4a8a      	ldr	r2, [pc, #552]	@ (8006798 <HAL_UART_IRQHandler+0x410>)
 8006570:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006576:	4618      	mov	r0, r3
 8006578:	f7fc fb4e 	bl	8002c18 <HAL_DMA_Abort_IT>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d016      	beq.n	80065b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006586:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800658c:	4610      	mov	r0, r2
 800658e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006590:	e00e      	b.n	80065b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f9a2 	bl	80068dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006598:	e00a      	b.n	80065b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f99e 	bl	80068dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a0:	e006      	b.n	80065b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f99a 	bl	80068dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80065ae:	e18d      	b.n	80068cc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b0:	bf00      	nop
    return;
 80065b2:	e18b      	b.n	80068cc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	f040 8167 	bne.w	800688c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80065be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065c2:	f003 0310 	and.w	r3, r3, #16
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 8160 	beq.w	800688c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80065cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065d0:	f003 0310 	and.w	r3, r3, #16
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 8159 	beq.w	800688c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065da:	2300      	movs	r3, #0
 80065dc:	60bb      	str	r3, [r7, #8]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	60bb      	str	r3, [r7, #8]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	60bb      	str	r3, [r7, #8]
 80065ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065fa:	2b40      	cmp	r3, #64	@ 0x40
 80065fc:	f040 80ce 	bne.w	800679c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800660c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 80a9 	beq.w	8006768 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800661a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800661e:	429a      	cmp	r2, r3
 8006620:	f080 80a2 	bcs.w	8006768 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800662a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006636:	f000 8088 	beq.w	800674a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	330c      	adds	r3, #12
 8006640:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006644:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006648:	e853 3f00 	ldrex	r3, [r3]
 800664c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006650:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006654:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006658:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	330c      	adds	r3, #12
 8006662:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006666:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800666a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006672:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006676:	e841 2300 	strex	r3, r2, [r1]
 800667a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800667e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1d9      	bne.n	800663a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	3314      	adds	r3, #20
 800668c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006690:	e853 3f00 	ldrex	r3, [r3]
 8006694:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006696:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006698:	f023 0301 	bic.w	r3, r3, #1
 800669c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	3314      	adds	r3, #20
 80066a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80066aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80066ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80066b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80066b6:	e841 2300 	strex	r3, r2, [r1]
 80066ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80066bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1e1      	bne.n	8006686 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3314      	adds	r3, #20
 80066c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066cc:	e853 3f00 	ldrex	r3, [r3]
 80066d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80066d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3314      	adds	r3, #20
 80066e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80066e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80066e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80066ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80066ee:	e841 2300 	strex	r3, r2, [r1]
 80066f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80066f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1e3      	bne.n	80066c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2220      	movs	r2, #32
 80066fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	330c      	adds	r3, #12
 800670e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006710:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006712:	e853 3f00 	ldrex	r3, [r3]
 8006716:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006718:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800671a:	f023 0310 	bic.w	r3, r3, #16
 800671e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	330c      	adds	r3, #12
 8006728:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800672c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800672e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006730:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006732:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006734:	e841 2300 	strex	r3, r2, [r1]
 8006738:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800673a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1e3      	bne.n	8006708 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006744:	4618      	mov	r0, r3
 8006746:	f7fc f9f7 	bl	8002b38 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2202      	movs	r2, #2
 800674e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006758:	b29b      	uxth	r3, r3
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	b29b      	uxth	r3, r3
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f8c5 	bl	80068f0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006766:	e0b3      	b.n	80068d0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800676c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006770:	429a      	cmp	r2, r3
 8006772:	f040 80ad 	bne.w	80068d0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006780:	f040 80a6 	bne.w	80068d0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2202      	movs	r2, #2
 8006788:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800678e:	4619      	mov	r1, r3
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 f8ad 	bl	80068f0 <HAL_UARTEx_RxEventCallback>
      return;
 8006796:	e09b      	b.n	80068d0 <HAL_UART_IRQHandler+0x548>
 8006798:	08006af5 	.word	0x08006af5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 808e 	beq.w	80068d4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80067b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f000 8089 	beq.w	80068d4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	330c      	adds	r3, #12
 80067c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067cc:	e853 3f00 	ldrex	r3, [r3]
 80067d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	330c      	adds	r3, #12
 80067e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80067e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80067e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067ee:	e841 2300 	strex	r3, r2, [r1]
 80067f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1e3      	bne.n	80067c2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	3314      	adds	r3, #20
 8006800:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006804:	e853 3f00 	ldrex	r3, [r3]
 8006808:	623b      	str	r3, [r7, #32]
   return(result);
 800680a:	6a3b      	ldr	r3, [r7, #32]
 800680c:	f023 0301 	bic.w	r3, r3, #1
 8006810:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3314      	adds	r3, #20
 800681a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800681e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006820:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006822:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006824:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006826:	e841 2300 	strex	r3, r2, [r1]
 800682a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800682c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1e3      	bne.n	80067fa <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2220      	movs	r2, #32
 8006836:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	330c      	adds	r3, #12
 8006846:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	e853 3f00 	ldrex	r3, [r3]
 800684e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f023 0310 	bic.w	r3, r3, #16
 8006856:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	330c      	adds	r3, #12
 8006860:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006864:	61fa      	str	r2, [r7, #28]
 8006866:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006868:	69b9      	ldr	r1, [r7, #24]
 800686a:	69fa      	ldr	r2, [r7, #28]
 800686c:	e841 2300 	strex	r3, r2, [r1]
 8006870:	617b      	str	r3, [r7, #20]
   return(result);
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1e3      	bne.n	8006840 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800687e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006882:	4619      	mov	r1, r3
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 f833 	bl	80068f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800688a:	e023      	b.n	80068d4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800688c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006894:	2b00      	cmp	r3, #0
 8006896:	d009      	beq.n	80068ac <HAL_UART_IRQHandler+0x524>
 8006898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800689c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d003      	beq.n	80068ac <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f936 	bl	8006b16 <UART_Transmit_IT>
    return;
 80068aa:	e014      	b.n	80068d6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80068ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00e      	beq.n	80068d6 <HAL_UART_IRQHandler+0x54e>
 80068b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d008      	beq.n	80068d6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f976 	bl	8006bb6 <UART_EndTransmit_IT>
    return;
 80068ca:	e004      	b.n	80068d6 <HAL_UART_IRQHandler+0x54e>
    return;
 80068cc:	bf00      	nop
 80068ce:	e002      	b.n	80068d6 <HAL_UART_IRQHandler+0x54e>
      return;
 80068d0:	bf00      	nop
 80068d2:	e000      	b.n	80068d6 <HAL_UART_IRQHandler+0x54e>
      return;
 80068d4:	bf00      	nop
  }
}
 80068d6:	37e8      	adds	r7, #232	@ 0xe8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	460b      	mov	r3, r1
 80068fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	603b      	str	r3, [r7, #0]
 8006914:	4613      	mov	r3, r2
 8006916:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006918:	e03b      	b.n	8006992 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006920:	d037      	beq.n	8006992 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006922:	f7fa ffb9 	bl	8001898 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	6a3a      	ldr	r2, [r7, #32]
 800692e:	429a      	cmp	r2, r3
 8006930:	d302      	bcc.n	8006938 <UART_WaitOnFlagUntilTimeout+0x30>
 8006932:	6a3b      	ldr	r3, [r7, #32]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e03a      	b.n	80069b2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	f003 0304 	and.w	r3, r3, #4
 8006946:	2b00      	cmp	r3, #0
 8006948:	d023      	beq.n	8006992 <UART_WaitOnFlagUntilTimeout+0x8a>
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2b80      	cmp	r3, #128	@ 0x80
 800694e:	d020      	beq.n	8006992 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2b40      	cmp	r3, #64	@ 0x40
 8006954:	d01d      	beq.n	8006992 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0308 	and.w	r3, r3, #8
 8006960:	2b08      	cmp	r3, #8
 8006962:	d116      	bne.n	8006992 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006964:	2300      	movs	r3, #0
 8006966:	617b      	str	r3, [r7, #20]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	617b      	str	r3, [r7, #20]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	617b      	str	r3, [r7, #20]
 8006978:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f000 f857 	bl	8006a2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2208      	movs	r2, #8
 8006984:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e00f      	b.n	80069b2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	4013      	ands	r3, r2
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	429a      	cmp	r2, r3
 80069a0:	bf0c      	ite	eq
 80069a2:	2301      	moveq	r3, #1
 80069a4:	2300      	movne	r3, #0
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	461a      	mov	r2, r3
 80069aa:	79fb      	ldrb	r3, [r7, #7]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d0b4      	beq.n	800691a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3718      	adds	r7, #24
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069ba:	b480      	push	{r7}
 80069bc:	b085      	sub	sp, #20
 80069be:	af00      	add	r7, sp, #0
 80069c0:	60f8      	str	r0, [r7, #12]
 80069c2:	60b9      	str	r1, [r7, #8]
 80069c4:	4613      	mov	r3, r2
 80069c6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	88fa      	ldrh	r2, [r7, #6]
 80069d2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	88fa      	ldrh	r2, [r7, #6]
 80069d8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2222      	movs	r2, #34	@ 0x22
 80069e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d007      	beq.n	8006a00 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68da      	ldr	r2, [r3, #12]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069fe:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	695a      	ldr	r2, [r3, #20]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f042 0201 	orr.w	r2, r2, #1
 8006a0e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68da      	ldr	r2, [r3, #12]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f042 0220 	orr.w	r2, r2, #32
 8006a1e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3714      	adds	r7, #20
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b095      	sub	sp, #84	@ 0x54
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	330c      	adds	r3, #12
 8006a3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a40:	e853 3f00 	ldrex	r3, [r3]
 8006a44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	330c      	adds	r3, #12
 8006a54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a56:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a5e:	e841 2300 	strex	r3, r2, [r1]
 8006a62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1e5      	bne.n	8006a36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	3314      	adds	r3, #20
 8006a70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a72:	6a3b      	ldr	r3, [r7, #32]
 8006a74:	e853 3f00 	ldrex	r3, [r3]
 8006a78:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	f023 0301 	bic.w	r3, r3, #1
 8006a80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3314      	adds	r3, #20
 8006a88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a92:	e841 2300 	strex	r3, r2, [r1]
 8006a96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1e5      	bne.n	8006a6a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d119      	bne.n	8006ada <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	330c      	adds	r3, #12
 8006aac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	e853 3f00 	ldrex	r3, [r3]
 8006ab4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	f023 0310 	bic.w	r3, r3, #16
 8006abc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	330c      	adds	r3, #12
 8006ac4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ac6:	61ba      	str	r2, [r7, #24]
 8006ac8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aca:	6979      	ldr	r1, [r7, #20]
 8006acc:	69ba      	ldr	r2, [r7, #24]
 8006ace:	e841 2300 	strex	r3, r2, [r1]
 8006ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1e5      	bne.n	8006aa6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2220      	movs	r2, #32
 8006ade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006ae8:	bf00      	nop
 8006aea:	3754      	adds	r7, #84	@ 0x54
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f7ff fee7 	bl	80068dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b0e:	bf00      	nop
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b085      	sub	sp, #20
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b21      	cmp	r3, #33	@ 0x21
 8006b28:	d13e      	bne.n	8006ba8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b32:	d114      	bne.n	8006b5e <UART_Transmit_IT+0x48>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d110      	bne.n	8006b5e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a1b      	ldr	r3, [r3, #32]
 8006b40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	461a      	mov	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	1c9a      	adds	r2, r3, #2
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	621a      	str	r2, [r3, #32]
 8006b5c:	e008      	b.n	8006b70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	1c59      	adds	r1, r3, #1
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	6211      	str	r1, [r2, #32]
 8006b68:	781a      	ldrb	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	3b01      	subs	r3, #1
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10f      	bne.n	8006ba4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68da      	ldr	r2, [r3, #12]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68da      	ldr	r2, [r3, #12]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ba2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	e000      	b.n	8006baa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006ba8:	2302      	movs	r3, #2
  }
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b082      	sub	sp, #8
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68da      	ldr	r2, [r3, #12]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bcc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2220      	movs	r2, #32
 8006bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f002 f944 	bl	8008e64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b08c      	sub	sp, #48	@ 0x30
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b22      	cmp	r3, #34	@ 0x22
 8006c00:	f040 80aa 	bne.w	8006d58 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c0c:	d115      	bne.n	8006c3a <UART_Receive_IT+0x54>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d111      	bne.n	8006c3a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c32:	1c9a      	adds	r2, r3, #2
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	629a      	str	r2, [r3, #40]	@ 0x28
 8006c38:	e024      	b.n	8006c84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c48:	d007      	beq.n	8006c5a <UART_Receive_IT+0x74>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10a      	bne.n	8006c68 <UART_Receive_IT+0x82>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d106      	bne.n	8006c68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c64:	701a      	strb	r2, [r3, #0]
 8006c66:	e008      	b.n	8006c7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c7e:	1c5a      	adds	r2, r3, #1
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	4619      	mov	r1, r3
 8006c92:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d15d      	bne.n	8006d54 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68da      	ldr	r2, [r3, #12]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f022 0220 	bic.w	r2, r2, #32
 8006ca6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68da      	ldr	r2, [r3, #12]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006cb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	695a      	ldr	r2, [r3, #20]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f022 0201 	bic.w	r2, r2, #1
 8006cc6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2220      	movs	r2, #32
 8006ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d135      	bne.n	8006d4a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	330c      	adds	r3, #12
 8006cea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	e853 3f00 	ldrex	r3, [r3]
 8006cf2:	613b      	str	r3, [r7, #16]
   return(result);
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	f023 0310 	bic.w	r3, r3, #16
 8006cfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	330c      	adds	r3, #12
 8006d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d04:	623a      	str	r2, [r7, #32]
 8006d06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d08:	69f9      	ldr	r1, [r7, #28]
 8006d0a:	6a3a      	ldr	r2, [r7, #32]
 8006d0c:	e841 2300 	strex	r3, r2, [r1]
 8006d10:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1e5      	bne.n	8006ce4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0310 	and.w	r3, r3, #16
 8006d22:	2b10      	cmp	r3, #16
 8006d24:	d10a      	bne.n	8006d3c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d26:	2300      	movs	r3, #0
 8006d28:	60fb      	str	r3, [r7, #12]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	60fb      	str	r3, [r7, #12]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	60fb      	str	r3, [r7, #12]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d40:	4619      	mov	r1, r3
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7ff fdd4 	bl	80068f0 <HAL_UARTEx_RxEventCallback>
 8006d48:	e002      	b.n	8006d50 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f002 f9ce 	bl	80090ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d50:	2300      	movs	r3, #0
 8006d52:	e002      	b.n	8006d5a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006d54:	2300      	movs	r3, #0
 8006d56:	e000      	b.n	8006d5a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006d58:	2302      	movs	r3, #2
  }
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3730      	adds	r7, #48	@ 0x30
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
	...

08006d64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d68:	b0c0      	sub	sp, #256	@ 0x100
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d80:	68d9      	ldr	r1, [r3, #12]
 8006d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	ea40 0301 	orr.w	r3, r0, r1
 8006d8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d92:	689a      	ldr	r2, [r3, #8]
 8006d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	431a      	orrs	r2, r3
 8006da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006dbc:	f021 010c 	bic.w	r1, r1, #12
 8006dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006dca:	430b      	orrs	r3, r1
 8006dcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dde:	6999      	ldr	r1, [r3, #24]
 8006de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	ea40 0301 	orr.w	r3, r0, r1
 8006dea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	4b8f      	ldr	r3, [pc, #572]	@ (8007030 <UART_SetConfig+0x2cc>)
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d005      	beq.n	8006e04 <UART_SetConfig+0xa0>
 8006df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	4b8d      	ldr	r3, [pc, #564]	@ (8007034 <UART_SetConfig+0x2d0>)
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d104      	bne.n	8006e0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e04:	f7fe fc4c 	bl	80056a0 <HAL_RCC_GetPCLK2Freq>
 8006e08:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006e0c:	e003      	b.n	8006e16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e0e:	f7fe fc33 	bl	8005678 <HAL_RCC_GetPCLK1Freq>
 8006e12:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e1a:	69db      	ldr	r3, [r3, #28]
 8006e1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e20:	f040 810c 	bne.w	800703c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e2e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006e32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006e36:	4622      	mov	r2, r4
 8006e38:	462b      	mov	r3, r5
 8006e3a:	1891      	adds	r1, r2, r2
 8006e3c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006e3e:	415b      	adcs	r3, r3
 8006e40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006e46:	4621      	mov	r1, r4
 8006e48:	eb12 0801 	adds.w	r8, r2, r1
 8006e4c:	4629      	mov	r1, r5
 8006e4e:	eb43 0901 	adc.w	r9, r3, r1
 8006e52:	f04f 0200 	mov.w	r2, #0
 8006e56:	f04f 0300 	mov.w	r3, #0
 8006e5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e66:	4690      	mov	r8, r2
 8006e68:	4699      	mov	r9, r3
 8006e6a:	4623      	mov	r3, r4
 8006e6c:	eb18 0303 	adds.w	r3, r8, r3
 8006e70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006e74:	462b      	mov	r3, r5
 8006e76:	eb49 0303 	adc.w	r3, r9, r3
 8006e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e8a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006e8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006e92:	460b      	mov	r3, r1
 8006e94:	18db      	adds	r3, r3, r3
 8006e96:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e98:	4613      	mov	r3, r2
 8006e9a:	eb42 0303 	adc.w	r3, r2, r3
 8006e9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ea0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006ea4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006ea8:	f7f9 f9e2 	bl	8000270 <__aeabi_uldivmod>
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4b61      	ldr	r3, [pc, #388]	@ (8007038 <UART_SetConfig+0x2d4>)
 8006eb2:	fba3 2302 	umull	r2, r3, r3, r2
 8006eb6:	095b      	lsrs	r3, r3, #5
 8006eb8:	011c      	lsls	r4, r3, #4
 8006eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ec4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006ec8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006ecc:	4642      	mov	r2, r8
 8006ece:	464b      	mov	r3, r9
 8006ed0:	1891      	adds	r1, r2, r2
 8006ed2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006ed4:	415b      	adcs	r3, r3
 8006ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ed8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006edc:	4641      	mov	r1, r8
 8006ede:	eb12 0a01 	adds.w	sl, r2, r1
 8006ee2:	4649      	mov	r1, r9
 8006ee4:	eb43 0b01 	adc.w	fp, r3, r1
 8006ee8:	f04f 0200 	mov.w	r2, #0
 8006eec:	f04f 0300 	mov.w	r3, #0
 8006ef0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ef4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ef8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006efc:	4692      	mov	sl, r2
 8006efe:	469b      	mov	fp, r3
 8006f00:	4643      	mov	r3, r8
 8006f02:	eb1a 0303 	adds.w	r3, sl, r3
 8006f06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f0a:	464b      	mov	r3, r9
 8006f0c:	eb4b 0303 	adc.w	r3, fp, r3
 8006f10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f20:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006f24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	18db      	adds	r3, r3, r3
 8006f2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f2e:	4613      	mov	r3, r2
 8006f30:	eb42 0303 	adc.w	r3, r2, r3
 8006f34:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006f3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006f3e:	f7f9 f997 	bl	8000270 <__aeabi_uldivmod>
 8006f42:	4602      	mov	r2, r0
 8006f44:	460b      	mov	r3, r1
 8006f46:	4611      	mov	r1, r2
 8006f48:	4b3b      	ldr	r3, [pc, #236]	@ (8007038 <UART_SetConfig+0x2d4>)
 8006f4a:	fba3 2301 	umull	r2, r3, r3, r1
 8006f4e:	095b      	lsrs	r3, r3, #5
 8006f50:	2264      	movs	r2, #100	@ 0x64
 8006f52:	fb02 f303 	mul.w	r3, r2, r3
 8006f56:	1acb      	subs	r3, r1, r3
 8006f58:	00db      	lsls	r3, r3, #3
 8006f5a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006f5e:	4b36      	ldr	r3, [pc, #216]	@ (8007038 <UART_SetConfig+0x2d4>)
 8006f60:	fba3 2302 	umull	r2, r3, r3, r2
 8006f64:	095b      	lsrs	r3, r3, #5
 8006f66:	005b      	lsls	r3, r3, #1
 8006f68:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006f6c:	441c      	add	r4, r3
 8006f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f72:	2200      	movs	r2, #0
 8006f74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f78:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006f7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006f80:	4642      	mov	r2, r8
 8006f82:	464b      	mov	r3, r9
 8006f84:	1891      	adds	r1, r2, r2
 8006f86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006f88:	415b      	adcs	r3, r3
 8006f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006f90:	4641      	mov	r1, r8
 8006f92:	1851      	adds	r1, r2, r1
 8006f94:	6339      	str	r1, [r7, #48]	@ 0x30
 8006f96:	4649      	mov	r1, r9
 8006f98:	414b      	adcs	r3, r1
 8006f9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f9c:	f04f 0200 	mov.w	r2, #0
 8006fa0:	f04f 0300 	mov.w	r3, #0
 8006fa4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006fa8:	4659      	mov	r1, fp
 8006faa:	00cb      	lsls	r3, r1, #3
 8006fac:	4651      	mov	r1, sl
 8006fae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fb2:	4651      	mov	r1, sl
 8006fb4:	00ca      	lsls	r2, r1, #3
 8006fb6:	4610      	mov	r0, r2
 8006fb8:	4619      	mov	r1, r3
 8006fba:	4603      	mov	r3, r0
 8006fbc:	4642      	mov	r2, r8
 8006fbe:	189b      	adds	r3, r3, r2
 8006fc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006fc4:	464b      	mov	r3, r9
 8006fc6:	460a      	mov	r2, r1
 8006fc8:	eb42 0303 	adc.w	r3, r2, r3
 8006fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006fdc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006fe0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	18db      	adds	r3, r3, r3
 8006fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fea:	4613      	mov	r3, r2
 8006fec:	eb42 0303 	adc.w	r3, r2, r3
 8006ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ff2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006ff6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006ffa:	f7f9 f939 	bl	8000270 <__aeabi_uldivmod>
 8006ffe:	4602      	mov	r2, r0
 8007000:	460b      	mov	r3, r1
 8007002:	4b0d      	ldr	r3, [pc, #52]	@ (8007038 <UART_SetConfig+0x2d4>)
 8007004:	fba3 1302 	umull	r1, r3, r3, r2
 8007008:	095b      	lsrs	r3, r3, #5
 800700a:	2164      	movs	r1, #100	@ 0x64
 800700c:	fb01 f303 	mul.w	r3, r1, r3
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	00db      	lsls	r3, r3, #3
 8007014:	3332      	adds	r3, #50	@ 0x32
 8007016:	4a08      	ldr	r2, [pc, #32]	@ (8007038 <UART_SetConfig+0x2d4>)
 8007018:	fba2 2303 	umull	r2, r3, r2, r3
 800701c:	095b      	lsrs	r3, r3, #5
 800701e:	f003 0207 	and.w	r2, r3, #7
 8007022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4422      	add	r2, r4
 800702a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800702c:	e106      	b.n	800723c <UART_SetConfig+0x4d8>
 800702e:	bf00      	nop
 8007030:	40011000 	.word	0x40011000
 8007034:	40011400 	.word	0x40011400
 8007038:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800703c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007040:	2200      	movs	r2, #0
 8007042:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007046:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800704a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800704e:	4642      	mov	r2, r8
 8007050:	464b      	mov	r3, r9
 8007052:	1891      	adds	r1, r2, r2
 8007054:	6239      	str	r1, [r7, #32]
 8007056:	415b      	adcs	r3, r3
 8007058:	627b      	str	r3, [r7, #36]	@ 0x24
 800705a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800705e:	4641      	mov	r1, r8
 8007060:	1854      	adds	r4, r2, r1
 8007062:	4649      	mov	r1, r9
 8007064:	eb43 0501 	adc.w	r5, r3, r1
 8007068:	f04f 0200 	mov.w	r2, #0
 800706c:	f04f 0300 	mov.w	r3, #0
 8007070:	00eb      	lsls	r3, r5, #3
 8007072:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007076:	00e2      	lsls	r2, r4, #3
 8007078:	4614      	mov	r4, r2
 800707a:	461d      	mov	r5, r3
 800707c:	4643      	mov	r3, r8
 800707e:	18e3      	adds	r3, r4, r3
 8007080:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007084:	464b      	mov	r3, r9
 8007086:	eb45 0303 	adc.w	r3, r5, r3
 800708a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800708e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800709a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800709e:	f04f 0200 	mov.w	r2, #0
 80070a2:	f04f 0300 	mov.w	r3, #0
 80070a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80070aa:	4629      	mov	r1, r5
 80070ac:	008b      	lsls	r3, r1, #2
 80070ae:	4621      	mov	r1, r4
 80070b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070b4:	4621      	mov	r1, r4
 80070b6:	008a      	lsls	r2, r1, #2
 80070b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80070bc:	f7f9 f8d8 	bl	8000270 <__aeabi_uldivmod>
 80070c0:	4602      	mov	r2, r0
 80070c2:	460b      	mov	r3, r1
 80070c4:	4b60      	ldr	r3, [pc, #384]	@ (8007248 <UART_SetConfig+0x4e4>)
 80070c6:	fba3 2302 	umull	r2, r3, r3, r2
 80070ca:	095b      	lsrs	r3, r3, #5
 80070cc:	011c      	lsls	r4, r3, #4
 80070ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070d2:	2200      	movs	r2, #0
 80070d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80070d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80070dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80070e0:	4642      	mov	r2, r8
 80070e2:	464b      	mov	r3, r9
 80070e4:	1891      	adds	r1, r2, r2
 80070e6:	61b9      	str	r1, [r7, #24]
 80070e8:	415b      	adcs	r3, r3
 80070ea:	61fb      	str	r3, [r7, #28]
 80070ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070f0:	4641      	mov	r1, r8
 80070f2:	1851      	adds	r1, r2, r1
 80070f4:	6139      	str	r1, [r7, #16]
 80070f6:	4649      	mov	r1, r9
 80070f8:	414b      	adcs	r3, r1
 80070fa:	617b      	str	r3, [r7, #20]
 80070fc:	f04f 0200 	mov.w	r2, #0
 8007100:	f04f 0300 	mov.w	r3, #0
 8007104:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007108:	4659      	mov	r1, fp
 800710a:	00cb      	lsls	r3, r1, #3
 800710c:	4651      	mov	r1, sl
 800710e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007112:	4651      	mov	r1, sl
 8007114:	00ca      	lsls	r2, r1, #3
 8007116:	4610      	mov	r0, r2
 8007118:	4619      	mov	r1, r3
 800711a:	4603      	mov	r3, r0
 800711c:	4642      	mov	r2, r8
 800711e:	189b      	adds	r3, r3, r2
 8007120:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007124:	464b      	mov	r3, r9
 8007126:	460a      	mov	r2, r1
 8007128:	eb42 0303 	adc.w	r3, r2, r3
 800712c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	67bb      	str	r3, [r7, #120]	@ 0x78
 800713a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800713c:	f04f 0200 	mov.w	r2, #0
 8007140:	f04f 0300 	mov.w	r3, #0
 8007144:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007148:	4649      	mov	r1, r9
 800714a:	008b      	lsls	r3, r1, #2
 800714c:	4641      	mov	r1, r8
 800714e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007152:	4641      	mov	r1, r8
 8007154:	008a      	lsls	r2, r1, #2
 8007156:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800715a:	f7f9 f889 	bl	8000270 <__aeabi_uldivmod>
 800715e:	4602      	mov	r2, r0
 8007160:	460b      	mov	r3, r1
 8007162:	4611      	mov	r1, r2
 8007164:	4b38      	ldr	r3, [pc, #224]	@ (8007248 <UART_SetConfig+0x4e4>)
 8007166:	fba3 2301 	umull	r2, r3, r3, r1
 800716a:	095b      	lsrs	r3, r3, #5
 800716c:	2264      	movs	r2, #100	@ 0x64
 800716e:	fb02 f303 	mul.w	r3, r2, r3
 8007172:	1acb      	subs	r3, r1, r3
 8007174:	011b      	lsls	r3, r3, #4
 8007176:	3332      	adds	r3, #50	@ 0x32
 8007178:	4a33      	ldr	r2, [pc, #204]	@ (8007248 <UART_SetConfig+0x4e4>)
 800717a:	fba2 2303 	umull	r2, r3, r2, r3
 800717e:	095b      	lsrs	r3, r3, #5
 8007180:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007184:	441c      	add	r4, r3
 8007186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800718a:	2200      	movs	r2, #0
 800718c:	673b      	str	r3, [r7, #112]	@ 0x70
 800718e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007190:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007194:	4642      	mov	r2, r8
 8007196:	464b      	mov	r3, r9
 8007198:	1891      	adds	r1, r2, r2
 800719a:	60b9      	str	r1, [r7, #8]
 800719c:	415b      	adcs	r3, r3
 800719e:	60fb      	str	r3, [r7, #12]
 80071a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071a4:	4641      	mov	r1, r8
 80071a6:	1851      	adds	r1, r2, r1
 80071a8:	6039      	str	r1, [r7, #0]
 80071aa:	4649      	mov	r1, r9
 80071ac:	414b      	adcs	r3, r1
 80071ae:	607b      	str	r3, [r7, #4]
 80071b0:	f04f 0200 	mov.w	r2, #0
 80071b4:	f04f 0300 	mov.w	r3, #0
 80071b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80071bc:	4659      	mov	r1, fp
 80071be:	00cb      	lsls	r3, r1, #3
 80071c0:	4651      	mov	r1, sl
 80071c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071c6:	4651      	mov	r1, sl
 80071c8:	00ca      	lsls	r2, r1, #3
 80071ca:	4610      	mov	r0, r2
 80071cc:	4619      	mov	r1, r3
 80071ce:	4603      	mov	r3, r0
 80071d0:	4642      	mov	r2, r8
 80071d2:	189b      	adds	r3, r3, r2
 80071d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071d6:	464b      	mov	r3, r9
 80071d8:	460a      	mov	r2, r1
 80071da:	eb42 0303 	adc.w	r3, r2, r3
 80071de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80071e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80071ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80071ec:	f04f 0200 	mov.w	r2, #0
 80071f0:	f04f 0300 	mov.w	r3, #0
 80071f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80071f8:	4649      	mov	r1, r9
 80071fa:	008b      	lsls	r3, r1, #2
 80071fc:	4641      	mov	r1, r8
 80071fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007202:	4641      	mov	r1, r8
 8007204:	008a      	lsls	r2, r1, #2
 8007206:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800720a:	f7f9 f831 	bl	8000270 <__aeabi_uldivmod>
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	4b0d      	ldr	r3, [pc, #52]	@ (8007248 <UART_SetConfig+0x4e4>)
 8007214:	fba3 1302 	umull	r1, r3, r3, r2
 8007218:	095b      	lsrs	r3, r3, #5
 800721a:	2164      	movs	r1, #100	@ 0x64
 800721c:	fb01 f303 	mul.w	r3, r1, r3
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	011b      	lsls	r3, r3, #4
 8007224:	3332      	adds	r3, #50	@ 0x32
 8007226:	4a08      	ldr	r2, [pc, #32]	@ (8007248 <UART_SetConfig+0x4e4>)
 8007228:	fba2 2303 	umull	r2, r3, r2, r3
 800722c:	095b      	lsrs	r3, r3, #5
 800722e:	f003 020f 	and.w	r2, r3, #15
 8007232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4422      	add	r2, r4
 800723a:	609a      	str	r2, [r3, #8]
}
 800723c:	bf00      	nop
 800723e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007242:	46bd      	mov	sp, r7
 8007244:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007248:	51eb851f 	.word	0x51eb851f

0800724c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800724c:	b084      	sub	sp, #16
 800724e:	b580      	push	{r7, lr}
 8007250:	b084      	sub	sp, #16
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
 8007256:	f107 001c 	add.w	r0, r7, #28
 800725a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800725e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007262:	2b01      	cmp	r3, #1
 8007264:	d123      	bne.n	80072ae <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800726a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800727a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800728e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007292:	2b01      	cmp	r3, #1
 8007294:	d105      	bne.n	80072a2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f001 fae8 	bl	8008878 <USB_CoreReset>
 80072a8:	4603      	mov	r3, r0
 80072aa:	73fb      	strb	r3, [r7, #15]
 80072ac:	e01b      	b.n	80072e6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f001 fadc 	bl	8008878 <USB_CoreReset>
 80072c0:	4603      	mov	r3, r0
 80072c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80072c4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d106      	bne.n	80072da <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072d0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80072d8:	e005      	b.n	80072e6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80072e6:	7fbb      	ldrb	r3, [r7, #30]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d10b      	bne.n	8007304 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f043 0206 	orr.w	r2, r3, #6
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f043 0220 	orr.w	r2, r3, #32
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007304:	7bfb      	ldrb	r3, [r7, #15]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007310:	b004      	add	sp, #16
 8007312:	4770      	bx	lr

08007314 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007314:	b480      	push	{r7}
 8007316:	b087      	sub	sp, #28
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	4613      	mov	r3, r2
 8007320:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007322:	79fb      	ldrb	r3, [r7, #7]
 8007324:	2b02      	cmp	r3, #2
 8007326:	d165      	bne.n	80073f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	4a41      	ldr	r2, [pc, #260]	@ (8007430 <USB_SetTurnaroundTime+0x11c>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d906      	bls.n	800733e <USB_SetTurnaroundTime+0x2a>
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	4a40      	ldr	r2, [pc, #256]	@ (8007434 <USB_SetTurnaroundTime+0x120>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d202      	bcs.n	800733e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007338:	230f      	movs	r3, #15
 800733a:	617b      	str	r3, [r7, #20]
 800733c:	e062      	b.n	8007404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	4a3c      	ldr	r2, [pc, #240]	@ (8007434 <USB_SetTurnaroundTime+0x120>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d306      	bcc.n	8007354 <USB_SetTurnaroundTime+0x40>
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	4a3b      	ldr	r2, [pc, #236]	@ (8007438 <USB_SetTurnaroundTime+0x124>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d202      	bcs.n	8007354 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800734e:	230e      	movs	r3, #14
 8007350:	617b      	str	r3, [r7, #20]
 8007352:	e057      	b.n	8007404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	4a38      	ldr	r2, [pc, #224]	@ (8007438 <USB_SetTurnaroundTime+0x124>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d306      	bcc.n	800736a <USB_SetTurnaroundTime+0x56>
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	4a37      	ldr	r2, [pc, #220]	@ (800743c <USB_SetTurnaroundTime+0x128>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d202      	bcs.n	800736a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007364:	230d      	movs	r3, #13
 8007366:	617b      	str	r3, [r7, #20]
 8007368:	e04c      	b.n	8007404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	4a33      	ldr	r2, [pc, #204]	@ (800743c <USB_SetTurnaroundTime+0x128>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d306      	bcc.n	8007380 <USB_SetTurnaroundTime+0x6c>
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	4a32      	ldr	r2, [pc, #200]	@ (8007440 <USB_SetTurnaroundTime+0x12c>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d802      	bhi.n	8007380 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800737a:	230c      	movs	r3, #12
 800737c:	617b      	str	r3, [r7, #20]
 800737e:	e041      	b.n	8007404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	4a2f      	ldr	r2, [pc, #188]	@ (8007440 <USB_SetTurnaroundTime+0x12c>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d906      	bls.n	8007396 <USB_SetTurnaroundTime+0x82>
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	4a2e      	ldr	r2, [pc, #184]	@ (8007444 <USB_SetTurnaroundTime+0x130>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d802      	bhi.n	8007396 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007390:	230b      	movs	r3, #11
 8007392:	617b      	str	r3, [r7, #20]
 8007394:	e036      	b.n	8007404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	4a2a      	ldr	r2, [pc, #168]	@ (8007444 <USB_SetTurnaroundTime+0x130>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d906      	bls.n	80073ac <USB_SetTurnaroundTime+0x98>
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	4a29      	ldr	r2, [pc, #164]	@ (8007448 <USB_SetTurnaroundTime+0x134>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d802      	bhi.n	80073ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80073a6:	230a      	movs	r3, #10
 80073a8:	617b      	str	r3, [r7, #20]
 80073aa:	e02b      	b.n	8007404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	4a26      	ldr	r2, [pc, #152]	@ (8007448 <USB_SetTurnaroundTime+0x134>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d906      	bls.n	80073c2 <USB_SetTurnaroundTime+0xae>
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	4a25      	ldr	r2, [pc, #148]	@ (800744c <USB_SetTurnaroundTime+0x138>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d202      	bcs.n	80073c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80073bc:	2309      	movs	r3, #9
 80073be:	617b      	str	r3, [r7, #20]
 80073c0:	e020      	b.n	8007404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	4a21      	ldr	r2, [pc, #132]	@ (800744c <USB_SetTurnaroundTime+0x138>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d306      	bcc.n	80073d8 <USB_SetTurnaroundTime+0xc4>
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	4a20      	ldr	r2, [pc, #128]	@ (8007450 <USB_SetTurnaroundTime+0x13c>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d802      	bhi.n	80073d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80073d2:	2308      	movs	r3, #8
 80073d4:	617b      	str	r3, [r7, #20]
 80073d6:	e015      	b.n	8007404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	4a1d      	ldr	r2, [pc, #116]	@ (8007450 <USB_SetTurnaroundTime+0x13c>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d906      	bls.n	80073ee <USB_SetTurnaroundTime+0xda>
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	4a1c      	ldr	r2, [pc, #112]	@ (8007454 <USB_SetTurnaroundTime+0x140>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d202      	bcs.n	80073ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80073e8:	2307      	movs	r3, #7
 80073ea:	617b      	str	r3, [r7, #20]
 80073ec:	e00a      	b.n	8007404 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80073ee:	2306      	movs	r3, #6
 80073f0:	617b      	str	r3, [r7, #20]
 80073f2:	e007      	b.n	8007404 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80073f4:	79fb      	ldrb	r3, [r7, #7]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d102      	bne.n	8007400 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80073fa:	2309      	movs	r3, #9
 80073fc:	617b      	str	r3, [r7, #20]
 80073fe:	e001      	b.n	8007404 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007400:	2309      	movs	r3, #9
 8007402:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	68da      	ldr	r2, [r3, #12]
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	029b      	lsls	r3, r3, #10
 8007418:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800741c:	431a      	orrs	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	371c      	adds	r7, #28
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr
 8007430:	00d8acbf 	.word	0x00d8acbf
 8007434:	00e4e1c0 	.word	0x00e4e1c0
 8007438:	00f42400 	.word	0x00f42400
 800743c:	01067380 	.word	0x01067380
 8007440:	011a499f 	.word	0x011a499f
 8007444:	01312cff 	.word	0x01312cff
 8007448:	014ca43f 	.word	0x014ca43f
 800744c:	016e3600 	.word	0x016e3600
 8007450:	01a6ab1f 	.word	0x01a6ab1f
 8007454:	01e84800 	.word	0x01e84800

08007458 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f043 0201 	orr.w	r2, r3, #1
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	370c      	adds	r7, #12
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr

0800747a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800747a:	b480      	push	{r7}
 800747c:	b083      	sub	sp, #12
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	f023 0201 	bic.w	r2, r3, #1
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	460b      	mov	r3, r1
 80074a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80074a8:	2300      	movs	r3, #0
 80074aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80074b8:	78fb      	ldrb	r3, [r7, #3]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d115      	bne.n	80074ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80074ca:	200a      	movs	r0, #10
 80074cc:	f7fa f9f0 	bl	80018b0 <HAL_Delay>
      ms += 10U;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	330a      	adds	r3, #10
 80074d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f001 f93f 	bl	800875a <USB_GetMode>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d01e      	beq.n	8007520 <USB_SetCurrentMode+0x84>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2bc7      	cmp	r3, #199	@ 0xc7
 80074e6:	d9f0      	bls.n	80074ca <USB_SetCurrentMode+0x2e>
 80074e8:	e01a      	b.n	8007520 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80074ea:	78fb      	ldrb	r3, [r7, #3]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d115      	bne.n	800751c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80074fc:	200a      	movs	r0, #10
 80074fe:	f7fa f9d7 	bl	80018b0 <HAL_Delay>
      ms += 10U;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	330a      	adds	r3, #10
 8007506:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f001 f926 	bl	800875a <USB_GetMode>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d005      	beq.n	8007520 <USB_SetCurrentMode+0x84>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2bc7      	cmp	r3, #199	@ 0xc7
 8007518:	d9f0      	bls.n	80074fc <USB_SetCurrentMode+0x60>
 800751a:	e001      	b.n	8007520 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e005      	b.n	800752c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2bc8      	cmp	r3, #200	@ 0xc8
 8007524:	d101      	bne.n	800752a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e000      	b.n	800752c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007534:	b084      	sub	sp, #16
 8007536:	b580      	push	{r7, lr}
 8007538:	b086      	sub	sp, #24
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007542:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007546:	2300      	movs	r3, #0
 8007548:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800754e:	2300      	movs	r3, #0
 8007550:	613b      	str	r3, [r7, #16]
 8007552:	e009      	b.n	8007568 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	3340      	adds	r3, #64	@ 0x40
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	4413      	add	r3, r2
 800755e:	2200      	movs	r2, #0
 8007560:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	3301      	adds	r3, #1
 8007566:	613b      	str	r3, [r7, #16]
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	2b0e      	cmp	r3, #14
 800756c:	d9f2      	bls.n	8007554 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800756e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007572:	2b00      	cmp	r3, #0
 8007574:	d11c      	bne.n	80075b0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007584:	f043 0302 	orr.w	r3, r3, #2
 8007588:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800758e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800759a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80075ae:	e00b      	b.n	80075c8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075b4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80075ce:	461a      	mov	r2, r3
 80075d0:	2300      	movs	r3, #0
 80075d2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075d4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d10d      	bne.n	80075f8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80075dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d104      	bne.n	80075ee <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80075e4:	2100      	movs	r1, #0
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f968 	bl	80078bc <USB_SetDevSpeed>
 80075ec:	e008      	b.n	8007600 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80075ee:	2101      	movs	r1, #1
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f963 	bl	80078bc <USB_SetDevSpeed>
 80075f6:	e003      	b.n	8007600 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80075f8:	2103      	movs	r1, #3
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f95e 	bl	80078bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007600:	2110      	movs	r1, #16
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f8fa 	bl	80077fc <USB_FlushTxFifo>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d001      	beq.n	8007612 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f924 	bl	8007860 <USB_FlushRxFifo>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d001      	beq.n	8007622 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007628:	461a      	mov	r2, r3
 800762a:	2300      	movs	r3, #0
 800762c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007634:	461a      	mov	r2, r3
 8007636:	2300      	movs	r3, #0
 8007638:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007640:	461a      	mov	r2, r3
 8007642:	2300      	movs	r3, #0
 8007644:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007646:	2300      	movs	r3, #0
 8007648:	613b      	str	r3, [r7, #16]
 800764a:	e043      	b.n	80076d4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	015a      	lsls	r2, r3, #5
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	4413      	add	r3, r2
 8007654:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800765e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007662:	d118      	bne.n	8007696 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10a      	bne.n	8007680 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	015a      	lsls	r2, r3, #5
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	4413      	add	r3, r2
 8007672:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007676:	461a      	mov	r2, r3
 8007678:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800767c:	6013      	str	r3, [r2, #0]
 800767e:	e013      	b.n	80076a8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	4413      	add	r3, r2
 8007688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800768c:	461a      	mov	r2, r3
 800768e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007692:	6013      	str	r3, [r2, #0]
 8007694:	e008      	b.n	80076a8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	015a      	lsls	r2, r3, #5
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	4413      	add	r3, r2
 800769e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076a2:	461a      	mov	r2, r3
 80076a4:	2300      	movs	r3, #0
 80076a6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	015a      	lsls	r2, r3, #5
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076b4:	461a      	mov	r2, r3
 80076b6:	2300      	movs	r3, #0
 80076b8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	015a      	lsls	r2, r3, #5
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	4413      	add	r3, r2
 80076c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076c6:	461a      	mov	r2, r3
 80076c8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80076cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	3301      	adds	r3, #1
 80076d2:	613b      	str	r3, [r7, #16]
 80076d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80076d8:	461a      	mov	r2, r3
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	4293      	cmp	r3, r2
 80076de:	d3b5      	bcc.n	800764c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076e0:	2300      	movs	r3, #0
 80076e2:	613b      	str	r3, [r7, #16]
 80076e4:	e043      	b.n	800776e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	015a      	lsls	r2, r3, #5
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	4413      	add	r3, r2
 80076ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076fc:	d118      	bne.n	8007730 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10a      	bne.n	800771a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	015a      	lsls	r2, r3, #5
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	4413      	add	r3, r2
 800770c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007710:	461a      	mov	r2, r3
 8007712:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007716:	6013      	str	r3, [r2, #0]
 8007718:	e013      	b.n	8007742 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	015a      	lsls	r2, r3, #5
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	4413      	add	r3, r2
 8007722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007726:	461a      	mov	r2, r3
 8007728:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800772c:	6013      	str	r3, [r2, #0]
 800772e:	e008      	b.n	8007742 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	4413      	add	r3, r2
 8007738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800773c:	461a      	mov	r2, r3
 800773e:	2300      	movs	r3, #0
 8007740:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	015a      	lsls	r2, r3, #5
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	4413      	add	r3, r2
 800774a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800774e:	461a      	mov	r2, r3
 8007750:	2300      	movs	r3, #0
 8007752:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	4413      	add	r3, r2
 800775c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007760:	461a      	mov	r2, r3
 8007762:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007766:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	3301      	adds	r3, #1
 800776c:	613b      	str	r3, [r7, #16]
 800776e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007772:	461a      	mov	r2, r3
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	4293      	cmp	r3, r2
 8007778:	d3b5      	bcc.n	80076e6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007788:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800778c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800779a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800779c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d105      	bne.n	80077b0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	f043 0210 	orr.w	r2, r3, #16
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	699a      	ldr	r2, [r3, #24]
 80077b4:	4b10      	ldr	r3, [pc, #64]	@ (80077f8 <USB_DevInit+0x2c4>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80077bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d005      	beq.n	80077d0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	f043 0208 	orr.w	r2, r3, #8
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80077d0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d107      	bne.n	80077e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80077e0:	f043 0304 	orr.w	r3, r3, #4
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80077e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3718      	adds	r7, #24
 80077ee:	46bd      	mov	sp, r7
 80077f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077f4:	b004      	add	sp, #16
 80077f6:	4770      	bx	lr
 80077f8:	803c3800 	.word	0x803c3800

080077fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007806:	2300      	movs	r3, #0
 8007808:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	3301      	adds	r3, #1
 800780e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007816:	d901      	bls.n	800781c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	e01b      	b.n	8007854 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	2b00      	cmp	r3, #0
 8007822:	daf2      	bge.n	800780a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007824:	2300      	movs	r3, #0
 8007826:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	019b      	lsls	r3, r3, #6
 800782c:	f043 0220 	orr.w	r2, r3, #32
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	3301      	adds	r3, #1
 8007838:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007840:	d901      	bls.n	8007846 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e006      	b.n	8007854 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	f003 0320 	and.w	r3, r3, #32
 800784e:	2b20      	cmp	r3, #32
 8007850:	d0f0      	beq.n	8007834 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007868:	2300      	movs	r3, #0
 800786a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	3301      	adds	r3, #1
 8007870:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007878:	d901      	bls.n	800787e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800787a:	2303      	movs	r3, #3
 800787c:	e018      	b.n	80078b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	2b00      	cmp	r3, #0
 8007884:	daf2      	bge.n	800786c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007886:	2300      	movs	r3, #0
 8007888:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2210      	movs	r2, #16
 800788e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	3301      	adds	r3, #1
 8007894:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800789c:	d901      	bls.n	80078a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e006      	b.n	80078b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	f003 0310 	and.w	r3, r3, #16
 80078aa:	2b10      	cmp	r3, #16
 80078ac:	d0f0      	beq.n	8007890 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3714      	adds	r7, #20
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	460b      	mov	r3, r1
 80078c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	78fb      	ldrb	r3, [r7, #3]
 80078d6:	68f9      	ldr	r1, [r7, #12]
 80078d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078dc:	4313      	orrs	r3, r2
 80078de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3714      	adds	r7, #20
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr

080078ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80078ee:	b480      	push	{r7}
 80078f0:	b087      	sub	sp, #28
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f003 0306 	and.w	r3, r3, #6
 8007906:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d102      	bne.n	8007914 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800790e:	2300      	movs	r3, #0
 8007910:	75fb      	strb	r3, [r7, #23]
 8007912:	e00a      	b.n	800792a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2b02      	cmp	r3, #2
 8007918:	d002      	beq.n	8007920 <USB_GetDevSpeed+0x32>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2b06      	cmp	r3, #6
 800791e:	d102      	bne.n	8007926 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007920:	2302      	movs	r3, #2
 8007922:	75fb      	strb	r3, [r7, #23]
 8007924:	e001      	b.n	800792a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007926:	230f      	movs	r3, #15
 8007928:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800792a:	7dfb      	ldrb	r3, [r7, #23]
}
 800792c:	4618      	mov	r0, r3
 800792e:	371c      	adds	r7, #28
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	785b      	ldrb	r3, [r3, #1]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d13a      	bne.n	80079ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800795a:	69da      	ldr	r2, [r3, #28]
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	f003 030f 	and.w	r3, r3, #15
 8007964:	2101      	movs	r1, #1
 8007966:	fa01 f303 	lsl.w	r3, r1, r3
 800796a:	b29b      	uxth	r3, r3
 800796c:	68f9      	ldr	r1, [r7, #12]
 800796e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007972:	4313      	orrs	r3, r2
 8007974:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	4413      	add	r3, r2
 800797e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007988:	2b00      	cmp	r3, #0
 800798a:	d155      	bne.n	8007a38 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	015a      	lsls	r2, r3, #5
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	4413      	add	r3, r2
 8007994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	791b      	ldrb	r3, [r3, #4]
 80079a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80079a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	059b      	lsls	r3, r3, #22
 80079ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80079b0:	4313      	orrs	r3, r2
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	0151      	lsls	r1, r2, #5
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	440a      	add	r2, r1
 80079ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079c6:	6013      	str	r3, [r2, #0]
 80079c8:	e036      	b.n	8007a38 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079d0:	69da      	ldr	r2, [r3, #28]
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	f003 030f 	and.w	r3, r3, #15
 80079da:	2101      	movs	r1, #1
 80079dc:	fa01 f303 	lsl.w	r3, r1, r3
 80079e0:	041b      	lsls	r3, r3, #16
 80079e2:	68f9      	ldr	r1, [r7, #12]
 80079e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079e8:	4313      	orrs	r3, r2
 80079ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	015a      	lsls	r2, r3, #5
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4413      	add	r3, r2
 80079f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d11a      	bne.n	8007a38 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	015a      	lsls	r2, r3, #5
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	4413      	add	r3, r2
 8007a0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	791b      	ldrb	r3, [r3, #4]
 8007a1c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007a1e:	430b      	orrs	r3, r1
 8007a20:	4313      	orrs	r3, r2
 8007a22:	68ba      	ldr	r2, [r7, #8]
 8007a24:	0151      	lsls	r1, r2, #5
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	440a      	add	r2, r1
 8007a2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a36:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3714      	adds	r7, #20
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
	...

08007a48 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	785b      	ldrb	r3, [r3, #1]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d161      	bne.n	8007b28 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a7a:	d11f      	bne.n	8007abc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	015a      	lsls	r2, r3, #5
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	4413      	add	r3, r2
 8007a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	0151      	lsls	r1, r2, #5
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	440a      	add	r2, r1
 8007a92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a96:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007a9a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	0151      	lsls	r1, r2, #5
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	440a      	add	r2, r1
 8007ab2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ab6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007aba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ac2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	f003 030f 	and.w	r3, r3, #15
 8007acc:	2101      	movs	r1, #1
 8007ace:	fa01 f303 	lsl.w	r3, r1, r3
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	43db      	mvns	r3, r3
 8007ad6:	68f9      	ldr	r1, [r7, #12]
 8007ad8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007adc:	4013      	ands	r3, r2
 8007ade:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ae6:	69da      	ldr	r2, [r3, #28]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	f003 030f 	and.w	r3, r3, #15
 8007af0:	2101      	movs	r1, #1
 8007af2:	fa01 f303 	lsl.w	r3, r1, r3
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	43db      	mvns	r3, r3
 8007afa:	68f9      	ldr	r1, [r7, #12]
 8007afc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b00:	4013      	ands	r3, r2
 8007b02:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	015a      	lsls	r2, r3, #5
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	0159      	lsls	r1, r3, #5
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	440b      	add	r3, r1
 8007b1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b1e:	4619      	mov	r1, r3
 8007b20:	4b35      	ldr	r3, [pc, #212]	@ (8007bf8 <USB_DeactivateEndpoint+0x1b0>)
 8007b22:	4013      	ands	r3, r2
 8007b24:	600b      	str	r3, [r1, #0]
 8007b26:	e060      	b.n	8007bea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	015a      	lsls	r2, r3, #5
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	4413      	add	r3, r2
 8007b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b3e:	d11f      	bne.n	8007b80 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	015a      	lsls	r2, r3, #5
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	0151      	lsls	r1, r2, #5
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	440a      	add	r2, r1
 8007b56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b5a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007b5e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	015a      	lsls	r2, r3, #5
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	4413      	add	r3, r2
 8007b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	0151      	lsls	r1, r2, #5
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	440a      	add	r2, r1
 8007b76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	f003 030f 	and.w	r3, r3, #15
 8007b90:	2101      	movs	r1, #1
 8007b92:	fa01 f303 	lsl.w	r3, r1, r3
 8007b96:	041b      	lsls	r3, r3, #16
 8007b98:	43db      	mvns	r3, r3
 8007b9a:	68f9      	ldr	r1, [r7, #12]
 8007b9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007baa:	69da      	ldr	r2, [r3, #28]
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	f003 030f 	and.w	r3, r3, #15
 8007bb4:	2101      	movs	r1, #1
 8007bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8007bba:	041b      	lsls	r3, r3, #16
 8007bbc:	43db      	mvns	r3, r3
 8007bbe:	68f9      	ldr	r1, [r7, #12]
 8007bc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	015a      	lsls	r2, r3, #5
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	4413      	add	r3, r2
 8007bd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	0159      	lsls	r1, r3, #5
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	440b      	add	r3, r1
 8007bde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007be2:	4619      	mov	r1, r3
 8007be4:	4b05      	ldr	r3, [pc, #20]	@ (8007bfc <USB_DeactivateEndpoint+0x1b4>)
 8007be6:	4013      	ands	r3, r2
 8007be8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3714      	adds	r7, #20
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr
 8007bf8:	ec337800 	.word	0xec337800
 8007bfc:	eff37800 	.word	0xeff37800

08007c00 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b08a      	sub	sp, #40	@ 0x28
 8007c04:	af02      	add	r7, sp, #8
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	785b      	ldrb	r3, [r3, #1]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	f040 817f 	bne.w	8007f20 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d132      	bne.n	8007c90 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	015a      	lsls	r2, r3, #5
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	4413      	add	r3, r2
 8007c32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	69ba      	ldr	r2, [r7, #24]
 8007c3a:	0151      	lsls	r1, r2, #5
 8007c3c:	69fa      	ldr	r2, [r7, #28]
 8007c3e:	440a      	add	r2, r1
 8007c40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c44:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007c48:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007c4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	015a      	lsls	r2, r3, #5
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	4413      	add	r3, r2
 8007c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	69ba      	ldr	r2, [r7, #24]
 8007c5e:	0151      	lsls	r1, r2, #5
 8007c60:	69fa      	ldr	r2, [r7, #28]
 8007c62:	440a      	add	r2, r1
 8007c64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	015a      	lsls	r2, r3, #5
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	4413      	add	r3, r2
 8007c76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	69ba      	ldr	r2, [r7, #24]
 8007c7e:	0151      	lsls	r1, r2, #5
 8007c80:	69fa      	ldr	r2, [r7, #28]
 8007c82:	440a      	add	r2, r1
 8007c84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c88:	0cdb      	lsrs	r3, r3, #19
 8007c8a:	04db      	lsls	r3, r3, #19
 8007c8c:	6113      	str	r3, [r2, #16]
 8007c8e:	e097      	b.n	8007dc0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	015a      	lsls	r2, r3, #5
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	4413      	add	r3, r2
 8007c98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	69ba      	ldr	r2, [r7, #24]
 8007ca0:	0151      	lsls	r1, r2, #5
 8007ca2:	69fa      	ldr	r2, [r7, #28]
 8007ca4:	440a      	add	r2, r1
 8007ca6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007caa:	0cdb      	lsrs	r3, r3, #19
 8007cac:	04db      	lsls	r3, r3, #19
 8007cae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	015a      	lsls	r2, r3, #5
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	69ba      	ldr	r2, [r7, #24]
 8007cc0:	0151      	lsls	r1, r2, #5
 8007cc2:	69fa      	ldr	r2, [r7, #28]
 8007cc4:	440a      	add	r2, r1
 8007cc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cca:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007cce:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007cd2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d11a      	bne.n	8007d10 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	691a      	ldr	r2, [r3, #16]
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d903      	bls.n	8007cee <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	689a      	ldr	r2, [r3, #8]
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	015a      	lsls	r2, r3, #5
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	69ba      	ldr	r2, [r7, #24]
 8007cfe:	0151      	lsls	r1, r2, #5
 8007d00:	69fa      	ldr	r2, [r7, #28]
 8007d02:	440a      	add	r2, r1
 8007d04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007d0c:	6113      	str	r3, [r2, #16]
 8007d0e:	e044      	b.n	8007d9a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	691a      	ldr	r2, [r3, #16]
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	4413      	add	r3, r2
 8007d1a:	1e5a      	subs	r2, r3, #1
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d24:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	015a      	lsls	r2, r3, #5
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d32:	691a      	ldr	r2, [r3, #16]
 8007d34:	8afb      	ldrh	r3, [r7, #22]
 8007d36:	04d9      	lsls	r1, r3, #19
 8007d38:	4ba4      	ldr	r3, [pc, #656]	@ (8007fcc <USB_EPStartXfer+0x3cc>)
 8007d3a:	400b      	ands	r3, r1
 8007d3c:	69b9      	ldr	r1, [r7, #24]
 8007d3e:	0148      	lsls	r0, r1, #5
 8007d40:	69f9      	ldr	r1, [r7, #28]
 8007d42:	4401      	add	r1, r0
 8007d44:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	791b      	ldrb	r3, [r3, #4]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d122      	bne.n	8007d9a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	015a      	lsls	r2, r3, #5
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	69ba      	ldr	r2, [r7, #24]
 8007d64:	0151      	lsls	r1, r2, #5
 8007d66:	69fa      	ldr	r2, [r7, #28]
 8007d68:	440a      	add	r2, r1
 8007d6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d6e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007d72:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	015a      	lsls	r2, r3, #5
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d80:	691a      	ldr	r2, [r3, #16]
 8007d82:	8afb      	ldrh	r3, [r7, #22]
 8007d84:	075b      	lsls	r3, r3, #29
 8007d86:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007d8a:	69b9      	ldr	r1, [r7, #24]
 8007d8c:	0148      	lsls	r0, r1, #5
 8007d8e:	69f9      	ldr	r1, [r7, #28]
 8007d90:	4401      	add	r1, r0
 8007d92:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007d96:	4313      	orrs	r3, r2
 8007d98:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007da6:	691a      	ldr	r2, [r3, #16]
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007db0:	69b9      	ldr	r1, [r7, #24]
 8007db2:	0148      	lsls	r0, r1, #5
 8007db4:	69f9      	ldr	r1, [r7, #28]
 8007db6:	4401      	add	r1, r0
 8007db8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007dc0:	79fb      	ldrb	r3, [r7, #7]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d14b      	bne.n	8007e5e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	69db      	ldr	r3, [r3, #28]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d009      	beq.n	8007de2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	015a      	lsls	r2, r3, #5
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dda:	461a      	mov	r2, r3
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	69db      	ldr	r3, [r3, #28]
 8007de0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	791b      	ldrb	r3, [r3, #4]
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d128      	bne.n	8007e3c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d110      	bne.n	8007e1c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	015a      	lsls	r2, r3, #5
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	4413      	add	r3, r2
 8007e02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	69ba      	ldr	r2, [r7, #24]
 8007e0a:	0151      	lsls	r1, r2, #5
 8007e0c:	69fa      	ldr	r2, [r7, #28]
 8007e0e:	440a      	add	r2, r1
 8007e10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007e18:	6013      	str	r3, [r2, #0]
 8007e1a:	e00f      	b.n	8007e3c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	015a      	lsls	r2, r3, #5
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	4413      	add	r3, r2
 8007e24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	69ba      	ldr	r2, [r7, #24]
 8007e2c:	0151      	lsls	r1, r2, #5
 8007e2e:	69fa      	ldr	r2, [r7, #28]
 8007e30:	440a      	add	r2, r1
 8007e32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e3a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	015a      	lsls	r2, r3, #5
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	4413      	add	r3, r2
 8007e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	69ba      	ldr	r2, [r7, #24]
 8007e4c:	0151      	lsls	r1, r2, #5
 8007e4e:	69fa      	ldr	r2, [r7, #28]
 8007e50:	440a      	add	r2, r1
 8007e52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e56:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007e5a:	6013      	str	r3, [r2, #0]
 8007e5c:	e166      	b.n	800812c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	015a      	lsls	r2, r3, #5
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	4413      	add	r3, r2
 8007e66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	69ba      	ldr	r2, [r7, #24]
 8007e6e:	0151      	lsls	r1, r2, #5
 8007e70:	69fa      	ldr	r2, [r7, #28]
 8007e72:	440a      	add	r2, r1
 8007e74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e78:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007e7c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	791b      	ldrb	r3, [r3, #4]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d015      	beq.n	8007eb2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f000 814e 	beq.w	800812c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	f003 030f 	and.w	r3, r3, #15
 8007ea0:	2101      	movs	r1, #1
 8007ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ea6:	69f9      	ldr	r1, [r7, #28]
 8007ea8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007eac:	4313      	orrs	r3, r2
 8007eae:	634b      	str	r3, [r1, #52]	@ 0x34
 8007eb0:	e13c      	b.n	800812c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d110      	bne.n	8007ee4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	015a      	lsls	r2, r3, #5
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	4413      	add	r3, r2
 8007eca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	0151      	lsls	r1, r2, #5
 8007ed4:	69fa      	ldr	r2, [r7, #28]
 8007ed6:	440a      	add	r2, r1
 8007ed8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007edc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007ee0:	6013      	str	r3, [r2, #0]
 8007ee2:	e00f      	b.n	8007f04 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	015a      	lsls	r2, r3, #5
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	4413      	add	r3, r2
 8007eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	69ba      	ldr	r2, [r7, #24]
 8007ef4:	0151      	lsls	r1, r2, #5
 8007ef6:	69fa      	ldr	r2, [r7, #28]
 8007ef8:	440a      	add	r2, r1
 8007efa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f02:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	68d9      	ldr	r1, [r3, #12]
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	781a      	ldrb	r2, [r3, #0]
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	b298      	uxth	r0, r3
 8007f12:	79fb      	ldrb	r3, [r7, #7]
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	4603      	mov	r3, r0
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f000 f9b9 	bl	8008290 <USB_WritePacket>
 8007f1e:	e105      	b.n	800812c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007f20:	69bb      	ldr	r3, [r7, #24]
 8007f22:	015a      	lsls	r2, r3, #5
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	4413      	add	r3, r2
 8007f28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	69ba      	ldr	r2, [r7, #24]
 8007f30:	0151      	lsls	r1, r2, #5
 8007f32:	69fa      	ldr	r2, [r7, #28]
 8007f34:	440a      	add	r2, r1
 8007f36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f3a:	0cdb      	lsrs	r3, r3, #19
 8007f3c:	04db      	lsls	r3, r3, #19
 8007f3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	015a      	lsls	r2, r3, #5
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	4413      	add	r3, r2
 8007f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	69ba      	ldr	r2, [r7, #24]
 8007f50:	0151      	lsls	r1, r2, #5
 8007f52:	69fa      	ldr	r2, [r7, #28]
 8007f54:	440a      	add	r2, r1
 8007f56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f5a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007f5e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007f62:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d132      	bne.n	8007fd0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d003      	beq.n	8007f7a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	689a      	ldr	r2, [r3, #8]
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	689a      	ldr	r2, [r3, #8]
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	015a      	lsls	r2, r3, #5
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	4413      	add	r3, r2
 8007f8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f8e:	691a      	ldr	r2, [r3, #16]
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	6a1b      	ldr	r3, [r3, #32]
 8007f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f98:	69b9      	ldr	r1, [r7, #24]
 8007f9a:	0148      	lsls	r0, r1, #5
 8007f9c:	69f9      	ldr	r1, [r7, #28]
 8007f9e:	4401      	add	r1, r0
 8007fa0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	015a      	lsls	r2, r3, #5
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	4413      	add	r3, r2
 8007fb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	69ba      	ldr	r2, [r7, #24]
 8007fb8:	0151      	lsls	r1, r2, #5
 8007fba:	69fa      	ldr	r2, [r7, #28]
 8007fbc:	440a      	add	r2, r1
 8007fbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fc2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007fc6:	6113      	str	r3, [r2, #16]
 8007fc8:	e062      	b.n	8008090 <USB_EPStartXfer+0x490>
 8007fca:	bf00      	nop
 8007fcc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d123      	bne.n	8008020 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	015a      	lsls	r2, r3, #5
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	4413      	add	r3, r2
 8007fe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fe4:	691a      	ldr	r2, [r3, #16]
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fee:	69b9      	ldr	r1, [r7, #24]
 8007ff0:	0148      	lsls	r0, r1, #5
 8007ff2:	69f9      	ldr	r1, [r7, #28]
 8007ff4:	4401      	add	r1, r0
 8007ff6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	015a      	lsls	r2, r3, #5
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	4413      	add	r3, r2
 8008006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	69ba      	ldr	r2, [r7, #24]
 800800e:	0151      	lsls	r1, r2, #5
 8008010:	69fa      	ldr	r2, [r7, #28]
 8008012:	440a      	add	r2, r1
 8008014:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008018:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800801c:	6113      	str	r3, [r2, #16]
 800801e:	e037      	b.n	8008090 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	691a      	ldr	r2, [r3, #16]
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	4413      	add	r3, r2
 800802a:	1e5a      	subs	r2, r3, #1
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	fbb2 f3f3 	udiv	r3, r2, r3
 8008034:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	8afa      	ldrh	r2, [r7, #22]
 800803c:	fb03 f202 	mul.w	r2, r3, r2
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	015a      	lsls	r2, r3, #5
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	4413      	add	r3, r2
 800804c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008050:	691a      	ldr	r2, [r3, #16]
 8008052:	8afb      	ldrh	r3, [r7, #22]
 8008054:	04d9      	lsls	r1, r3, #19
 8008056:	4b38      	ldr	r3, [pc, #224]	@ (8008138 <USB_EPStartXfer+0x538>)
 8008058:	400b      	ands	r3, r1
 800805a:	69b9      	ldr	r1, [r7, #24]
 800805c:	0148      	lsls	r0, r1, #5
 800805e:	69f9      	ldr	r1, [r7, #28]
 8008060:	4401      	add	r1, r0
 8008062:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008066:	4313      	orrs	r3, r2
 8008068:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	015a      	lsls	r2, r3, #5
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	4413      	add	r3, r2
 8008072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008076:	691a      	ldr	r2, [r3, #16]
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	6a1b      	ldr	r3, [r3, #32]
 800807c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008080:	69b9      	ldr	r1, [r7, #24]
 8008082:	0148      	lsls	r0, r1, #5
 8008084:	69f9      	ldr	r1, [r7, #28]
 8008086:	4401      	add	r1, r0
 8008088:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800808c:	4313      	orrs	r3, r2
 800808e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008090:	79fb      	ldrb	r3, [r7, #7]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d10d      	bne.n	80080b2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d009      	beq.n	80080b2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	68d9      	ldr	r1, [r3, #12]
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	015a      	lsls	r2, r3, #5
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	4413      	add	r3, r2
 80080aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ae:	460a      	mov	r2, r1
 80080b0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	791b      	ldrb	r3, [r3, #4]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d128      	bne.n	800810c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d110      	bne.n	80080ec <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	015a      	lsls	r2, r3, #5
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	4413      	add	r3, r2
 80080d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	69ba      	ldr	r2, [r7, #24]
 80080da:	0151      	lsls	r1, r2, #5
 80080dc:	69fa      	ldr	r2, [r7, #28]
 80080de:	440a      	add	r2, r1
 80080e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80080e8:	6013      	str	r3, [r2, #0]
 80080ea:	e00f      	b.n	800810c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	015a      	lsls	r2, r3, #5
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	4413      	add	r3, r2
 80080f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	0151      	lsls	r1, r2, #5
 80080fe:	69fa      	ldr	r2, [r7, #28]
 8008100:	440a      	add	r2, r1
 8008102:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008106:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800810a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	015a      	lsls	r2, r3, #5
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	4413      	add	r3, r2
 8008114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	69ba      	ldr	r2, [r7, #24]
 800811c:	0151      	lsls	r1, r2, #5
 800811e:	69fa      	ldr	r2, [r7, #28]
 8008120:	440a      	add	r2, r1
 8008122:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008126:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800812a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3720      	adds	r7, #32
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	1ff80000 	.word	0x1ff80000

0800813c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800813c:	b480      	push	{r7}
 800813e:	b087      	sub	sp, #28
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008146:	2300      	movs	r3, #0
 8008148:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800814a:	2300      	movs	r3, #0
 800814c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	785b      	ldrb	r3, [r3, #1]
 8008156:	2b01      	cmp	r3, #1
 8008158:	d14a      	bne.n	80081f0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	015a      	lsls	r2, r3, #5
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	4413      	add	r3, r2
 8008164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800816e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008172:	f040 8086 	bne.w	8008282 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	015a      	lsls	r2, r3, #5
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	4413      	add	r3, r2
 8008180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	683a      	ldr	r2, [r7, #0]
 8008188:	7812      	ldrb	r2, [r2, #0]
 800818a:	0151      	lsls	r1, r2, #5
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	440a      	add	r2, r1
 8008190:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008194:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008198:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	015a      	lsls	r2, r3, #5
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	4413      	add	r3, r2
 80081a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	7812      	ldrb	r2, [r2, #0]
 80081ae:	0151      	lsls	r1, r2, #5
 80081b0:	693a      	ldr	r2, [r7, #16]
 80081b2:	440a      	add	r2, r1
 80081b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80081bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	3301      	adds	r3, #1
 80081c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d902      	bls.n	80081d4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	75fb      	strb	r3, [r7, #23]
          break;
 80081d2:	e056      	b.n	8008282 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	015a      	lsls	r2, r3, #5
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	4413      	add	r3, r2
 80081de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081ec:	d0e7      	beq.n	80081be <USB_EPStopXfer+0x82>
 80081ee:	e048      	b.n	8008282 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	015a      	lsls	r2, r3, #5
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	4413      	add	r3, r2
 80081fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008204:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008208:	d13b      	bne.n	8008282 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	015a      	lsls	r2, r3, #5
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	4413      	add	r3, r2
 8008214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	683a      	ldr	r2, [r7, #0]
 800821c:	7812      	ldrb	r2, [r2, #0]
 800821e:	0151      	lsls	r1, r2, #5
 8008220:	693a      	ldr	r2, [r7, #16]
 8008222:	440a      	add	r2, r1
 8008224:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008228:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800822c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	015a      	lsls	r2, r3, #5
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	4413      	add	r3, r2
 8008238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	683a      	ldr	r2, [r7, #0]
 8008240:	7812      	ldrb	r2, [r2, #0]
 8008242:	0151      	lsls	r1, r2, #5
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	440a      	add	r2, r1
 8008248:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800824c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008250:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	3301      	adds	r3, #1
 8008256:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800825e:	4293      	cmp	r3, r2
 8008260:	d902      	bls.n	8008268 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	75fb      	strb	r3, [r7, #23]
          break;
 8008266:	e00c      	b.n	8008282 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	015a      	lsls	r2, r3, #5
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	4413      	add	r3, r2
 8008272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800827c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008280:	d0e7      	beq.n	8008252 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008282:	7dfb      	ldrb	r3, [r7, #23]
}
 8008284:	4618      	mov	r0, r3
 8008286:	371c      	adds	r7, #28
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008290:	b480      	push	{r7}
 8008292:	b089      	sub	sp, #36	@ 0x24
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	4611      	mov	r1, r2
 800829c:	461a      	mov	r2, r3
 800829e:	460b      	mov	r3, r1
 80082a0:	71fb      	strb	r3, [r7, #7]
 80082a2:	4613      	mov	r3, r2
 80082a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80082ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d123      	bne.n	80082fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80082b6:	88bb      	ldrh	r3, [r7, #4]
 80082b8:	3303      	adds	r3, #3
 80082ba:	089b      	lsrs	r3, r3, #2
 80082bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80082be:	2300      	movs	r3, #0
 80082c0:	61bb      	str	r3, [r7, #24]
 80082c2:	e018      	b.n	80082f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80082c4:	79fb      	ldrb	r3, [r7, #7]
 80082c6:	031a      	lsls	r2, r3, #12
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	4413      	add	r3, r2
 80082cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082d0:	461a      	mov	r2, r3
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	3301      	adds	r3, #1
 80082dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	3301      	adds	r3, #1
 80082e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	3301      	adds	r3, #1
 80082e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	3301      	adds	r3, #1
 80082ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	3301      	adds	r3, #1
 80082f4:	61bb      	str	r3, [r7, #24]
 80082f6:	69ba      	ldr	r2, [r7, #24]
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d3e2      	bcc.n	80082c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3724      	adds	r7, #36	@ 0x24
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800830c:	b480      	push	{r7}
 800830e:	b08b      	sub	sp, #44	@ 0x2c
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	4613      	mov	r3, r2
 8008318:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008322:	88fb      	ldrh	r3, [r7, #6]
 8008324:	089b      	lsrs	r3, r3, #2
 8008326:	b29b      	uxth	r3, r3
 8008328:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800832a:	88fb      	ldrh	r3, [r7, #6]
 800832c:	f003 0303 	and.w	r3, r3, #3
 8008330:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008332:	2300      	movs	r3, #0
 8008334:	623b      	str	r3, [r7, #32]
 8008336:	e014      	b.n	8008362 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008342:	601a      	str	r2, [r3, #0]
    pDest++;
 8008344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008346:	3301      	adds	r3, #1
 8008348:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800834a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800834c:	3301      	adds	r3, #1
 800834e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008352:	3301      	adds	r3, #1
 8008354:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008358:	3301      	adds	r3, #1
 800835a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800835c:	6a3b      	ldr	r3, [r7, #32]
 800835e:	3301      	adds	r3, #1
 8008360:	623b      	str	r3, [r7, #32]
 8008362:	6a3a      	ldr	r2, [r7, #32]
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	429a      	cmp	r2, r3
 8008368:	d3e6      	bcc.n	8008338 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800836a:	8bfb      	ldrh	r3, [r7, #30]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d01e      	beq.n	80083ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008370:	2300      	movs	r3, #0
 8008372:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800837a:	461a      	mov	r2, r3
 800837c:	f107 0310 	add.w	r3, r7, #16
 8008380:	6812      	ldr	r2, [r2, #0]
 8008382:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008384:	693a      	ldr	r2, [r7, #16]
 8008386:	6a3b      	ldr	r3, [r7, #32]
 8008388:	b2db      	uxtb	r3, r3
 800838a:	00db      	lsls	r3, r3, #3
 800838c:	fa22 f303 	lsr.w	r3, r2, r3
 8008390:	b2da      	uxtb	r2, r3
 8008392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008394:	701a      	strb	r2, [r3, #0]
      i++;
 8008396:	6a3b      	ldr	r3, [r7, #32]
 8008398:	3301      	adds	r3, #1
 800839a:	623b      	str	r3, [r7, #32]
      pDest++;
 800839c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839e:	3301      	adds	r3, #1
 80083a0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80083a2:	8bfb      	ldrh	r3, [r7, #30]
 80083a4:	3b01      	subs	r3, #1
 80083a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80083a8:	8bfb      	ldrh	r3, [r7, #30]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1ea      	bne.n	8008384 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80083ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	372c      	adds	r7, #44	@ 0x2c
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	785b      	ldrb	r3, [r3, #1]
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d12c      	bne.n	8008432 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	015a      	lsls	r2, r3, #5
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	4413      	add	r3, r2
 80083e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	db12      	blt.n	8008410 <USB_EPSetStall+0x54>
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00f      	beq.n	8008410 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	015a      	lsls	r2, r3, #5
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	4413      	add	r3, r2
 80083f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	68ba      	ldr	r2, [r7, #8]
 8008400:	0151      	lsls	r1, r2, #5
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	440a      	add	r2, r1
 8008406:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800840a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800840e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	015a      	lsls	r2, r3, #5
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	4413      	add	r3, r2
 8008418:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	0151      	lsls	r1, r2, #5
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	440a      	add	r2, r1
 8008426:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800842a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800842e:	6013      	str	r3, [r2, #0]
 8008430:	e02b      	b.n	800848a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	015a      	lsls	r2, r3, #5
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	4413      	add	r3, r2
 800843a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	db12      	blt.n	800846a <USB_EPSetStall+0xae>
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d00f      	beq.n	800846a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	015a      	lsls	r2, r3, #5
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	4413      	add	r3, r2
 8008452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68ba      	ldr	r2, [r7, #8]
 800845a:	0151      	lsls	r1, r2, #5
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	440a      	add	r2, r1
 8008460:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008464:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008468:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	015a      	lsls	r2, r3, #5
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	4413      	add	r3, r2
 8008472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	0151      	lsls	r1, r2, #5
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	440a      	add	r2, r1
 8008480:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008484:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008488:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3714      	adds	r7, #20
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	785b      	ldrb	r3, [r3, #1]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d128      	bne.n	8008506 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	015a      	lsls	r2, r3, #5
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	4413      	add	r3, r2
 80084bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	0151      	lsls	r1, r2, #5
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	440a      	add	r2, r1
 80084ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80084d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	791b      	ldrb	r3, [r3, #4]
 80084d8:	2b03      	cmp	r3, #3
 80084da:	d003      	beq.n	80084e4 <USB_EPClearStall+0x4c>
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	791b      	ldrb	r3, [r3, #4]
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d138      	bne.n	8008556 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	015a      	lsls	r2, r3, #5
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	4413      	add	r3, r2
 80084ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68ba      	ldr	r2, [r7, #8]
 80084f4:	0151      	lsls	r1, r2, #5
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	440a      	add	r2, r1
 80084fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008502:	6013      	str	r3, [r2, #0]
 8008504:	e027      	b.n	8008556 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	4413      	add	r3, r2
 800850e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68ba      	ldr	r2, [r7, #8]
 8008516:	0151      	lsls	r1, r2, #5
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	440a      	add	r2, r1
 800851c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008520:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008524:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	791b      	ldrb	r3, [r3, #4]
 800852a:	2b03      	cmp	r3, #3
 800852c:	d003      	beq.n	8008536 <USB_EPClearStall+0x9e>
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	791b      	ldrb	r3, [r3, #4]
 8008532:	2b02      	cmp	r3, #2
 8008534:	d10f      	bne.n	8008556 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	015a      	lsls	r2, r3, #5
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	4413      	add	r3, r2
 800853e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68ba      	ldr	r2, [r7, #8]
 8008546:	0151      	lsls	r1, r2, #5
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	440a      	add	r2, r1
 800854c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008554:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3714      	adds	r7, #20
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	460b      	mov	r3, r1
 800856e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008582:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008586:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	78fb      	ldrb	r3, [r7, #3]
 8008592:	011b      	lsls	r3, r3, #4
 8008594:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008598:	68f9      	ldr	r1, [r7, #12]
 800859a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800859e:	4313      	orrs	r3, r2
 80085a0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3714      	adds	r7, #20
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80085ca:	f023 0303 	bic.w	r3, r3, #3
 80085ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	68fa      	ldr	r2, [r7, #12]
 80085da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80085de:	f023 0302 	bic.w	r3, r3, #2
 80085e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3714      	adds	r7, #20
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr

080085f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80085f2:	b480      	push	{r7}
 80085f4:	b085      	sub	sp, #20
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800860c:	f023 0303 	bic.w	r3, r3, #3
 8008610:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008620:	f043 0302 	orr.w	r3, r3, #2
 8008624:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3714      	adds	r7, #20
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	695b      	ldr	r3, [r3, #20]
 8008640:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	4013      	ands	r3, r2
 800864a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800864c:	68fb      	ldr	r3, [r7, #12]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3714      	adds	r7, #20
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr

0800865a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800865a:	b480      	push	{r7}
 800865c:	b085      	sub	sp, #20
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800866c:	699b      	ldr	r3, [r3, #24]
 800866e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008676:	69db      	ldr	r3, [r3, #28]
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	4013      	ands	r3, r2
 800867c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	0c1b      	lsrs	r3, r3, #16
}
 8008682:	4618      	mov	r0, r3
 8008684:	3714      	adds	r7, #20
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr

0800868e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800868e:	b480      	push	{r7}
 8008690:	b085      	sub	sp, #20
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086a0:	699b      	ldr	r3, [r3, #24]
 80086a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086aa:	69db      	ldr	r3, [r3, #28]
 80086ac:	68ba      	ldr	r2, [r7, #8]
 80086ae:	4013      	ands	r3, r2
 80086b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	b29b      	uxth	r3, r3
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3714      	adds	r7, #20
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr

080086c2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80086c2:	b480      	push	{r7}
 80086c4:	b085      	sub	sp, #20
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
 80086ca:	460b      	mov	r3, r1
 80086cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80086d2:	78fb      	ldrb	r3, [r7, #3]
 80086d4:	015a      	lsls	r2, r3, #5
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	4413      	add	r3, r2
 80086da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	68ba      	ldr	r2, [r7, #8]
 80086ec:	4013      	ands	r3, r2
 80086ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80086f0:	68bb      	ldr	r3, [r7, #8]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3714      	adds	r7, #20
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr

080086fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80086fe:	b480      	push	{r7}
 8008700:	b087      	sub	sp, #28
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	460b      	mov	r3, r1
 8008708:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800871e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008720:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008722:	78fb      	ldrb	r3, [r7, #3]
 8008724:	f003 030f 	and.w	r3, r3, #15
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	fa22 f303 	lsr.w	r3, r2, r3
 800872e:	01db      	lsls	r3, r3, #7
 8008730:	b2db      	uxtb	r3, r3
 8008732:	693a      	ldr	r2, [r7, #16]
 8008734:	4313      	orrs	r3, r2
 8008736:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008738:	78fb      	ldrb	r3, [r7, #3]
 800873a:	015a      	lsls	r2, r3, #5
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	4413      	add	r3, r2
 8008740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	693a      	ldr	r2, [r7, #16]
 8008748:	4013      	ands	r3, r2
 800874a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800874c:	68bb      	ldr	r3, [r7, #8]
}
 800874e:	4618      	mov	r0, r3
 8008750:	371c      	adds	r7, #28
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800875a:	b480      	push	{r7}
 800875c:	b083      	sub	sp, #12
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	695b      	ldr	r3, [r3, #20]
 8008766:	f003 0301 	and.w	r3, r3, #1
}
 800876a:	4618      	mov	r0, r3
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008776:	b480      	push	{r7}
 8008778:	b085      	sub	sp, #20
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	68fa      	ldr	r2, [r7, #12]
 800878c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008790:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008794:	f023 0307 	bic.w	r3, r3, #7
 8008798:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3714      	adds	r7, #20
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80087bc:	b480      	push	{r7}
 80087be:	b087      	sub	sp, #28
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	460b      	mov	r3, r1
 80087c6:	607a      	str	r2, [r7, #4]
 80087c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	333c      	adds	r3, #60	@ 0x3c
 80087d2:	3304      	adds	r3, #4
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	4a26      	ldr	r2, [pc, #152]	@ (8008874 <USB_EP0_OutStart+0xb8>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d90a      	bls.n	80087f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80087ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087f0:	d101      	bne.n	80087f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80087f2:	2300      	movs	r3, #0
 80087f4:	e037      	b.n	8008866 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087fc:	461a      	mov	r2, r3
 80087fe:	2300      	movs	r3, #0
 8008800:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008810:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008814:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	697a      	ldr	r2, [r7, #20]
 8008820:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008824:	f043 0318 	orr.w	r3, r3, #24
 8008828:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	697a      	ldr	r2, [r7, #20]
 8008834:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008838:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800883c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800883e:	7afb      	ldrb	r3, [r7, #11]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d10f      	bne.n	8008864 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800884a:	461a      	mov	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	697a      	ldr	r2, [r7, #20]
 800885a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800885e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008862:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	371c      	adds	r7, #28
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	4f54300a 	.word	0x4f54300a

08008878 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008880:	2300      	movs	r3, #0
 8008882:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	3301      	adds	r3, #1
 8008888:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008890:	d901      	bls.n	8008896 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e022      	b.n	80088dc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	2b00      	cmp	r3, #0
 800889c:	daf2      	bge.n	8008884 <USB_CoreReset+0xc>

  count = 10U;
 800889e:	230a      	movs	r3, #10
 80088a0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80088a2:	e002      	b.n	80088aa <USB_CoreReset+0x32>
  {
    count--;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	3b01      	subs	r3, #1
 80088a8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1f9      	bne.n	80088a4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	691b      	ldr	r3, [r3, #16]
 80088b4:	f043 0201 	orr.w	r2, r3, #1
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	3301      	adds	r3, #1
 80088c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80088c8:	d901      	bls.n	80088ce <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e006      	b.n	80088dc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	f003 0301 	and.w	r3, r3, #1
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d0f0      	beq.n	80088bc <USB_CoreReset+0x44>

  return HAL_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3714      	adds	r7, #20
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 80088ec:	f001 fc7a 	bl	800a1e4 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 80088f0:	2200      	movs	r2, #0
 80088f2:	4917      	ldr	r1, [pc, #92]	@ (8008950 <MX_USB_DEVICE_Init+0x68>)
 80088f4:	4817      	ldr	r0, [pc, #92]	@ (8008954 <MX_USB_DEVICE_Init+0x6c>)
 80088f6:	f002 f899 	bl	800aa2c <USBD_Init>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d001      	beq.n	8008904 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 8008900:	f7f8 fad4 	bl	8000eac <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 8008904:	4914      	ldr	r1, [pc, #80]	@ (8008958 <MX_USB_DEVICE_Init+0x70>)
 8008906:	4813      	ldr	r0, [pc, #76]	@ (8008954 <MX_USB_DEVICE_Init+0x6c>)
 8008908:	f002 f8bc 	bl	800aa84 <USBD_RegisterClass>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d001      	beq.n	8008916 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8008912:	f7f8 facb 	bl	8000eac <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 8008916:	4911      	ldr	r1, [pc, #68]	@ (800895c <MX_USB_DEVICE_Init+0x74>)
 8008918:	480e      	ldr	r0, [pc, #56]	@ (8008954 <MX_USB_DEVICE_Init+0x6c>)
 800891a:	f001 f93d 	bl	8009b98 <USBD_CDC_ACM_RegisterInterface>
 800891e:	4603      	mov	r3, r0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d001      	beq.n	8008928 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8008924:	f7f8 fac2 	bl	8000eac <Error_Handler>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDevice, &USBD_CustomHID_fops) != USBD_OK)
 8008928:	490d      	ldr	r1, [pc, #52]	@ (8008960 <MX_USB_DEVICE_Init+0x78>)
 800892a:	480a      	ldr	r0, [pc, #40]	@ (8008954 <MX_USB_DEVICE_Init+0x6c>)
 800892c:	f002 f830 	bl	800a990 <USBD_CUSTOM_HID_RegisterInterface>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d001      	beq.n	800893a <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
 8008936:	f7f8 fab9 	bl	8000eac <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 800893a:	4806      	ldr	r0, [pc, #24]	@ (8008954 <MX_USB_DEVICE_Init+0x6c>)
 800893c:	f002 f8e0 	bl	800ab00 <USBD_Start>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <MX_USB_DEVICE_Init+0x62>
  {
    Error_Handler();
 8008946:	f7f8 fab1 	bl	8000eac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800894a:	bf00      	nop
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	2000002c 	.word	0x2000002c
 8008954:	20000d50 	.word	0x20000d50
 8008958:	20000190 	.word	0x20000190
 800895c:	20000018 	.word	0x20000018
 8008960:	200000a0 	.word	0x200000a0

08008964 <CDC_CH_To_UART_Handle>:
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
UART_HandleTypeDef *CDC_CH_To_UART_Handle(uint8_t cdc_ch)
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
 800896a:	4603      	mov	r3, r0
 800896c:	71fb      	strb	r3, [r7, #7]
  UART_HandleTypeDef *handle = NULL;
 800896e:	2300      	movs	r3, #0
 8008970:	60fb      	str	r3, [r7, #12]

  if (cdc_ch == 0)
 8008972:	79fb      	ldrb	r3, [r7, #7]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d101      	bne.n	800897c <CDC_CH_To_UART_Handle+0x18>
  {
    handle = &huart5;
 8008978:	4b04      	ldr	r3, [pc, #16]	@ (800898c <CDC_CH_To_UART_Handle+0x28>)
 800897a:	60fb      	str	r3, [r7, #12]
  else if (cdc_ch == 2)
  {
    handle = &huart3;
  }
#endif
  return handle;
 800897c:	68fb      	ldr	r3, [r7, #12]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3714      	adds	r7, #20
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	20000760 	.word	0x20000760

08008990 <UART_Handle_TO_CDC_CH>:

uint8_t UART_Handle_TO_CDC_CH(UART_HandleTypeDef *handle)
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  uint8_t cdc_ch = 0;
 8008998:	2300      	movs	r3, #0
 800899a:	73fb      	strb	r3, [r7, #15]

  if (handle == &huart5)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a06      	ldr	r2, [pc, #24]	@ (80089b8 <UART_Handle_TO_CDC_CH+0x28>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d101      	bne.n	80089a8 <UART_Handle_TO_CDC_CH+0x18>
  {
    cdc_ch = 0;
 80089a4:	2300      	movs	r3, #0
 80089a6:	73fb      	strb	r3, [r7, #15]
  else if (handle == &huart3)
  {
    cdc_ch = 2;
  }
#endif
  return cdc_ch;
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3714      	adds	r7, #20
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	20000760 	.word	0x20000760

080089bc <Change_UART_Setting>:
//
void Change_UART_Setting(uint8_t cdc_ch)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b086      	sub	sp, #24
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	4603      	mov	r3, r0
 80089c4:	71fb      	strb	r3, [r7, #7]
  UART_HandleTypeDef *handle = CDC_CH_To_UART_Handle(cdc_ch);
 80089c6:	79fb      	ldrb	r3, [r7, #7]
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7ff ffcb 	bl	8008964 <CDC_CH_To_UART_Handle>
 80089ce:	6178      	str	r0, [r7, #20]

  if (HAL_UART_DeInit(handle) != HAL_OK)
 80089d0:	6978      	ldr	r0, [r7, #20]
 80089d2:	f7fd fbf7 	bl	80061c4 <HAL_UART_DeInit>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d001      	beq.n	80089e0 <Change_UART_Setting+0x24>
  {
    /* Initialization Error */
    Error_Handler();
 80089dc:	f7f8 fa66 	bl	8000eac <Error_Handler>
  }
  /* set the Stop bit */
  switch (Line_Coding[cdc_ch].format)
 80089e0:	79fb      	ldrb	r3, [r7, #7]
 80089e2:	4a5c      	ldr	r2, [pc, #368]	@ (8008b54 <Change_UART_Setting+0x198>)
 80089e4:	00db      	lsls	r3, r3, #3
 80089e6:	4413      	add	r3, r2
 80089e8:	791b      	ldrb	r3, [r3, #4]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d002      	beq.n	80089f4 <Change_UART_Setting+0x38>
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d004      	beq.n	80089fc <Change_UART_Setting+0x40>
 80089f2:	e008      	b.n	8008a06 <Change_UART_Setting+0x4a>
  {
  case 0:
    handle->Init.StopBits = UART_STOPBITS_1;
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	2200      	movs	r2, #0
 80089f8:	60da      	str	r2, [r3, #12]
    break;
 80089fa:	e008      	b.n	8008a0e <Change_UART_Setting+0x52>
  case 2:
    handle->Init.StopBits = UART_STOPBITS_2;
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008a02:	60da      	str	r2, [r3, #12]
    break;
 8008a04:	e003      	b.n	8008a0e <Change_UART_Setting+0x52>
  default:
    handle->Init.StopBits = UART_STOPBITS_1;
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	60da      	str	r2, [r3, #12]
    break;
 8008a0c:	bf00      	nop
  }

  /* set the parity bit*/
  switch (Line_Coding[cdc_ch].paritytype)
 8008a0e:	79fb      	ldrb	r3, [r7, #7]
 8008a10:	4a50      	ldr	r2, [pc, #320]	@ (8008b54 <Change_UART_Setting+0x198>)
 8008a12:	00db      	lsls	r3, r3, #3
 8008a14:	4413      	add	r3, r2
 8008a16:	795b      	ldrb	r3, [r3, #5]
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d00f      	beq.n	8008a3c <Change_UART_Setting+0x80>
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	dc12      	bgt.n	8008a46 <Change_UART_Setting+0x8a>
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d002      	beq.n	8008a2a <Change_UART_Setting+0x6e>
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d004      	beq.n	8008a32 <Change_UART_Setting+0x76>
 8008a28:	e00d      	b.n	8008a46 <Change_UART_Setting+0x8a>
  {
  case 0:
    handle->Init.Parity = UART_PARITY_NONE;
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	611a      	str	r2, [r3, #16]
    break;
 8008a30:	e00d      	b.n	8008a4e <Change_UART_Setting+0x92>
  case 1:
    handle->Init.Parity = UART_PARITY_ODD;
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8008a38:	611a      	str	r2, [r3, #16]
    break;
 8008a3a:	e008      	b.n	8008a4e <Change_UART_Setting+0x92>
  case 2:
    handle->Init.Parity = UART_PARITY_EVEN;
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008a42:	611a      	str	r2, [r3, #16]
    break;
 8008a44:	e003      	b.n	8008a4e <Change_UART_Setting+0x92>
  default:
    handle->Init.Parity = UART_PARITY_NONE;
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	611a      	str	r2, [r3, #16]
    break;
 8008a4c:	bf00      	nop
  }

  /*set the data type : only 8bits and 9bits is supported */
  switch (Line_Coding[cdc_ch].datatype)
 8008a4e:	79fb      	ldrb	r3, [r7, #7]
 8008a50:	4a40      	ldr	r2, [pc, #256]	@ (8008b54 <Change_UART_Setting+0x198>)
 8008a52:	00db      	lsls	r3, r3, #3
 8008a54:	4413      	add	r3, r2
 8008a56:	799b      	ldrb	r3, [r3, #6]
 8008a58:	2b07      	cmp	r3, #7
 8008a5a:	d002      	beq.n	8008a62 <Change_UART_Setting+0xa6>
 8008a5c:	2b08      	cmp	r3, #8
 8008a5e:	d004      	beq.n	8008a6a <Change_UART_Setting+0xae>
 8008a60:	e010      	b.n	8008a84 <Change_UART_Setting+0xc8>
  {
  case 0x07:
    /* With this configuration a parity (Even or Odd) must be set */
    handle->Init.WordLength = UART_WORDLENGTH_8B;
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	2200      	movs	r2, #0
 8008a66:	609a      	str	r2, [r3, #8]
    break;
 8008a68:	e010      	b.n	8008a8c <Change_UART_Setting+0xd0>
  case 0x08:
    if (handle->Init.Parity == UART_PARITY_NONE)
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d103      	bne.n	8008a7a <Change_UART_Setting+0xbe>
    {
      handle->Init.WordLength = UART_WORDLENGTH_8B;
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	2200      	movs	r2, #0
 8008a76:	609a      	str	r2, [r3, #8]
    else
    {
      handle->Init.WordLength = UART_WORDLENGTH_9B;
    }

    break;
 8008a78:	e008      	b.n	8008a8c <Change_UART_Setting+0xd0>
      handle->Init.WordLength = UART_WORDLENGTH_9B;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008a80:	609a      	str	r2, [r3, #8]
    break;
 8008a82:	e003      	b.n	8008a8c <Change_UART_Setting+0xd0>
  default:
    handle->Init.WordLength = UART_WORDLENGTH_8B;
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	2200      	movs	r2, #0
 8008a88:	609a      	str	r2, [r3, #8]
    break;
 8008a8a:	bf00      	nop
  }

  if (Line_Coding[cdc_ch].bitrate == 0)
 8008a8c:	79fb      	ldrb	r3, [r7, #7]
 8008a8e:	4a31      	ldr	r2, [pc, #196]	@ (8008b54 <Change_UART_Setting+0x198>)
 8008a90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d105      	bne.n	8008aa4 <Change_UART_Setting+0xe8>
  {
    Line_Coding[cdc_ch].bitrate = 115200;
 8008a98:	79fb      	ldrb	r3, [r7, #7]
 8008a9a:	4a2e      	ldr	r2, [pc, #184]	@ (8008b54 <Change_UART_Setting+0x198>)
 8008a9c:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8008aa0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
  }

  handle->Init.BaudRate = Line_Coding[cdc_ch].bitrate;
 8008aa4:	79fb      	ldrb	r3, [r7, #7]
 8008aa6:	4a2b      	ldr	r2, [pc, #172]	@ (8008b54 <Change_UART_Setting+0x198>)
 8008aa8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	605a      	str	r2, [r3, #4]
  handle->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	619a      	str	r2, [r3, #24]
  handle->Init.Mode = UART_MODE_TX_RX;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	220c      	movs	r2, #12
 8008aba:	615a      	str	r2, [r3, #20]
  handle->Init.OverSampling = UART_OVERSAMPLING_16;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(handle) != HAL_OK)
 8008ac2:	6978      	ldr	r0, [r7, #20]
 8008ac4:	f7fd fb2e 	bl	8006124 <HAL_UART_Init>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d001      	beq.n	8008ad2 <Change_UART_Setting+0x116>
  {
    /* Initialization Error */
    Error_Handler();
 8008ace:	f7f8 f9ed 	bl	8000eac <Error_Handler>
  }

  /** rx for uart and tx buffer of usb */
  if (HAL_UART_Receive_IT(handle, TX_Buffer[cdc_ch], 1) != HAL_OK)
 8008ad2:	79fb      	ldrb	r3, [r7, #7]
 8008ad4:	019b      	lsls	r3, r3, #6
 8008ad6:	4a20      	ldr	r2, [pc, #128]	@ (8008b58 <Change_UART_Setting+0x19c>)
 8008ad8:	4413      	add	r3, r2
 8008ada:	2201      	movs	r2, #1
 8008adc:	4619      	mov	r1, r3
 8008ade:	6978      	ldr	r0, [r7, #20]
 8008ae0:	f7fd fc2d 	bl	800633e <HAL_UART_Receive_IT>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <Change_UART_Setting+0x132>
  {
    /* Transfer error in reception process */
    Error_Handler();
 8008aea:	f7f8 f9df 	bl	8000eac <Error_Handler>
  }
  __HAL_UART_CLEAR_OREFLAG(handle);
 8008aee:	2300      	movs	r3, #0
 8008af0:	613b      	str	r3, [r7, #16]
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	613b      	str	r3, [r7, #16]
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	613b      	str	r3, [r7, #16]
 8008b02:	693b      	ldr	r3, [r7, #16]
  __HAL_UART_CLEAR_NEFLAG(handle);
 8008b04:	2300      	movs	r3, #0
 8008b06:	60fb      	str	r3, [r7, #12]
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	60fb      	str	r3, [r7, #12]
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	60fb      	str	r3, [r7, #12]
 8008b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_UART_CLEAR_FEFLAG(handle);
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	60bb      	str	r3, [r7, #8]
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	60bb      	str	r3, [r7, #8]
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	60bb      	str	r3, [r7, #8]
 8008b2e:	68bb      	ldr	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8008b30:	f3bf 8f4f 	dsb	sy
}
 8008b34:	bf00      	nop
  __DSB();  // Ensure instruction completion
  Write_Index[cdc_ch] = 0;
 8008b36:	79fb      	ldrb	r3, [r7, #7]
 8008b38:	4a08      	ldr	r2, [pc, #32]	@ (8008b5c <Change_UART_Setting+0x1a0>)
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  Read_Index[cdc_ch] = 0;
 8008b40:	79fb      	ldrb	r3, [r7, #7]
 8008b42:	4a07      	ldr	r2, [pc, #28]	@ (8008b60 <Change_UART_Setting+0x1a4>)
 8008b44:	2100      	movs	r1, #0
 8008b46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8008b4a:	bf00      	nop
 8008b4c:	3718      	adds	r7, #24
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	200010ec 	.word	0x200010ec
 8008b58:	200010ac 	.word	0x200010ac
 8008b5c:	200010f4 	.word	0x200010f4
 8008b60:	200010f8 	.word	0x200010f8

08008b64 <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 8008b6e:	79fb      	ldrb	r3, [r7, #7]
 8008b70:	019b      	lsls	r3, r3, #6
 8008b72:	4a0d      	ldr	r2, [pc, #52]	@ (8008ba8 <CDC_Init+0x44>)
 8008b74:	441a      	add	r2, r3
 8008b76:	79fb      	ldrb	r3, [r7, #7]
 8008b78:	490c      	ldr	r1, [pc, #48]	@ (8008bac <CDC_Init+0x48>)
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f001 f846 	bl	8009c0c <USBD_CDC_SetRxBuffer>

  //  /*##-2- Start the TIM Base generation in interrupt mode ####################*/
  //  /* Start Channel1 */
    if ((HAL_TIM_Base_Start_IT(&htim1) != HAL_OK )||(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK ))
 8008b80:	480b      	ldr	r0, [pc, #44]	@ (8008bb0 <CDC_Init+0x4c>)
 8008b82:	f7fc fe81 	bl	8005888 <HAL_TIM_Base_Start_IT>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d105      	bne.n	8008b98 <CDC_Init+0x34>
 8008b8c:	4809      	ldr	r0, [pc, #36]	@ (8008bb4 <CDC_Init+0x50>)
 8008b8e:	f7fc fe7b 	bl	8005888 <HAL_TIM_Base_Start_IT>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d001      	beq.n	8008b9c <CDC_Init+0x38>
    {
      /* Starting Error */
    	//HAL_TIM_Base_Stop_IT
      Error_Handler();
 8008b98:	f7f8 f988 	bl	8000eac <Error_Handler>
    }

  return (USBD_OK);
 8008b9c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	2000106c 	.word	0x2000106c
 8008bac:	20000d50 	.word	0x20000d50
 8008bb0:	20000640 	.word	0x20000640
 8008bb4:	20000688 	.word	0x20000688

08008bb8 <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  /* DeInitialize the UART peripheral */
    if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
 8008bc2:	79fb      	ldrb	r3, [r7, #7]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7ff fecd 	bl	8008964 <CDC_CH_To_UART_Handle>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f7fd faf9 	bl	80061c4 <HAL_UART_DeInit>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d001      	beq.n	8008bdc <CDC_DeInit+0x24>
    {
      /* Initialization Error */
      Error_Handler();
 8008bd8:	f7f8 f968 	bl	8000eac <Error_Handler>
    }
    if ((HAL_TIM_Base_Stop_IT(&htim1) != HAL_OK )||(HAL_TIM_Base_Stop_IT(&htim2) != HAL_OK ))
 8008bdc:	4809      	ldr	r0, [pc, #36]	@ (8008c04 <CDC_DeInit+0x4c>)
 8008bde:	f7fc fec3 	bl	8005968 <HAL_TIM_Base_Stop_IT>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d105      	bne.n	8008bf4 <CDC_DeInit+0x3c>
 8008be8:	4807      	ldr	r0, [pc, #28]	@ (8008c08 <CDC_DeInit+0x50>)
 8008bea:	f7fc febd 	bl	8005968 <HAL_TIM_Base_Stop_IT>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <CDC_DeInit+0x40>
        {
          /* Starting Error */
          Error_Handler();
 8008bf4:	f7f8 f95a 	bl	8000eac <Error_Handler>
        }
  return (USBD_OK);
 8008bf8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	20000640 	.word	0x20000640
 8008c08:	20000688 	.word	0x20000688

08008c0c <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	603a      	str	r2, [r7, #0]
 8008c14:	461a      	mov	r2, r3
 8008c16:	4603      	mov	r3, r0
 8008c18:	71fb      	strb	r3, [r7, #7]
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	71bb      	strb	r3, [r7, #6]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8008c22:	79bb      	ldrb	r3, [r7, #6]
 8008c24:	2b23      	cmp	r3, #35	@ 0x23
 8008c26:	f200 80ba 	bhi.w	8008d9e <CDC_Control+0x192>
 8008c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c30 <CDC_Control+0x24>)
 8008c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c30:	08008d9f 	.word	0x08008d9f
 8008c34:	08008d9f 	.word	0x08008d9f
 8008c38:	08008d9f 	.word	0x08008d9f
 8008c3c:	08008d9f 	.word	0x08008d9f
 8008c40:	08008d9f 	.word	0x08008d9f
 8008c44:	08008d9f 	.word	0x08008d9f
 8008c48:	08008d9f 	.word	0x08008d9f
 8008c4c:	08008d9f 	.word	0x08008d9f
 8008c50:	08008d9f 	.word	0x08008d9f
 8008c54:	08008d9f 	.word	0x08008d9f
 8008c58:	08008d9f 	.word	0x08008d9f
 8008c5c:	08008d9f 	.word	0x08008d9f
 8008c60:	08008d9f 	.word	0x08008d9f
 8008c64:	08008d9f 	.word	0x08008d9f
 8008c68:	08008d9f 	.word	0x08008d9f
 8008c6c:	08008d9f 	.word	0x08008d9f
 8008c70:	08008d9f 	.word	0x08008d9f
 8008c74:	08008d9f 	.word	0x08008d9f
 8008c78:	08008d9f 	.word	0x08008d9f
 8008c7c:	08008d9f 	.word	0x08008d9f
 8008c80:	08008d9f 	.word	0x08008d9f
 8008c84:	08008d9f 	.word	0x08008d9f
 8008c88:	08008d9f 	.word	0x08008d9f
 8008c8c:	08008d9f 	.word	0x08008d9f
 8008c90:	08008d9f 	.word	0x08008d9f
 8008c94:	08008d9f 	.word	0x08008d9f
 8008c98:	08008d9f 	.word	0x08008d9f
 8008c9c:	08008d9f 	.word	0x08008d9f
 8008ca0:	08008d9f 	.word	0x08008d9f
 8008ca4:	08008d9f 	.word	0x08008d9f
 8008ca8:	08008d9f 	.word	0x08008d9f
 8008cac:	08008d9f 	.word	0x08008d9f
 8008cb0:	08008cc1 	.word	0x08008cc1
 8008cb4:	08008d29 	.word	0x08008d29
 8008cb8:	08008d9f 	.word	0x08008d9f
 8008cbc:	08008d9f 	.word	0x08008d9f
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	021b      	lsls	r3, r3, #8
 8008cce:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	3302      	adds	r3, #2
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8008cd8:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	3303      	adds	r3, #3
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	061b      	lsls	r3, r3, #24
 8008ce2:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8008ce4:	79fb      	ldrb	r3, [r7, #7]
 8008ce6:	4611      	mov	r1, r2
 8008ce8:	4a30      	ldr	r2, [pc, #192]	@ (8008dac <CDC_Control+0x1a0>)
 8008cea:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 8008cee:	79fb      	ldrb	r3, [r7, #7]
 8008cf0:	683a      	ldr	r2, [r7, #0]
 8008cf2:	7911      	ldrb	r1, [r2, #4]
 8008cf4:	4a2d      	ldr	r2, [pc, #180]	@ (8008dac <CDC_Control+0x1a0>)
 8008cf6:	00db      	lsls	r3, r3, #3
 8008cf8:	4413      	add	r3, r2
 8008cfa:	460a      	mov	r2, r1
 8008cfc:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 8008cfe:	79fb      	ldrb	r3, [r7, #7]
 8008d00:	683a      	ldr	r2, [r7, #0]
 8008d02:	7951      	ldrb	r1, [r2, #5]
 8008d04:	4a29      	ldr	r2, [pc, #164]	@ (8008dac <CDC_Control+0x1a0>)
 8008d06:	00db      	lsls	r3, r3, #3
 8008d08:	4413      	add	r3, r2
 8008d0a:	460a      	mov	r2, r1
 8008d0c:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 8008d0e:	79fb      	ldrb	r3, [r7, #7]
 8008d10:	683a      	ldr	r2, [r7, #0]
 8008d12:	7991      	ldrb	r1, [r2, #6]
 8008d14:	4a25      	ldr	r2, [pc, #148]	@ (8008dac <CDC_Control+0x1a0>)
 8008d16:	00db      	lsls	r3, r3, #3
 8008d18:	4413      	add	r3, r2
 8008d1a:	460a      	mov	r2, r1
 8008d1c:	719a      	strb	r2, [r3, #6]

    Change_UART_Setting(cdc_ch);
 8008d1e:	79fb      	ldrb	r3, [r7, #7]
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7ff fe4b 	bl	80089bc <Change_UART_Setting>
    break;
 8008d26:	e03b      	b.n	8008da0 <CDC_Control+0x194>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 8008d28:	79fb      	ldrb	r3, [r7, #7]
 8008d2a:	4a20      	ldr	r2, [pc, #128]	@ (8008dac <CDC_Control+0x1a0>)
 8008d2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008d30:	b2da      	uxtb	r2, r3
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 8008d36:	79fb      	ldrb	r3, [r7, #7]
 8008d38:	4a1c      	ldr	r2, [pc, #112]	@ (8008dac <CDC_Control+0x1a0>)
 8008d3a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008d3e:	0a1a      	lsrs	r2, r3, #8
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	3301      	adds	r3, #1
 8008d44:	b2d2      	uxtb	r2, r2
 8008d46:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 8008d48:	79fb      	ldrb	r3, [r7, #7]
 8008d4a:	4a18      	ldr	r2, [pc, #96]	@ (8008dac <CDC_Control+0x1a0>)
 8008d4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008d50:	0c1a      	lsrs	r2, r3, #16
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	3302      	adds	r3, #2
 8008d56:	b2d2      	uxtb	r2, r2
 8008d58:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 8008d5a:	79fb      	ldrb	r3, [r7, #7]
 8008d5c:	4a13      	ldr	r2, [pc, #76]	@ (8008dac <CDC_Control+0x1a0>)
 8008d5e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008d62:	0e1a      	lsrs	r2, r3, #24
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	3303      	adds	r3, #3
 8008d68:	b2d2      	uxtb	r2, r2
 8008d6a:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 8008d6c:	79fb      	ldrb	r3, [r7, #7]
 8008d6e:	683a      	ldr	r2, [r7, #0]
 8008d70:	3204      	adds	r2, #4
 8008d72:	490e      	ldr	r1, [pc, #56]	@ (8008dac <CDC_Control+0x1a0>)
 8008d74:	00db      	lsls	r3, r3, #3
 8008d76:	440b      	add	r3, r1
 8008d78:	791b      	ldrb	r3, [r3, #4]
 8008d7a:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 8008d7c:	79fb      	ldrb	r3, [r7, #7]
 8008d7e:	683a      	ldr	r2, [r7, #0]
 8008d80:	3205      	adds	r2, #5
 8008d82:	490a      	ldr	r1, [pc, #40]	@ (8008dac <CDC_Control+0x1a0>)
 8008d84:	00db      	lsls	r3, r3, #3
 8008d86:	440b      	add	r3, r1
 8008d88:	795b      	ldrb	r3, [r3, #5]
 8008d8a:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 8008d8c:	79fb      	ldrb	r3, [r7, #7]
 8008d8e:	683a      	ldr	r2, [r7, #0]
 8008d90:	3206      	adds	r2, #6
 8008d92:	4906      	ldr	r1, [pc, #24]	@ (8008dac <CDC_Control+0x1a0>)
 8008d94:	00db      	lsls	r3, r3, #3
 8008d96:	440b      	add	r3, r1
 8008d98:	799b      	ldrb	r3, [r3, #6]
 8008d9a:	7013      	strb	r3, [r2, #0]
    break;
 8008d9c:	e000      	b.n	8008da0 <CDC_Control+0x194>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008d9e:	bf00      	nop
  }

  return (USBD_OK);
 8008da0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3708      	adds	r7, #8
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	200010ec 	.word	0x200010ec

08008db0 <CDC_Receive>:
//  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
//  return (USBD_OK);
//  /* USER CODE END 6 */
//}
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 8008db0:	b5b0      	push	{r4, r5, r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	4603      	mov	r3, r0
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	607a      	str	r2, [r7, #4]
 8008dbc:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0; i < *Len; i++)
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	617b      	str	r3, [r7, #20]
 8008dc2:	e021      	b.n	8008e08 <CDC_Receive+0x58>
  {
    CDC_RX_Buffer[cdc_ch][CDC_RX_WriteIndex[cdc_ch]++] = Buf[i];
 8008dc4:	68ba      	ldr	r2, [r7, #8]
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	18d0      	adds	r0, r2, r3
 8008dca:	7bf9      	ldrb	r1, [r7, #15]
 8008dcc:	7bfa      	ldrb	r2, [r7, #15]
 8008dce:	4b19      	ldr	r3, [pc, #100]	@ (8008e34 <CDC_Receive+0x84>)
 8008dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dd4:	1c5c      	adds	r4, r3, #1
 8008dd6:	4d17      	ldr	r5, [pc, #92]	@ (8008e34 <CDC_Receive+0x84>)
 8008dd8:	f845 4022 	str.w	r4, [r5, r2, lsl #2]
 8008ddc:	7804      	ldrb	r4, [r0, #0]
 8008dde:	4816      	ldr	r0, [pc, #88]	@ (8008e38 <CDC_Receive+0x88>)
 8008de0:	030a      	lsls	r2, r1, #12
 8008de2:	4402      	add	r2, r0
 8008de4:	4413      	add	r3, r2
 8008de6:	4622      	mov	r2, r4
 8008de8:	701a      	strb	r2, [r3, #0]
    if (CDC_RX_WriteIndex[cdc_ch] >= CDC_RX_BUFFER_SIZE)
 8008dea:	7bfb      	ldrb	r3, [r7, #15]
 8008dec:	4a11      	ldr	r2, [pc, #68]	@ (8008e34 <CDC_Receive+0x84>)
 8008dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008df2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008df6:	d304      	bcc.n	8008e02 <CDC_Receive+0x52>
      CDC_RX_WriteIndex[cdc_ch] = 0;
 8008df8:	7bfb      	ldrb	r3, [r7, #15]
 8008dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8008e34 <CDC_Receive+0x84>)
 8008dfc:	2100      	movs	r1, #0
 8008dfe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (uint32_t i = 0; i < *Len; i++)
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	3301      	adds	r3, #1
 8008e06:	617b      	str	r3, [r7, #20]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	697a      	ldr	r2, [r7, #20]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d3d8      	bcc.n	8008dc4 <CDC_Receive+0x14>
  }

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, Buf);
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
 8008e14:	68ba      	ldr	r2, [r7, #8]
 8008e16:	4909      	ldr	r1, [pc, #36]	@ (8008e3c <CDC_Receive+0x8c>)
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f000 fef7 	bl	8009c0c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 8008e1e:	7bfb      	ldrb	r3, [r7, #15]
 8008e20:	4906      	ldr	r1, [pc, #24]	@ (8008e3c <CDC_Receive+0x8c>)
 8008e22:	4618      	mov	r0, r3
 8008e24:	f000 ff52 	bl	8009ccc <USBD_CDC_ReceivePacket>
  return USBD_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3718      	adds	r7, #24
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bdb0      	pop	{r4, r5, r7, pc}
 8008e32:	bf00      	nop
 8008e34:	200020fc 	.word	0x200020fc
 8008e38:	200010fc 	.word	0x200010fc
 8008e3c:	20000d50 	.word	0x20000d50

08008e40 <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b085      	sub	sp, #20
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60b9      	str	r1, [r7, #8]
 8008e48:	607a      	str	r2, [r7, #4]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	73fb      	strb	r3, [r7, #15]
 8008e50:	4613      	mov	r3, r2
 8008e52:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3714      	adds	r7, #20
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
	...

08008e64 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  uint8_t ch = UART_Handle_TO_CDC_CH(huart);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f7ff fd8f 	bl	8008990 <UART_Handle_TO_CDC_CH>
 8008e72:	4603      	mov	r3, r0
 8008e74:	73fb      	strb	r3, [r7, #15]
  if (ch >= NUMBER_OF_CDC) return;
 8008e76:	7bfb      	ldrb	r3, [r7, #15]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d11c      	bne.n	8008eb6 <HAL_UART_TxCpltCallback+0x52>

  // Cập nhật ReadIndex sau khi truyền xong
  if (CDC_RX_ReadIndex[ch] > CDC_RX_WriteIndex[ch])
 8008e7c:	7bfb      	ldrb	r3, [r7, #15]
 8008e7e:	4a10      	ldr	r2, [pc, #64]	@ (8008ec0 <HAL_UART_TxCpltCallback+0x5c>)
 8008e80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008e84:	7bfb      	ldrb	r3, [r7, #15]
 8008e86:	490f      	ldr	r1, [pc, #60]	@ (8008ec4 <HAL_UART_TxCpltCallback+0x60>)
 8008e88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d905      	bls.n	8008e9c <HAL_UART_TxCpltCallback+0x38>
  {
    CDC_RX_ReadIndex[ch] = 0;
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
 8008e92:	4a0b      	ldr	r2, [pc, #44]	@ (8008ec0 <HAL_UART_TxCpltCallback+0x5c>)
 8008e94:	2100      	movs	r1, #0
 8008e96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8008e9a:	e007      	b.n	8008eac <HAL_UART_TxCpltCallback+0x48>
  }
  else
  {
    CDC_RX_ReadIndex[ch] = CDC_RX_WriteIndex[ch];
 8008e9c:	7bfa      	ldrb	r2, [r7, #15]
 8008e9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ea0:	4908      	ldr	r1, [pc, #32]	@ (8008ec4 <HAL_UART_TxCpltCallback+0x60>)
 8008ea2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008ea6:	4906      	ldr	r1, [pc, #24]	@ (8008ec0 <HAL_UART_TxCpltCallback+0x5c>)
 8008ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }

  uart_tx_busy[ch] = 0;
 8008eac:	7bfb      	ldrb	r3, [r7, #15]
 8008eae:	4a06      	ldr	r2, [pc, #24]	@ (8008ec8 <HAL_UART_TxCpltCallback+0x64>)
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	54d1      	strb	r1, [r2, r3]
 8008eb4:	e000      	b.n	8008eb8 <HAL_UART_TxCpltCallback+0x54>
  if (ch >= NUMBER_OF_CDC) return;
 8008eb6:	bf00      	nop
}
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	20002100 	.word	0x20002100
 8008ec4:	200020fc 	.word	0x200020fc
 8008ec8:	20002104 	.word	0x20002104

08008ecc <ProcessCDC_RX>:

void ProcessCDC_RX(void) {
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	73fb      	strb	r3, [r7, #15]
 8008ed6:	e057      	b.n	8008f88 <ProcessCDC_RX+0xbc>
        if (CDC_RX_ReadIndex[i] != CDC_RX_WriteIndex[i]) {
 8008ed8:	7bfb      	ldrb	r3, [r7, #15]
 8008eda:	4a2f      	ldr	r2, [pc, #188]	@ (8008f98 <ProcessCDC_RX+0xcc>)
 8008edc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008ee0:	7bfb      	ldrb	r3, [r7, #15]
 8008ee2:	492e      	ldr	r1, [pc, #184]	@ (8008f9c <ProcessCDC_RX+0xd0>)
 8008ee4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d04a      	beq.n	8008f82 <ProcessCDC_RX+0xb6>
            uint32_t buffptr = CDC_RX_ReadIndex[i];
 8008eec:	7bfb      	ldrb	r3, [r7, #15]
 8008eee:	4a2a      	ldr	r2, [pc, #168]	@ (8008f98 <ProcessCDC_RX+0xcc>)
 8008ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ef4:	607b      	str	r3, [r7, #4]
            uint32_t buffsize = (CDC_RX_ReadIndex[i] > CDC_RX_WriteIndex[i]) ?
 8008ef6:	7bfb      	ldrb	r3, [r7, #15]
 8008ef8:	4a27      	ldr	r2, [pc, #156]	@ (8008f98 <ProcessCDC_RX+0xcc>)
 8008efa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008efe:	7bfb      	ldrb	r3, [r7, #15]
 8008f00:	4926      	ldr	r1, [pc, #152]	@ (8008f9c <ProcessCDC_RX+0xd0>)
 8008f02:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                                (CDC_RX_BUFFER_SIZE - CDC_RX_ReadIndex[i]) :
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d906      	bls.n	8008f18 <ProcessCDC_RX+0x4c>
 8008f0a:	7bfb      	ldrb	r3, [r7, #15]
 8008f0c:	4a22      	ldr	r2, [pc, #136]	@ (8008f98 <ProcessCDC_RX+0xcc>)
 8008f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f12:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8008f16:	e008      	b.n	8008f2a <ProcessCDC_RX+0x5e>
                                (CDC_RX_WriteIndex[i] - CDC_RX_ReadIndex[i]);
 8008f18:	7bfb      	ldrb	r3, [r7, #15]
 8008f1a:	4a20      	ldr	r2, [pc, #128]	@ (8008f9c <ProcessCDC_RX+0xd0>)
 8008f1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
 8008f22:	491d      	ldr	r1, [pc, #116]	@ (8008f98 <ProcessCDC_RX+0xcc>)
 8008f24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                                (CDC_RX_BUFFER_SIZE - CDC_RX_ReadIndex[i]) :
 8008f28:	1ad3      	subs	r3, r2, r3
            uint32_t buffsize = (CDC_RX_ReadIndex[i] > CDC_RX_WriteIndex[i]) ?
 8008f2a:	60bb      	str	r3, [r7, #8]

            if (buffsize > 64) buffsize = 64;
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	2b40      	cmp	r3, #64	@ 0x40
 8008f30:	d901      	bls.n	8008f36 <ProcessCDC_RX+0x6a>
 8008f32:	2340      	movs	r3, #64	@ 0x40
 8008f34:	60bb      	str	r3, [r7, #8]

            HAL_UART_Transmit(CDC_CH_To_UART_Handle(i), &CDC_RX_Buffer[i][buffptr], buffsize, HAL_MAX_DELAY);
 8008f36:	7bfb      	ldrb	r3, [r7, #15]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7ff fd13 	bl	8008964 <CDC_CH_To_UART_Handle>
 8008f3e:	7bfb      	ldrb	r3, [r7, #15]
 8008f40:	031a      	lsls	r2, r3, #12
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4413      	add	r3, r2
 8008f46:	4a16      	ldr	r2, [pc, #88]	@ (8008fa0 <ProcessCDC_RX+0xd4>)
 8008f48:	1899      	adds	r1, r3, r2
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f52:	f7fd f969 	bl	8006228 <HAL_UART_Transmit>

            CDC_RX_ReadIndex[i] += buffsize;
 8008f56:	7bfb      	ldrb	r3, [r7, #15]
 8008f58:	4a0f      	ldr	r2, [pc, #60]	@ (8008f98 <ProcessCDC_RX+0xcc>)
 8008f5a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008f5e:	7bfb      	ldrb	r3, [r7, #15]
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	440a      	add	r2, r1
 8008f64:	490c      	ldr	r1, [pc, #48]	@ (8008f98 <ProcessCDC_RX+0xcc>)
 8008f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if (CDC_RX_ReadIndex[i] >= CDC_RX_BUFFER_SIZE)
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
 8008f6c:	4a0a      	ldr	r2, [pc, #40]	@ (8008f98 <ProcessCDC_RX+0xcc>)
 8008f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f76:	d304      	bcc.n	8008f82 <ProcessCDC_RX+0xb6>
                CDC_RX_ReadIndex[i] = 0;
 8008f78:	7bfb      	ldrb	r3, [r7, #15]
 8008f7a:	4a07      	ldr	r2, [pc, #28]	@ (8008f98 <ProcessCDC_RX+0xcc>)
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
 8008f82:	7bfb      	ldrb	r3, [r7, #15]
 8008f84:	3301      	adds	r3, #1
 8008f86:	73fb      	strb	r3, [r7, #15]
 8008f88:	7bfb      	ldrb	r3, [r7, #15]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d0a4      	beq.n	8008ed8 <ProcessCDC_RX+0xc>
        }
    }
}
 8008f8e:	bf00      	nop
 8008f90:	bf00      	nop
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	20002100 	.word	0x20002100
 8008f9c:	200020fc 	.word	0x200020fc
 8008fa0:	200010fc 	.word	0x200010fc

08008fa4 <ProcessCDC_TX>:

void ProcessCDC_TX(void) {
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
 8008faa:	2300      	movs	r3, #0
 8008fac:	73fb      	strb	r3, [r7, #15]
 8008fae:	e054      	b.n	800905a <ProcessCDC_TX+0xb6>
        if (Read_Index[i] != Write_Index[i]) {
 8008fb0:	7bfb      	ldrb	r3, [r7, #15]
 8008fb2:	4a2e      	ldr	r2, [pc, #184]	@ (800906c <ProcessCDC_TX+0xc8>)
 8008fb4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008fb8:	7bfb      	ldrb	r3, [r7, #15]
 8008fba:	492d      	ldr	r1, [pc, #180]	@ (8009070 <ProcessCDC_TX+0xcc>)
 8008fbc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d047      	beq.n	8009054 <ProcessCDC_TX+0xb0>
            uint32_t buffptr = Read_Index[i];
 8008fc4:	7bfb      	ldrb	r3, [r7, #15]
 8008fc6:	4a29      	ldr	r2, [pc, #164]	@ (800906c <ProcessCDC_TX+0xc8>)
 8008fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fcc:	60bb      	str	r3, [r7, #8]
            uint32_t buffsize = (Read_Index[i] > Write_Index[i]) ?
 8008fce:	7bfb      	ldrb	r3, [r7, #15]
 8008fd0:	4a26      	ldr	r2, [pc, #152]	@ (800906c <ProcessCDC_TX+0xc8>)
 8008fd2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008fd6:	7bfb      	ldrb	r3, [r7, #15]
 8008fd8:	4925      	ldr	r1, [pc, #148]	@ (8009070 <ProcessCDC_TX+0xcc>)
 8008fda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                                (APP_TX_DATA_SIZE - Read_Index[i]) :
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d906      	bls.n	8008ff0 <ProcessCDC_TX+0x4c>
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
 8008fe4:	4a21      	ldr	r2, [pc, #132]	@ (800906c <ProcessCDC_TX+0xc8>)
 8008fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fea:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8008fee:	e008      	b.n	8009002 <ProcessCDC_TX+0x5e>
                                (Write_Index[i] - Read_Index[i]);
 8008ff0:	7bfb      	ldrb	r3, [r7, #15]
 8008ff2:	4a1f      	ldr	r2, [pc, #124]	@ (8009070 <ProcessCDC_TX+0xcc>)
 8008ff4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008ff8:	7bfb      	ldrb	r3, [r7, #15]
 8008ffa:	491c      	ldr	r1, [pc, #112]	@ (800906c <ProcessCDC_TX+0xc8>)
 8008ffc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                                (APP_TX_DATA_SIZE - Read_Index[i]) :
 8009000:	1ad3      	subs	r3, r2, r3
            uint32_t buffsize = (Read_Index[i] > Write_Index[i]) ?
 8009002:	607b      	str	r3, [r7, #4]

            USBD_CDC_SetTxBuffer(i, &hUsbDevice, &TX_Buffer[i][buffptr], buffsize);
 8009004:	7bfb      	ldrb	r3, [r7, #15]
 8009006:	019a      	lsls	r2, r3, #6
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	4413      	add	r3, r2
 800900c:	4a19      	ldr	r2, [pc, #100]	@ (8009074 <ProcessCDC_TX+0xd0>)
 800900e:	441a      	add	r2, r3
 8009010:	7bf8      	ldrb	r0, [r7, #15]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4918      	ldr	r1, [pc, #96]	@ (8009078 <ProcessCDC_TX+0xd4>)
 8009016:	f000 fdd5 	bl	8009bc4 <USBD_CDC_SetTxBuffer>

            if (USBD_CDC_TransmitPacket(i, &hUsbDevice) == USBD_OK) {
 800901a:	7bfb      	ldrb	r3, [r7, #15]
 800901c:	4916      	ldr	r1, [pc, #88]	@ (8009078 <ProcessCDC_TX+0xd4>)
 800901e:	4618      	mov	r0, r3
 8009020:	f000 fe12 	bl	8009c48 <USBD_CDC_TransmitPacket>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d114      	bne.n	8009054 <ProcessCDC_TX+0xb0>
                Read_Index[i] += buffsize;
 800902a:	7bfb      	ldrb	r3, [r7, #15]
 800902c:	4a0f      	ldr	r2, [pc, #60]	@ (800906c <ProcessCDC_TX+0xc8>)
 800902e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009032:	7bfb      	ldrb	r3, [r7, #15]
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	440a      	add	r2, r1
 8009038:	490c      	ldr	r1, [pc, #48]	@ (800906c <ProcessCDC_TX+0xc8>)
 800903a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (Read_Index[i] == APP_RX_DATA_SIZE)
 800903e:	7bfb      	ldrb	r3, [r7, #15]
 8009040:	4a0a      	ldr	r2, [pc, #40]	@ (800906c <ProcessCDC_TX+0xc8>)
 8009042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009046:	2b40      	cmp	r3, #64	@ 0x40
 8009048:	d104      	bne.n	8009054 <ProcessCDC_TX+0xb0>
                    Read_Index[i] = 0;
 800904a:	7bfb      	ldrb	r3, [r7, #15]
 800904c:	4a07      	ldr	r2, [pc, #28]	@ (800906c <ProcessCDC_TX+0xc8>)
 800904e:	2100      	movs	r1, #0
 8009050:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < NUMBER_OF_CDC; i++) {
 8009054:	7bfb      	ldrb	r3, [r7, #15]
 8009056:	3301      	adds	r3, #1
 8009058:	73fb      	strb	r3, [r7, #15]
 800905a:	7bfb      	ldrb	r3, [r7, #15]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d0a7      	beq.n	8008fb0 <ProcessCDC_TX+0xc>
            }
        }
    }
}
 8009060:	bf00      	nop
 8009062:	bf00      	nop
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	200010f8 	.word	0x200010f8
 8009070:	200010f4 	.word	0x200010f4
 8009074:	200010ac 	.word	0x200010ac
 8009078:	20000d50 	.word	0x20000d50

0800907c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
    if (htim == &htim2)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a12      	ldr	r2, [pc, #72]	@ (80090d0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d102      	bne.n	8009092 <HAL_TIM_PeriodElapsedCallback+0x16>
        ProcessCDC_RX();
 800908c:	f7ff ff1e 	bl	8008ecc <ProcessCDC_RX>
        ProcessCDC_TX();
    else if((htim == &htim4)  && (HID_Frame_Read(&hid_frame_fifo_receive,process_sendframe))){
    		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
    	USBD_CUSTOM_HID_SendReport(&hUsbDevice,process_sendframe, HID_FRAME_SIZE);
    }
}
 8009090:	e01a      	b.n	80090c8 <HAL_TIM_PeriodElapsedCallback+0x4c>
    else if (htim == &htim1)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a0f      	ldr	r2, [pc, #60]	@ (80090d4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d102      	bne.n	80090a0 <HAL_TIM_PeriodElapsedCallback+0x24>
        ProcessCDC_TX();
 800909a:	f7ff ff83 	bl	8008fa4 <ProcessCDC_TX>
}
 800909e:	e013      	b.n	80090c8 <HAL_TIM_PeriodElapsedCallback+0x4c>
    else if((htim == &htim4)  && (HID_Frame_Read(&hid_frame_fifo_receive,process_sendframe))){
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a0d      	ldr	r2, [pc, #52]	@ (80090d8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d10f      	bne.n	80090c8 <HAL_TIM_PeriodElapsedCallback+0x4c>
 80090a8:	490c      	ldr	r1, [pc, #48]	@ (80090dc <HAL_TIM_PeriodElapsedCallback+0x60>)
 80090aa:	480d      	ldr	r0, [pc, #52]	@ (80090e0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80090ac:	f000 f9b2 	bl	8009414 <HID_Frame_Read>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d008      	beq.n	80090c8 <HAL_TIM_PeriodElapsedCallback+0x4c>
    		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80090b6:	2140      	movs	r1, #64	@ 0x40
 80090b8:	480a      	ldr	r0, [pc, #40]	@ (80090e4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80090ba:	f7fa fabc 	bl	8003636 <HAL_GPIO_TogglePin>
    	USBD_CUSTOM_HID_SendReport(&hUsbDevice,process_sendframe, HID_FRAME_SIZE);
 80090be:	2240      	movs	r2, #64	@ 0x40
 80090c0:	4906      	ldr	r1, [pc, #24]	@ (80090dc <HAL_TIM_PeriodElapsedCallback+0x60>)
 80090c2:	4809      	ldr	r0, [pc, #36]	@ (80090e8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80090c4:	f001 fb94 	bl	800a7f0 <USBD_CUSTOM_HID_SendReport>
}
 80090c8:	bf00      	nop
 80090ca:	3708      	adds	r7, #8
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	20000688 	.word	0x20000688
 80090d4:	20000640 	.word	0x20000640
 80090d8:	200006d0 	.word	0x200006d0
 80090dc:	20002108 	.word	0x20002108
 80090e0:	20000438 	.word	0x20000438
 80090e4:	40020000 	.word	0x40020000
 80090e8:	20000d50 	.word	0x20000d50

080090ec <HAL_UART_RxCpltCallback>:
//
//
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  uint8_t cdc_ch = UART_Handle_TO_CDC_CH(huart);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f7ff fc4b 	bl	8008990 <UART_Handle_TO_CDC_CH>
 80090fa:	4603      	mov	r3, r0
 80090fc:	73fb      	strb	r3, [r7, #15]
  //CDC_Transmit(cdc_ch, (TX_Buffer[cdc_ch] + Write_Index[cdc_ch]), 1);
  /* Increment Index for buffer writing */
  Write_Index[cdc_ch]++;
 80090fe:	7bfb      	ldrb	r3, [r7, #15]
 8009100:	4a11      	ldr	r2, [pc, #68]	@ (8009148 <HAL_UART_RxCpltCallback+0x5c>)
 8009102:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009106:	3201      	adds	r2, #1
 8009108:	490f      	ldr	r1, [pc, #60]	@ (8009148 <HAL_UART_RxCpltCallback+0x5c>)
 800910a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  /* To avoid buffer overflow */
  if (Write_Index[cdc_ch] == APP_RX_DATA_SIZE)
 800910e:	7bfb      	ldrb	r3, [r7, #15]
 8009110:	4a0d      	ldr	r2, [pc, #52]	@ (8009148 <HAL_UART_RxCpltCallback+0x5c>)
 8009112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009116:	2b40      	cmp	r3, #64	@ 0x40
 8009118:	d104      	bne.n	8009124 <HAL_UART_RxCpltCallback+0x38>
  {
    Write_Index[cdc_ch] = 0;
 800911a:	7bfb      	ldrb	r3, [r7, #15]
 800911c:	4a0a      	ldr	r2, [pc, #40]	@ (8009148 <HAL_UART_RxCpltCallback+0x5c>)
 800911e:	2100      	movs	r1, #0
 8009120:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  }

  /* Start another reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(huart, (TX_Buffer[cdc_ch] + Write_Index[cdc_ch]), 1);
 8009124:	7bfb      	ldrb	r3, [r7, #15]
 8009126:	019b      	lsls	r3, r3, #6
 8009128:	4a08      	ldr	r2, [pc, #32]	@ (800914c <HAL_UART_RxCpltCallback+0x60>)
 800912a:	441a      	add	r2, r3
 800912c:	7bfb      	ldrb	r3, [r7, #15]
 800912e:	4906      	ldr	r1, [pc, #24]	@ (8009148 <HAL_UART_RxCpltCallback+0x5c>)
 8009130:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009134:	4413      	add	r3, r2
 8009136:	2201      	movs	r2, #1
 8009138:	4619      	mov	r1, r3
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f7fd f8ff 	bl	800633e <HAL_UART_Receive_IT>
}
 8009140:	bf00      	nop
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	200010f4 	.word	0x200010f4
 800914c:	200010ac 	.word	0x200010ac

08009150 <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	4603      	mov	r3, r0
 8009158:	6039      	str	r1, [r7, #0]
 800915a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	2212      	movs	r2, #18
 8009160:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 8009162:	4b03      	ldr	r3, [pc, #12]	@ (8009170 <USBD_DeviceDescriptor+0x20>)
}
 8009164:	4618      	mov	r0, r3
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr
 8009170:	20000048 	.word	0x20000048

08009174 <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	4603      	mov	r3, r0
 800917c:	6039      	str	r1, [r7, #0]
 800917e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	2204      	movs	r2, #4
 8009184:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009186:	4b03      	ldr	r3, [pc, #12]	@ (8009194 <USBD_LangIDStrDescriptor+0x20>)
}
 8009188:	4618      	mov	r0, r3
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr
 8009194:	2000005c 	.word	0x2000005c

08009198 <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	4603      	mov	r3, r0
 80091a0:	6039      	str	r1, [r7, #0]
 80091a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80091a4:	79fb      	ldrb	r3, [r7, #7]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d105      	bne.n	80091b6 <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80091aa:	683a      	ldr	r2, [r7, #0]
 80091ac:	4907      	ldr	r1, [pc, #28]	@ (80091cc <USBD_ProductStrDescriptor+0x34>)
 80091ae:	4808      	ldr	r0, [pc, #32]	@ (80091d0 <USBD_ProductStrDescriptor+0x38>)
 80091b0:	f002 fce5 	bl	800bb7e <USBD_GetString>
 80091b4:	e004      	b.n	80091c0 <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80091b6:	683a      	ldr	r2, [r7, #0]
 80091b8:	4904      	ldr	r1, [pc, #16]	@ (80091cc <USBD_ProductStrDescriptor+0x34>)
 80091ba:	4805      	ldr	r0, [pc, #20]	@ (80091d0 <USBD_ProductStrDescriptor+0x38>)
 80091bc:	f002 fcdf 	bl	800bb7e <USBD_GetString>
  }
  return USBD_StrDesc;
 80091c0:	4b02      	ldr	r3, [pc, #8]	@ (80091cc <USBD_ProductStrDescriptor+0x34>)
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3708      	adds	r7, #8
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	20002110 	.word	0x20002110
 80091d0:	0800cc80 	.word	0x0800cc80

080091d4 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	4603      	mov	r3, r0
 80091dc:	6039      	str	r1, [r7, #0]
 80091de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80091e0:	683a      	ldr	r2, [r7, #0]
 80091e2:	4904      	ldr	r1, [pc, #16]	@ (80091f4 <USBD_ManufacturerStrDescriptor+0x20>)
 80091e4:	4804      	ldr	r0, [pc, #16]	@ (80091f8 <USBD_ManufacturerStrDescriptor+0x24>)
 80091e6:	f002 fcca 	bl	800bb7e <USBD_GetString>
  return USBD_StrDesc;
 80091ea:	4b02      	ldr	r3, [pc, #8]	@ (80091f4 <USBD_ManufacturerStrDescriptor+0x20>)
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	20002110 	.word	0x20002110
 80091f8:	0800cc90 	.word	0x0800cc90

080091fc <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b082      	sub	sp, #8
 8009200:	af00      	add	r7, sp, #0
 8009202:	4603      	mov	r3, r0
 8009204:	6039      	str	r1, [r7, #0]
 8009206:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	221a      	movs	r2, #26
 800920c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800920e:	f000 f843 	bl	8009298 <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009212:	4b02      	ldr	r3, [pc, #8]	@ (800921c <USBD_SerialStrDescriptor+0x20>)
}
 8009214:	4618      	mov	r0, r3
 8009216:	3708      	adds	r7, #8
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	20000060 	.word	0x20000060

08009220 <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	4603      	mov	r3, r0
 8009228:	6039      	str	r1, [r7, #0]
 800922a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800922c:	79fb      	ldrb	r3, [r7, #7]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d105      	bne.n	800923e <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	4907      	ldr	r1, [pc, #28]	@ (8009254 <USBD_ConfigStrDescriptor+0x34>)
 8009236:	4808      	ldr	r0, [pc, #32]	@ (8009258 <USBD_ConfigStrDescriptor+0x38>)
 8009238:	f002 fca1 	bl	800bb7e <USBD_GetString>
 800923c:	e004      	b.n	8009248 <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800923e:	683a      	ldr	r2, [r7, #0]
 8009240:	4904      	ldr	r1, [pc, #16]	@ (8009254 <USBD_ConfigStrDescriptor+0x34>)
 8009242:	4805      	ldr	r0, [pc, #20]	@ (8009258 <USBD_ConfigStrDescriptor+0x38>)
 8009244:	f002 fc9b 	bl	800bb7e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009248:	4b02      	ldr	r3, [pc, #8]	@ (8009254 <USBD_ConfigStrDescriptor+0x34>)
}
 800924a:	4618      	mov	r0, r3
 800924c:	3708      	adds	r7, #8
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	20002110 	.word	0x20002110
 8009258:	0800cc98 	.word	0x0800cc98

0800925c <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	4603      	mov	r3, r0
 8009264:	6039      	str	r1, [r7, #0]
 8009266:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009268:	79fb      	ldrb	r3, [r7, #7]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d105      	bne.n	800927a <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800926e:	683a      	ldr	r2, [r7, #0]
 8009270:	4907      	ldr	r1, [pc, #28]	@ (8009290 <USBD_InterfaceStrDescriptor+0x34>)
 8009272:	4808      	ldr	r0, [pc, #32]	@ (8009294 <USBD_InterfaceStrDescriptor+0x38>)
 8009274:	f002 fc83 	bl	800bb7e <USBD_GetString>
 8009278:	e004      	b.n	8009284 <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	4904      	ldr	r1, [pc, #16]	@ (8009290 <USBD_InterfaceStrDescriptor+0x34>)
 800927e:	4805      	ldr	r0, [pc, #20]	@ (8009294 <USBD_InterfaceStrDescriptor+0x38>)
 8009280:	f002 fc7d 	bl	800bb7e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009284:	4b02      	ldr	r3, [pc, #8]	@ (8009290 <USBD_InterfaceStrDescriptor+0x34>)
}
 8009286:	4618      	mov	r0, r3
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	20002110 	.word	0x20002110
 8009294:	0800cca8 	.word	0x0800cca8

08009298 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800929e:	4b0f      	ldr	r3, [pc, #60]	@ (80092dc <Get_SerialNum+0x44>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80092a4:	4b0e      	ldr	r3, [pc, #56]	@ (80092e0 <Get_SerialNum+0x48>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80092aa:	4b0e      	ldr	r3, [pc, #56]	@ (80092e4 <Get_SerialNum+0x4c>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80092b0:	68fa      	ldr	r2, [r7, #12]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	4413      	add	r3, r2
 80092b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d009      	beq.n	80092d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80092be:	2208      	movs	r2, #8
 80092c0:	4909      	ldr	r1, [pc, #36]	@ (80092e8 <Get_SerialNum+0x50>)
 80092c2:	68f8      	ldr	r0, [r7, #12]
 80092c4:	f000 f814 	bl	80092f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80092c8:	2204      	movs	r2, #4
 80092ca:	4908      	ldr	r1, [pc, #32]	@ (80092ec <Get_SerialNum+0x54>)
 80092cc:	68b8      	ldr	r0, [r7, #8]
 80092ce:	f000 f80f 	bl	80092f0 <IntToUnicode>
  }
}
 80092d2:	bf00      	nop
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	1fff7a10 	.word	0x1fff7a10
 80092e0:	1fff7a14 	.word	0x1fff7a14
 80092e4:	1fff7a18 	.word	0x1fff7a18
 80092e8:	20000062 	.word	0x20000062
 80092ec:	20000072 	.word	0x20000072

080092f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b087      	sub	sp, #28
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	4613      	mov	r3, r2
 80092fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80092fe:	2300      	movs	r3, #0
 8009300:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009302:	2300      	movs	r3, #0
 8009304:	75fb      	strb	r3, [r7, #23]
 8009306:	e027      	b.n	8009358 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	0f1b      	lsrs	r3, r3, #28
 800930c:	2b09      	cmp	r3, #9
 800930e:	d80b      	bhi.n	8009328 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	0f1b      	lsrs	r3, r3, #28
 8009314:	b2da      	uxtb	r2, r3
 8009316:	7dfb      	ldrb	r3, [r7, #23]
 8009318:	005b      	lsls	r3, r3, #1
 800931a:	4619      	mov	r1, r3
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	440b      	add	r3, r1
 8009320:	3230      	adds	r2, #48	@ 0x30
 8009322:	b2d2      	uxtb	r2, r2
 8009324:	701a      	strb	r2, [r3, #0]
 8009326:	e00a      	b.n	800933e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	0f1b      	lsrs	r3, r3, #28
 800932c:	b2da      	uxtb	r2, r3
 800932e:	7dfb      	ldrb	r3, [r7, #23]
 8009330:	005b      	lsls	r3, r3, #1
 8009332:	4619      	mov	r1, r3
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	440b      	add	r3, r1
 8009338:	3237      	adds	r2, #55	@ 0x37
 800933a:	b2d2      	uxtb	r2, r2
 800933c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	011b      	lsls	r3, r3, #4
 8009342:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009344:	7dfb      	ldrb	r3, [r7, #23]
 8009346:	005b      	lsls	r3, r3, #1
 8009348:	3301      	adds	r3, #1
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	4413      	add	r3, r2
 800934e:	2200      	movs	r2, #0
 8009350:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009352:	7dfb      	ldrb	r3, [r7, #23]
 8009354:	3301      	adds	r3, #1
 8009356:	75fb      	strb	r3, [r7, #23]
 8009358:	7dfa      	ldrb	r2, [r7, #23]
 800935a:	79fb      	ldrb	r3, [r7, #7]
 800935c:	429a      	cmp	r2, r3
 800935e:	d3d3      	bcc.n	8009308 <IntToUnicode+0x18>
  }
}
 8009360:	bf00      	nop
 8009362:	bf00      	nop
 8009364:	371c      	adds	r7, #28
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr

0800936e <CUSTOM_HID_Init>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init(void)
{
 800936e:	b480      	push	{r7}
 8009370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009372:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009374:	4618      	mov	r0, r3
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <CUSTOM_HID_DeInit>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit(void)
{
 800937e:	b480      	push	{r7}
 8009380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009382:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009384:	4618      	mov	r0, r3
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr
	...

08009390 <CUSTOM_HID_OutEvent>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent(uint8_t *data, uint16_t len)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	460b      	mov	r3, r1
 800939a:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN 6 */
	HID_Frame_Write(&hid_frame_fifo,data);
 800939c:	6879      	ldr	r1, [r7, #4]
 800939e:	4804      	ldr	r0, [pc, #16]	@ (80093b0 <CUSTOM_HID_OutEvent+0x20>)
 80093a0:	f000 f808 	bl	80093b4 <HID_Frame_Write>
  //memcpy(buffer, state, 0x40);
  //USBD_CUSTOM_HID_SendReport(&hUsbDevice, (uint8_t *)buffer, 0x40);
  return (USBD_OK);
 80093a4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3708      	adds	r7, #8
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	20002310 	.word	0x20002310

080093b4 <HID_Frame_Write>:
//    }
//}


uint8_t HID_Frame_Write(HID_FrameFIFO_t *fifo, uint8_t *data)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
    uint8_t nextHead = (fifo->head + 1) % HID_FRAME_BUFFER_SIZE;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	3301      	adds	r3, #1
 80093c8:	425a      	negs	r2, r3
 80093ca:	f003 0307 	and.w	r3, r3, #7
 80093ce:	f002 0207 	and.w	r2, r2, #7
 80093d2:	bf58      	it	pl
 80093d4:	4253      	negpl	r3, r2
 80093d6:	73fb      	strb	r3, [r7, #15]

    // Kiểm tra tràn bộ đệm
    if (nextHead == fifo->tail) {
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	7bfa      	ldrb	r2, [r7, #15]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d101      	bne.n	80093ea <HID_Frame_Write+0x36>
        // Buffer đầy
        return 0;
 80093e6:	2300      	movs	r3, #0
 80093e8:	e010      	b.n	800940c <HID_Frame_Write+0x58>
    }

    memcpy(fifo->frame[fifo->head], data, HID_FRAME_SIZE);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	019b      	lsls	r3, r3, #6
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	4413      	add	r3, r2
 80093f8:	2240      	movs	r2, #64	@ 0x40
 80093fa:	6839      	ldr	r1, [r7, #0]
 80093fc:	4618      	mov	r0, r3
 80093fe:	f002 ffe9 	bl	800c3d4 <memcpy>
    fifo->head = nextHead;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	7bfa      	ldrb	r2, [r7, #15]
 8009406:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
    return 1;
 800940a:	2301      	movs	r3, #1
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <HID_Frame_Read>:




uint8_t HID_Frame_Read(HID_FrameFIFO_t *fifo, uint8_t *dest_buf) {
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
    if (fifo->head == fifo->tail) {
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009424:	b2da      	uxtb	r2, r3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800942c:	b2db      	uxtb	r3, r3
 800942e:	429a      	cmp	r2, r3
 8009430:	d101      	bne.n	8009436 <HID_Frame_Read+0x22>
        return 0;  // Không có frame
 8009432:	2300      	movs	r3, #0
 8009434:	e01c      	b.n	8009470 <HID_Frame_Read+0x5c>
    }

    memcpy(dest_buf, fifo->frame[fifo->tail], HID_FRAME_SIZE);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800943c:	b2db      	uxtb	r3, r3
 800943e:	019b      	lsls	r3, r3, #6
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	4413      	add	r3, r2
 8009444:	2240      	movs	r2, #64	@ 0x40
 8009446:	4619      	mov	r1, r3
 8009448:	6838      	ldr	r0, [r7, #0]
 800944a:	f002 ffc3 	bl	800c3d4 <memcpy>
    fifo->tail = (fifo->tail + 1) % HID_FRAME_BUFFER_SIZE;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009454:	b2db      	uxtb	r3, r3
 8009456:	3301      	adds	r3, #1
 8009458:	425a      	negs	r2, r3
 800945a:	f003 0307 	and.w	r3, r3, #7
 800945e:	f002 0207 	and.w	r2, r2, #7
 8009462:	bf58      	it	pl
 8009464:	4253      	negpl	r3, r2
 8009466:	b2da      	uxtb	r2, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
    return 1;
 800946e:	2301      	movs	r3, #1
}
 8009470:	4618      	mov	r0, r3
 8009472:	3708      	adds	r7, #8
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	460b      	mov	r3, r1
 8009482:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009484:	2300      	movs	r3, #0
 8009486:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009488:	2300      	movs	r3, #0
 800948a:	73fb      	strb	r3, [r7, #15]
 800948c:	e0c6      	b.n	800961c <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 800948e:	7bfb      	ldrb	r3, [r7, #15]
 8009490:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009494:	fb02 f303 	mul.w	r3, r2, r3
 8009498:	4a65      	ldr	r2, [pc, #404]	@ (8009630 <USBD_CDC_Init+0x1b8>)
 800949a:	4413      	add	r3, r2
 800949c:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	7c1b      	ldrb	r3, [r3, #16]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d13d      	bne.n	8009522 <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 80094a6:	7bfb      	ldrb	r3, [r7, #15]
 80094a8:	4a62      	ldr	r2, [pc, #392]	@ (8009634 <USBD_CDC_Init+0x1bc>)
 80094aa:	5cd1      	ldrb	r1, [r2, r3]
 80094ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80094b0:	2202      	movs	r2, #2
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f002 fdd5 	bl	800c062 <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 80094b8:	7bfb      	ldrb	r3, [r7, #15]
 80094ba:	4a5e      	ldr	r2, [pc, #376]	@ (8009634 <USBD_CDC_Init+0x1bc>)
 80094bc:	5cd3      	ldrb	r3, [r2, r3]
 80094be:	f003 020f 	and.w	r2, r3, #15
 80094c2:	6879      	ldr	r1, [r7, #4]
 80094c4:	4613      	mov	r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	4413      	add	r3, r2
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	440b      	add	r3, r1
 80094ce:	3324      	adds	r3, #36	@ 0x24
 80094d0:	2201      	movs	r2, #1
 80094d2:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 80094d4:	7bfb      	ldrb	r3, [r7, #15]
 80094d6:	4a58      	ldr	r2, [pc, #352]	@ (8009638 <USBD_CDC_Init+0x1c0>)
 80094d8:	5cd1      	ldrb	r1, [r2, r3]
 80094da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80094de:	2202      	movs	r2, #2
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f002 fdbe 	bl	800c062 <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 80094e6:	7bfb      	ldrb	r3, [r7, #15]
 80094e8:	4a53      	ldr	r2, [pc, #332]	@ (8009638 <USBD_CDC_Init+0x1c0>)
 80094ea:	5cd3      	ldrb	r3, [r2, r3]
 80094ec:	f003 020f 	and.w	r2, r3, #15
 80094f0:	6879      	ldr	r1, [r7, #4]
 80094f2:	4613      	mov	r3, r2
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	4413      	add	r3, r2
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	440b      	add	r3, r1
 80094fc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009500:	2201      	movs	r2, #1
 8009502:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009504:	7bfb      	ldrb	r3, [r7, #15]
 8009506:	4a4d      	ldr	r2, [pc, #308]	@ (800963c <USBD_CDC_Init+0x1c4>)
 8009508:	5cd3      	ldrb	r3, [r2, r3]
 800950a:	f003 020f 	and.w	r2, r3, #15
 800950e:	6879      	ldr	r1, [r7, #4]
 8009510:	4613      	mov	r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	4413      	add	r3, r2
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	440b      	add	r3, r1
 800951a:	3326      	adds	r3, #38	@ 0x26
 800951c:	2210      	movs	r2, #16
 800951e:	801a      	strh	r2, [r3, #0]
 8009520:	e03a      	b.n	8009598 <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 8009522:	7bfb      	ldrb	r3, [r7, #15]
 8009524:	4a43      	ldr	r2, [pc, #268]	@ (8009634 <USBD_CDC_Init+0x1bc>)
 8009526:	5cd1      	ldrb	r1, [r2, r3]
 8009528:	2340      	movs	r3, #64	@ 0x40
 800952a:	2202      	movs	r2, #2
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f002 fd98 	bl	800c062 <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8009532:	7bfb      	ldrb	r3, [r7, #15]
 8009534:	4a3f      	ldr	r2, [pc, #252]	@ (8009634 <USBD_CDC_Init+0x1bc>)
 8009536:	5cd3      	ldrb	r3, [r2, r3]
 8009538:	f003 020f 	and.w	r2, r3, #15
 800953c:	6879      	ldr	r1, [r7, #4]
 800953e:	4613      	mov	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	4413      	add	r3, r2
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	440b      	add	r3, r1
 8009548:	3324      	adds	r3, #36	@ 0x24
 800954a:	2201      	movs	r2, #1
 800954c:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800954e:	7bfb      	ldrb	r3, [r7, #15]
 8009550:	4a39      	ldr	r2, [pc, #228]	@ (8009638 <USBD_CDC_Init+0x1c0>)
 8009552:	5cd1      	ldrb	r1, [r2, r3]
 8009554:	2340      	movs	r3, #64	@ 0x40
 8009556:	2202      	movs	r2, #2
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f002 fd82 	bl	800c062 <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800955e:	7bfb      	ldrb	r3, [r7, #15]
 8009560:	4a35      	ldr	r2, [pc, #212]	@ (8009638 <USBD_CDC_Init+0x1c0>)
 8009562:	5cd3      	ldrb	r3, [r2, r3]
 8009564:	f003 020f 	and.w	r2, r3, #15
 8009568:	6879      	ldr	r1, [r7, #4]
 800956a:	4613      	mov	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	4413      	add	r3, r2
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	440b      	add	r3, r1
 8009574:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009578:	2201      	movs	r2, #1
 800957a:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800957c:	7bfb      	ldrb	r3, [r7, #15]
 800957e:	4a2f      	ldr	r2, [pc, #188]	@ (800963c <USBD_CDC_Init+0x1c4>)
 8009580:	5cd3      	ldrb	r3, [r2, r3]
 8009582:	f003 020f 	and.w	r2, r3, #15
 8009586:	6879      	ldr	r1, [r7, #4]
 8009588:	4613      	mov	r3, r2
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	4413      	add	r3, r2
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	440b      	add	r3, r1
 8009592:	3326      	adds	r3, #38	@ 0x26
 8009594:	2210      	movs	r2, #16
 8009596:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009598:	7bfb      	ldrb	r3, [r7, #15]
 800959a:	4a28      	ldr	r2, [pc, #160]	@ (800963c <USBD_CDC_Init+0x1c4>)
 800959c:	5cd1      	ldrb	r1, [r2, r3]
 800959e:	2308      	movs	r3, #8
 80095a0:	2203      	movs	r2, #3
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f002 fd5d 	bl	800c062 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 80095a8:	7bfb      	ldrb	r3, [r7, #15]
 80095aa:	4a24      	ldr	r2, [pc, #144]	@ (800963c <USBD_CDC_Init+0x1c4>)
 80095ac:	5cd3      	ldrb	r3, [r2, r3]
 80095ae:	f003 020f 	and.w	r2, r3, #15
 80095b2:	6879      	ldr	r1, [r7, #4]
 80095b4:	4613      	mov	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	4413      	add	r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	440b      	add	r3, r1
 80095be:	3324      	adds	r3, #36	@ 0x24
 80095c0:	2201      	movs	r2, #1
 80095c2:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	7bfa      	ldrb	r2, [r7, #15]
 80095ce:	4610      	mov	r0, r2
 80095d0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	2200      	movs	r2, #0
 80095de:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	7c1b      	ldrb	r3, [r3, #16]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d10b      	bne.n	8009602 <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 80095ea:	7bfb      	ldrb	r3, [r7, #15]
 80095ec:	4a12      	ldr	r2, [pc, #72]	@ (8009638 <USBD_CDC_Init+0x1c0>)
 80095ee:	5cd1      	ldrb	r1, [r2, r3]
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80095f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f002 fe20 	bl	800c240 <USBD_LL_PrepareReceive>
 8009600:	e009      	b.n	8009616 <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 8009602:	7bfb      	ldrb	r3, [r7, #15]
 8009604:	4a0c      	ldr	r2, [pc, #48]	@ (8009638 <USBD_CDC_Init+0x1c0>)
 8009606:	5cd1      	ldrb	r1, [r2, r3]
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800960e:	2340      	movs	r3, #64	@ 0x40
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f002 fe15 	bl	800c240 <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009616:	7bfb      	ldrb	r3, [r7, #15]
 8009618:	3301      	adds	r3, #1
 800961a:	73fb      	strb	r3, [r7, #15]
 800961c:	7bfb      	ldrb	r3, [r7, #15]
 800961e:	2b00      	cmp	r3, #0
 8009620:	f43f af35 	beq.w	800948e <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	2000252c 	.word	0x2000252c
 8009634:	20002514 	.word	0x20002514
 8009638:	20002518 	.word	0x20002518
 800963c:	2000251c 	.word	0x2000251c

08009640 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	460b      	mov	r3, r1
 800964a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800964c:	2300      	movs	r3, #0
 800964e:	73fb      	strb	r3, [r7, #15]
 8009650:	e057      	b.n	8009702 <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 8009652:	7bfb      	ldrb	r3, [r7, #15]
 8009654:	4a2f      	ldr	r2, [pc, #188]	@ (8009714 <USBD_CDC_DeInit+0xd4>)
 8009656:	5cd3      	ldrb	r3, [r2, r3]
 8009658:	4619      	mov	r1, r3
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f002 fd27 	bl	800c0ae <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 8009660:	7bfb      	ldrb	r3, [r7, #15]
 8009662:	4a2c      	ldr	r2, [pc, #176]	@ (8009714 <USBD_CDC_DeInit+0xd4>)
 8009664:	5cd3      	ldrb	r3, [r2, r3]
 8009666:	f003 020f 	and.w	r2, r3, #15
 800966a:	6879      	ldr	r1, [r7, #4]
 800966c:	4613      	mov	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	4413      	add	r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	440b      	add	r3, r1
 8009676:	3324      	adds	r3, #36	@ 0x24
 8009678:	2200      	movs	r2, #0
 800967a:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 800967c:	7bfb      	ldrb	r3, [r7, #15]
 800967e:	4a26      	ldr	r2, [pc, #152]	@ (8009718 <USBD_CDC_DeInit+0xd8>)
 8009680:	5cd3      	ldrb	r3, [r2, r3]
 8009682:	4619      	mov	r1, r3
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f002 fd12 	bl	800c0ae <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 800968a:	7bfb      	ldrb	r3, [r7, #15]
 800968c:	4a22      	ldr	r2, [pc, #136]	@ (8009718 <USBD_CDC_DeInit+0xd8>)
 800968e:	5cd3      	ldrb	r3, [r2, r3]
 8009690:	f003 020f 	and.w	r2, r3, #15
 8009694:	6879      	ldr	r1, [r7, #4]
 8009696:	4613      	mov	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	4413      	add	r3, r2
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	440b      	add	r3, r1
 80096a0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80096a4:	2200      	movs	r2, #0
 80096a6:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 80096a8:	7bfb      	ldrb	r3, [r7, #15]
 80096aa:	4a1c      	ldr	r2, [pc, #112]	@ (800971c <USBD_CDC_DeInit+0xdc>)
 80096ac:	5cd3      	ldrb	r3, [r2, r3]
 80096ae:	4619      	mov	r1, r3
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f002 fcfc 	bl	800c0ae <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 80096b6:	7bfb      	ldrb	r3, [r7, #15]
 80096b8:	4a18      	ldr	r2, [pc, #96]	@ (800971c <USBD_CDC_DeInit+0xdc>)
 80096ba:	5cd3      	ldrb	r3, [r2, r3]
 80096bc:	f003 020f 	and.w	r2, r3, #15
 80096c0:	6879      	ldr	r1, [r7, #4]
 80096c2:	4613      	mov	r3, r2
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	4413      	add	r3, r2
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	440b      	add	r3, r1
 80096cc:	3324      	adds	r3, #36	@ 0x24
 80096ce:	2200      	movs	r2, #0
 80096d0:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 80096d2:	7bfb      	ldrb	r3, [r7, #15]
 80096d4:	4a11      	ldr	r2, [pc, #68]	@ (800971c <USBD_CDC_DeInit+0xdc>)
 80096d6:	5cd3      	ldrb	r3, [r2, r3]
 80096d8:	f003 020f 	and.w	r2, r3, #15
 80096dc:	6879      	ldr	r1, [r7, #4]
 80096de:	4613      	mov	r3, r2
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	4413      	add	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	440b      	add	r3, r1
 80096e8:	3326      	adds	r3, #38	@ 0x26
 80096ea:	2200      	movs	r2, #0
 80096ec:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	7bfa      	ldrb	r2, [r7, #15]
 80096f8:	4610      	mov	r0, r2
 80096fa:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80096fc:	7bfb      	ldrb	r3, [r7, #15]
 80096fe:	3301      	adds	r3, #1
 8009700:	73fb      	strb	r3, [r7, #15]
 8009702:	7bfb      	ldrb	r3, [r7, #15]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d0a4      	beq.n	8009652 <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	20002514 	.word	0x20002514
 8009718:	20002518 	.word	0x20002518
 800971c:	2000251c 	.word	0x2000251c

08009720 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009720:	b590      	push	{r4, r7, lr}
 8009722:	b087      	sub	sp, #28
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800972a:	2300      	movs	r3, #0
 800972c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800972e:	2300      	movs	r3, #0
 8009730:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009732:	2300      	movs	r3, #0
 8009734:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009736:	2300      	movs	r3, #0
 8009738:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 800973a:	2300      	movs	r3, #0
 800973c:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800973e:	2300      	movs	r3, #0
 8009740:	757b      	strb	r3, [r7, #21]
 8009742:	e015      	b.n	8009770 <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	889b      	ldrh	r3, [r3, #4]
 8009748:	b2da      	uxtb	r2, r3
 800974a:	7d7b      	ldrb	r3, [r7, #21]
 800974c:	496d      	ldr	r1, [pc, #436]	@ (8009904 <USBD_CDC_Setup+0x1e4>)
 800974e:	5ccb      	ldrb	r3, [r1, r3]
 8009750:	429a      	cmp	r2, r3
 8009752:	d007      	beq.n	8009764 <USBD_CDC_Setup+0x44>
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	889b      	ldrh	r3, [r3, #4]
 8009758:	b2da      	uxtb	r2, r3
 800975a:	7d7b      	ldrb	r3, [r7, #21]
 800975c:	496a      	ldr	r1, [pc, #424]	@ (8009908 <USBD_CDC_Setup+0x1e8>)
 800975e:	5ccb      	ldrb	r3, [r1, r3]
 8009760:	429a      	cmp	r2, r3
 8009762:	d102      	bne.n	800976a <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 8009764:	7d7b      	ldrb	r3, [r7, #21]
 8009766:	75bb      	strb	r3, [r7, #22]
      break;
 8009768:	e005      	b.n	8009776 <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800976a:	7d7b      	ldrb	r3, [r7, #21]
 800976c:	3301      	adds	r3, #1
 800976e:	757b      	strb	r3, [r7, #21]
 8009770:	7d7b      	ldrb	r3, [r7, #21]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d0e6      	beq.n	8009744 <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 8009776:	7dbb      	ldrb	r3, [r7, #22]
 8009778:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800977c:	fb02 f303 	mul.w	r3, r2, r3
 8009780:	4a62      	ldr	r2, [pc, #392]	@ (800990c <USBD_CDC_Setup+0x1ec>)
 8009782:	4413      	add	r3, r2
 8009784:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800978e:	2b00      	cmp	r3, #0
 8009790:	d04a      	beq.n	8009828 <USBD_CDC_Setup+0x108>
 8009792:	2b20      	cmp	r3, #32
 8009794:	f040 80aa 	bne.w	80098ec <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	88db      	ldrh	r3, [r3, #6]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d038      	beq.n	8009812 <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	b25b      	sxtb	r3, r3
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	da1d      	bge.n	80097e6 <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80097b0:	689c      	ldr	r4, [r3, #8]
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	7859      	ldrb	r1, [r3, #1]
 80097b6:	7dbb      	ldrb	r3, [r7, #22]
 80097b8:	025b      	lsls	r3, r3, #9
 80097ba:	693a      	ldr	r2, [r7, #16]
 80097bc:	441a      	add	r2, r3
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	88db      	ldrh	r3, [r3, #6]
 80097c2:	7db8      	ldrb	r0, [r7, #22]
 80097c4:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	88db      	ldrh	r3, [r3, #6]
 80097ca:	2b07      	cmp	r3, #7
 80097cc:	bf28      	it	cs
 80097ce:	2307      	movcs	r3, #7
 80097d0:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 80097d2:	7dbb      	ldrb	r3, [r7, #22]
 80097d4:	025b      	lsls	r3, r3, #9
 80097d6:	693a      	ldr	r2, [r7, #16]
 80097d8:	4413      	add	r3, r2
 80097da:	89fa      	ldrh	r2, [r7, #14]
 80097dc:	4619      	mov	r1, r3
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f002 fa2d 	bl	800bc3e <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 80097e4:	e089      	b.n	80098fa <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	785a      	ldrb	r2, [r3, #1]
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	88db      	ldrh	r3, [r3, #6]
 80097f4:	b2da      	uxtb	r2, r3
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 80097fc:	7dbb      	ldrb	r3, [r7, #22]
 80097fe:	025b      	lsls	r3, r3, #9
 8009800:	693a      	ldr	r2, [r7, #16]
 8009802:	18d1      	adds	r1, r2, r3
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	88db      	ldrh	r3, [r3, #6]
 8009808:	461a      	mov	r2, r3
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f002 fa43 	bl	800bc96 <USBD_CtlPrepareRx>
    break;
 8009810:	e073      	b.n	80098fa <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009818:	689c      	ldr	r4, [r3, #8]
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	7859      	ldrb	r1, [r3, #1]
 800981e:	7db8      	ldrb	r0, [r7, #22]
 8009820:	2300      	movs	r3, #0
 8009822:	683a      	ldr	r2, [r7, #0]
 8009824:	47a0      	blx	r4
    break;
 8009826:	e068      	b.n	80098fa <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	785b      	ldrb	r3, [r3, #1]
 800982c:	2b0b      	cmp	r3, #11
 800982e:	d852      	bhi.n	80098d6 <USBD_CDC_Setup+0x1b6>
 8009830:	a201      	add	r2, pc, #4	@ (adr r2, 8009838 <USBD_CDC_Setup+0x118>)
 8009832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009836:	bf00      	nop
 8009838:	08009869 	.word	0x08009869
 800983c:	080098e5 	.word	0x080098e5
 8009840:	080098d7 	.word	0x080098d7
 8009844:	080098d7 	.word	0x080098d7
 8009848:	080098d7 	.word	0x080098d7
 800984c:	080098d7 	.word	0x080098d7
 8009850:	080098d7 	.word	0x080098d7
 8009854:	080098d7 	.word	0x080098d7
 8009858:	080098d7 	.word	0x080098d7
 800985c:	080098d7 	.word	0x080098d7
 8009860:	08009893 	.word	0x08009893
 8009864:	080098bd 	.word	0x080098bd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800986e:	b2db      	uxtb	r3, r3
 8009870:	2b03      	cmp	r3, #3
 8009872:	d107      	bne.n	8009884 <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009874:	f107 030a 	add.w	r3, r7, #10
 8009878:	2202      	movs	r2, #2
 800987a:	4619      	mov	r1, r3
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f002 f9de 	bl	800bc3e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009882:	e032      	b.n	80098ea <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8009884:	6839      	ldr	r1, [r7, #0]
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f002 f968 	bl	800bb5c <USBD_CtlError>
        ret = USBD_FAIL;
 800988c:	2303      	movs	r3, #3
 800988e:	75fb      	strb	r3, [r7, #23]
      break;
 8009890:	e02b      	b.n	80098ea <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009898:	b2db      	uxtb	r3, r3
 800989a:	2b03      	cmp	r3, #3
 800989c:	d107      	bne.n	80098ae <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800989e:	f107 030d 	add.w	r3, r7, #13
 80098a2:	2201      	movs	r2, #1
 80098a4:	4619      	mov	r1, r3
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f002 f9c9 	bl	800bc3e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80098ac:	e01d      	b.n	80098ea <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 80098ae:	6839      	ldr	r1, [r7, #0]
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f002 f953 	bl	800bb5c <USBD_CtlError>
        ret = USBD_FAIL;
 80098b6:	2303      	movs	r3, #3
 80098b8:	75fb      	strb	r3, [r7, #23]
      break;
 80098ba:	e016      	b.n	80098ea <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	2b03      	cmp	r3, #3
 80098c6:	d00f      	beq.n	80098e8 <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 80098c8:	6839      	ldr	r1, [r7, #0]
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f002 f946 	bl	800bb5c <USBD_CtlError>
        ret = USBD_FAIL;
 80098d0:	2303      	movs	r3, #3
 80098d2:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80098d4:	e008      	b.n	80098e8 <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80098d6:	6839      	ldr	r1, [r7, #0]
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f002 f93f 	bl	800bb5c <USBD_CtlError>
      ret = USBD_FAIL;
 80098de:	2303      	movs	r3, #3
 80098e0:	75fb      	strb	r3, [r7, #23]
      break;
 80098e2:	e002      	b.n	80098ea <USBD_CDC_Setup+0x1ca>
      break;
 80098e4:	bf00      	nop
 80098e6:	e008      	b.n	80098fa <USBD_CDC_Setup+0x1da>
      break;
 80098e8:	bf00      	nop
    }
    break;
 80098ea:	e006      	b.n	80098fa <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 80098ec:	6839      	ldr	r1, [r7, #0]
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f002 f934 	bl	800bb5c <USBD_CtlError>
    ret = USBD_FAIL;
 80098f4:	2303      	movs	r3, #3
 80098f6:	75fb      	strb	r3, [r7, #23]
    break;
 80098f8:	bf00      	nop
  }

  return (uint8_t)ret;
 80098fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	371c      	adds	r7, #28
 8009900:	46bd      	mov	sp, r7
 8009902:	bd90      	pop	{r4, r7, pc}
 8009904:	20002520 	.word	0x20002520
 8009908:	20002524 	.word	0x20002524
 800990c:	2000252c 	.word	0x2000252c

08009910 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009910:	b590      	push	{r4, r7, lr}
 8009912:	b087      	sub	sp, #28
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	460b      	mov	r3, r1
 800991a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800991c:	2300      	movs	r3, #0
 800991e:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 8009926:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 8009928:	2300      	movs	r3, #0
 800992a:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800992c:	2300      	movs	r3, #0
 800992e:	75bb      	strb	r3, [r7, #22]
 8009930:	e00d      	b.n	800994e <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 8009932:	78fa      	ldrb	r2, [r7, #3]
 8009934:	7dbb      	ldrb	r3, [r7, #22]
 8009936:	4934      	ldr	r1, [pc, #208]	@ (8009a08 <USBD_CDC_DataIn+0xf8>)
 8009938:	5ccb      	ldrb	r3, [r1, r3]
 800993a:	f003 030f 	and.w	r3, r3, #15
 800993e:	429a      	cmp	r2, r3
 8009940:	d102      	bne.n	8009948 <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 8009942:	7dbb      	ldrb	r3, [r7, #22]
 8009944:	75fb      	strb	r3, [r7, #23]
      break;
 8009946:	e005      	b.n	8009954 <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009948:	7dbb      	ldrb	r3, [r7, #22]
 800994a:	3301      	adds	r3, #1
 800994c:	75bb      	strb	r3, [r7, #22]
 800994e:	7dbb      	ldrb	r3, [r7, #22]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d0ee      	beq.n	8009932 <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8009954:	7dfb      	ldrb	r3, [r7, #23]
 8009956:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800995a:	fb02 f303 	mul.w	r3, r2, r3
 800995e:	4a2b      	ldr	r2, [pc, #172]	@ (8009a0c <USBD_CDC_DataIn+0xfc>)
 8009960:	4413      	add	r3, r2
 8009962:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009964:	78fa      	ldrb	r2, [r7, #3]
 8009966:	6879      	ldr	r1, [r7, #4]
 8009968:	4613      	mov	r3, r2
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	4413      	add	r3, r2
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	440b      	add	r3, r1
 8009972:	3318      	adds	r3, #24
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d029      	beq.n	80099ce <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800997a:	78fa      	ldrb	r2, [r7, #3]
 800997c:	6879      	ldr	r1, [r7, #4]
 800997e:	4613      	mov	r3, r2
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	4413      	add	r3, r2
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	440b      	add	r3, r1
 8009988:	3318      	adds	r3, #24
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	78f9      	ldrb	r1, [r7, #3]
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	460b      	mov	r3, r1
 8009992:	00db      	lsls	r3, r3, #3
 8009994:	440b      	add	r3, r1
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	4403      	add	r3, r0
 800999a:	331c      	adds	r3, #28
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	fbb2 f1f3 	udiv	r1, r2, r3
 80099a2:	fb01 f303 	mul.w	r3, r1, r3
 80099a6:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d110      	bne.n	80099ce <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80099ac:	78fa      	ldrb	r2, [r7, #3]
 80099ae:	6879      	ldr	r1, [r7, #4]
 80099b0:	4613      	mov	r3, r2
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	4413      	add	r3, r2
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	440b      	add	r3, r1
 80099ba:	3318      	adds	r3, #24
 80099bc:	2200      	movs	r2, #0
 80099be:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80099c0:	78f9      	ldrb	r1, [r7, #3]
 80099c2:	2300      	movs	r3, #0
 80099c4:	2200      	movs	r2, #0
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f002 fc19 	bl	800c1fe <USBD_LL_Transmit>
 80099cc:	e016      	b.n	80099fc <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d00c      	beq.n	80099fc <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80099e8:	691c      	ldr	r4, [r3, #16]
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80099f6:	78fb      	ldrb	r3, [r7, #3]
 80099f8:	7df8      	ldrb	r0, [r7, #23]
 80099fa:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	371c      	adds	r7, #28
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd90      	pop	{r4, r7, pc}
 8009a06:	bf00      	nop
 8009a08:	20002514 	.word	0x20002514
 8009a0c:	2000252c 	.word	0x2000252c

08009a10 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	460b      	mov	r3, r1
 8009a1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 8009a20:	2300      	movs	r3, #0
 8009a22:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009a24:	2300      	movs	r3, #0
 8009a26:	73bb      	strb	r3, [r7, #14]
 8009a28:	e00b      	b.n	8009a42 <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 8009a2a:	7bbb      	ldrb	r3, [r7, #14]
 8009a2c:	4a17      	ldr	r2, [pc, #92]	@ (8009a8c <USBD_CDC_DataOut+0x7c>)
 8009a2e:	5cd3      	ldrb	r3, [r2, r3]
 8009a30:	78fa      	ldrb	r2, [r7, #3]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d102      	bne.n	8009a3c <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 8009a36:	7bbb      	ldrb	r3, [r7, #14]
 8009a38:	73fb      	strb	r3, [r7, #15]
      break;
 8009a3a:	e005      	b.n	8009a48 <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009a3c:	7bbb      	ldrb	r3, [r7, #14]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	73bb      	strb	r3, [r7, #14]
 8009a42:	7bbb      	ldrb	r3, [r7, #14]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d0f0      	beq.n	8009a2a <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8009a48:	7bfb      	ldrb	r3, [r7, #15]
 8009a4a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009a4e:	fb02 f303 	mul.w	r3, r2, r3
 8009a52:	4a0f      	ldr	r2, [pc, #60]	@ (8009a90 <USBD_CDC_DataOut+0x80>)
 8009a54:	4413      	add	r3, r2
 8009a56:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009a58:	78fb      	ldrb	r3, [r7, #3]
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f002 fc10 	bl	800c282 <USBD_LL_GetRxDataSize>
 8009a62:	4602      	mov	r2, r0
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	f8d2 1204 	ldr.w	r1, [r2, #516]	@ 0x204
 8009a78:	68ba      	ldr	r2, [r7, #8]
 8009a7a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009a7e:	7bf8      	ldrb	r0, [r7, #15]
 8009a80:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009a82:	2300      	movs	r3, #0
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	20002518 	.word	0x20002518
 8009a90:	2000252c 	.word	0x2000252c

08009a94 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009a94:	b590      	push	{r4, r7, lr}
 8009a96:	b085      	sub	sp, #20
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	73fb      	strb	r3, [r7, #15]
 8009aa4:	e02d      	b.n	8009b02 <USBD_CDC_EP0_RxReady+0x6e>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 8009aa6:	7bfb      	ldrb	r3, [r7, #15]
 8009aa8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009aac:	fb02 f303 	mul.w	r3, r2, r3
 8009ab0:	4a18      	ldr	r2, [pc, #96]	@ (8009b14 <USBD_CDC_EP0_RxReady+0x80>)
 8009ab2:	4413      	add	r3, r2
 8009ab4:	60bb      	str	r3, [r7, #8]

    if (hcdc == NULL)
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d101      	bne.n	8009ac0 <USBD_CDC_EP0_RxReady+0x2c>
    {
      return (uint8_t)USBD_FAIL;
 8009abc:	2303      	movs	r3, #3
 8009abe:	e024      	b.n	8009b0a <USBD_CDC_EP0_RxReady+0x76>
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d018      	beq.n	8009afc <USBD_CDC_EP0_RxReady+0x68>
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009ad0:	2bff      	cmp	r3, #255	@ 0xff
 8009ad2:	d013      	beq.n	8009afc <USBD_CDC_EP0_RxReady+0x68>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009ada:	689c      	ldr	r4, [r3, #8]
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 8009ae2:	7bfb      	ldrb	r3, [r7, #15]
 8009ae4:	025b      	lsls	r3, r3, #9
 8009ae6:	68ba      	ldr	r2, [r7, #8]
 8009ae8:	441a      	add	r2, r3
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009af0:	7bf8      	ldrb	r0, [r7, #15]
 8009af2:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	22ff      	movs	r2, #255	@ 0xff
 8009af8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009afc:	7bfb      	ldrb	r3, [r7, #15]
 8009afe:	3301      	adds	r3, #1
 8009b00:	73fb      	strb	r3, [r7, #15]
 8009b02:	7bfb      	ldrb	r3, [r7, #15]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d0ce      	beq.n	8009aa6 <USBD_CDC_EP0_RxReady+0x12>
    }
  }

  return (uint8_t)USBD_OK;
 8009b08:	2300      	movs	r3, #0
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3714      	adds	r7, #20
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd90      	pop	{r4, r7, pc}
 8009b12:	bf00      	nop
 8009b14:	2000252c 	.word	0x2000252c

08009b18 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	224b      	movs	r2, #75	@ 0x4b
 8009b24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009b26:	4b03      	ldr	r3, [pc, #12]	@ (8009b34 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr
 8009b34:	20000144 	.word	0x20000144

08009b38 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	224b      	movs	r2, #75	@ 0x4b
 8009b44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009b46:	4b03      	ldr	r3, [pc, #12]	@ (8009b54 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr
 8009b54:	200000f8 	.word	0x200000f8

08009b58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	224b      	movs	r2, #75	@ 0x4b
 8009b64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009b66:	4b03      	ldr	r3, [pc, #12]	@ (8009b74 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr
 8009b74:	20000144 	.word	0x20000144

08009b78 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	220a      	movs	r2, #10
 8009b84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009b86:	4b03      	ldr	r3, [pc, #12]	@ (8009b94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	370c      	adds	r7, #12
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr
 8009b94:	200000b0 	.word	0x200000b0

08009b98 <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d101      	bne.n	8009bac <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009ba8:	2303      	movs	r3, #3
 8009baa:	e004      	b.n	8009bb6 <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	683a      	ldr	r2, [r7, #0]
 8009bb0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8009bb4:	2300      	movs	r3, #0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	370c      	adds	r7, #12
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr
	...

08009bc4 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b087      	sub	sp, #28
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60b9      	str	r1, [r7, #8]
 8009bcc:	607a      	str	r2, [r7, #4]
 8009bce:	603b      	str	r3, [r7, #0]
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
 8009bda:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009bde:	fb02 f303 	mul.w	r3, r2, r3
 8009be2:	4a09      	ldr	r2, [pc, #36]	@ (8009c08 <USBD_CDC_SetTxBuffer+0x44>)
 8009be4:	4413      	add	r3, r2
 8009be6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	683a      	ldr	r2, [r7, #0]
 8009bf4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	371c      	adds	r7, #28
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop
 8009c08:	2000252c 	.word	0x2000252c

08009c0c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b087      	sub	sp, #28
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	4603      	mov	r3, r0
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]
 8009c18:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8009c1e:	7bfb      	ldrb	r3, [r7, #15]
 8009c20:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009c24:	fb02 f303 	mul.w	r3, r2, r3
 8009c28:	4a06      	ldr	r2, [pc, #24]	@ (8009c44 <USBD_CDC_SetRxBuffer+0x38>)
 8009c2a:	4413      	add	r3, r2
 8009c2c:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009c36:	2300      	movs	r3, #0
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	371c      	adds	r7, #28
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr
 8009c44:	2000252c 	.word	0x2000252c

08009c48 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	4603      	mov	r3, r0
 8009c50:	6039      	str	r1, [r7, #0]
 8009c52:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009c54:	2300      	movs	r3, #0
 8009c56:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 8009c5c:	79fb      	ldrb	r3, [r7, #7]
 8009c5e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009c62:	fb02 f303 	mul.w	r3, r2, r3
 8009c66:	4a17      	ldr	r2, [pc, #92]	@ (8009cc4 <USBD_CDC_TransmitPacket+0x7c>)
 8009c68:	4413      	add	r3, r2
 8009c6a:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d121      	bne.n	8009cba <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 8009c7e:	79fb      	ldrb	r3, [r7, #7]
 8009c80:	4a11      	ldr	r2, [pc, #68]	@ (8009cc8 <USBD_CDC_TransmitPacket+0x80>)
 8009c82:	5cd3      	ldrb	r3, [r2, r3]
 8009c84:	f003 020f 	and.w	r2, r3, #15
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009c8e:	6838      	ldr	r0, [r7, #0]
 8009c90:	4613      	mov	r3, r2
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	4413      	add	r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	4403      	add	r3, r0
 8009c9a:	3318      	adds	r3, #24
 8009c9c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 8009c9e:	79fb      	ldrb	r3, [r7, #7]
 8009ca0:	4a09      	ldr	r2, [pc, #36]	@ (8009cc8 <USBD_CDC_TransmitPacket+0x80>)
 8009ca2:	5cd1      	ldrb	r1, [r2, r3]
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009cb0:	6838      	ldr	r0, [r7, #0]
 8009cb2:	f002 faa4 	bl	800c1fe <USBD_LL_Transmit>

    ret = USBD_OK;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3710      	adds	r7, #16
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	2000252c 	.word	0x2000252c
 8009cc8:	20002514 	.word	0x20002514

08009ccc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	6039      	str	r1, [r7, #0]
 8009cd6:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 8009cdc:	79fb      	ldrb	r3, [r7, #7]
 8009cde:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009ce2:	fb02 f303 	mul.w	r3, r2, r3
 8009ce6:	4a11      	ldr	r2, [pc, #68]	@ (8009d2c <USBD_CDC_ReceivePacket+0x60>)
 8009ce8:	4413      	add	r3, r2
 8009cea:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	7c1b      	ldrb	r3, [r3, #16]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d10b      	bne.n	8009d0c <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8009cf4:	79fb      	ldrb	r3, [r7, #7]
 8009cf6:	4a0e      	ldr	r2, [pc, #56]	@ (8009d30 <USBD_CDC_ReceivePacket+0x64>)
 8009cf8:	5cd1      	ldrb	r1, [r2, r3]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009d04:	6838      	ldr	r0, [r7, #0]
 8009d06:	f002 fa9b 	bl	800c240 <USBD_LL_PrepareReceive>
 8009d0a:	e009      	b.n	8009d20 <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8009d0c:	79fb      	ldrb	r3, [r7, #7]
 8009d0e:	4a08      	ldr	r2, [pc, #32]	@ (8009d30 <USBD_CDC_ReceivePacket+0x64>)
 8009d10:	5cd1      	ldrb	r1, [r2, r3]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d18:	2340      	movs	r3, #64	@ 0x40
 8009d1a:	6838      	ldr	r0, [r7, #0]
 8009d1c:	f002 fa90 	bl	800c240 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	2000252c 	.word	0x2000252c
 8009d30:	20002518 	.word	0x20002518

08009d34 <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	4608      	mov	r0, r1
 8009d3e:	4611      	mov	r1, r2
 8009d40:	461a      	mov	r2, r3
 8009d42:	4603      	mov	r3, r0
 8009d44:	70fb      	strb	r3, [r7, #3]
 8009d46:	460b      	mov	r3, r1
 8009d48:	70bb      	strb	r3, [r7, #2]
 8009d4a:	4613      	mov	r3, r2
 8009d4c:	707b      	strb	r3, [r7, #1]
  desc += 9;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	3309      	adds	r3, #9
 8009d52:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009d54:	2300      	movs	r3, #0
 8009d56:	73fb      	strb	r3, [r7, #15]
 8009d58:	e05b      	b.n	8009e12 <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	3302      	adds	r3, #2
 8009d5e:	78fa      	ldrb	r2, [r7, #3]
 8009d60:	701a      	strb	r2, [r3, #0]
    desc[16] = str_idx;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	3310      	adds	r3, #16
 8009d66:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009d6a:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	330a      	adds	r3, #10
 8009d70:	78fa      	ldrb	r2, [r7, #3]
 8009d72:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	331a      	adds	r3, #26
 8009d78:	78ba      	ldrb	r2, [r7, #2]
 8009d7a:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	3322      	adds	r3, #34	@ 0x22
 8009d80:	78fa      	ldrb	r2, [r7, #3]
 8009d82:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	3323      	adds	r3, #35	@ 0x23
 8009d88:	78ba      	ldrb	r2, [r7, #2]
 8009d8a:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	3326      	adds	r3, #38	@ 0x26
 8009d90:	7e3a      	ldrb	r2, [r7, #24]
 8009d92:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	332d      	adds	r3, #45	@ 0x2d
 8009d98:	78ba      	ldrb	r2, [r7, #2]
 8009d9a:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	3336      	adds	r3, #54	@ 0x36
 8009da0:	7f3a      	ldrb	r2, [r7, #28]
 8009da2:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	333d      	adds	r3, #61	@ 0x3d
 8009da8:	787a      	ldrb	r2, [r7, #1]
 8009daa:	701a      	strb	r2, [r3, #0]

    desc += 66;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	3342      	adds	r3, #66	@ 0x42
 8009db0:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 8009db2:	7bfb      	ldrb	r3, [r7, #15]
 8009db4:	491c      	ldr	r1, [pc, #112]	@ (8009e28 <USBD_Update_CDC_ACM_DESC+0xf4>)
 8009db6:	787a      	ldrb	r2, [r7, #1]
 8009db8:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 8009dba:	7bfb      	ldrb	r3, [r7, #15]
 8009dbc:	491b      	ldr	r1, [pc, #108]	@ (8009e2c <USBD_Update_CDC_ACM_DESC+0xf8>)
 8009dbe:	7f3a      	ldrb	r2, [r7, #28]
 8009dc0:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 8009dc2:	7bfb      	ldrb	r3, [r7, #15]
 8009dc4:	491a      	ldr	r1, [pc, #104]	@ (8009e30 <USBD_Update_CDC_ACM_DESC+0xfc>)
 8009dc6:	7e3a      	ldrb	r2, [r7, #24]
 8009dc8:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 8009dca:	7bfb      	ldrb	r3, [r7, #15]
 8009dcc:	4919      	ldr	r1, [pc, #100]	@ (8009e34 <USBD_Update_CDC_ACM_DESC+0x100>)
 8009dce:	78fa      	ldrb	r2, [r7, #3]
 8009dd0:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 8009dd2:	7bfb      	ldrb	r3, [r7, #15]
 8009dd4:	4918      	ldr	r1, [pc, #96]	@ (8009e38 <USBD_Update_CDC_ACM_DESC+0x104>)
 8009dd6:	78ba      	ldrb	r2, [r7, #2]
 8009dd8:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 8009dda:	7bfb      	ldrb	r3, [r7, #15]
 8009ddc:	4917      	ldr	r1, [pc, #92]	@ (8009e3c <USBD_Update_CDC_ACM_DESC+0x108>)
 8009dde:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009de2:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 8009de4:	787b      	ldrb	r3, [r7, #1]
 8009de6:	3302      	adds	r3, #2
 8009de8:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 8009dea:	787b      	ldrb	r3, [r7, #1]
 8009dec:	3301      	adds	r3, #1
 8009dee:	763b      	strb	r3, [r7, #24]
    out_ep++;
 8009df0:	7f3b      	ldrb	r3, [r7, #28]
 8009df2:	3301      	adds	r3, #1
 8009df4:	773b      	strb	r3, [r7, #28]
    str_idx++;
 8009df6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 8009e00:	78fb      	ldrb	r3, [r7, #3]
 8009e02:	3302      	adds	r3, #2
 8009e04:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 8009e06:	78fb      	ldrb	r3, [r7, #3]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8009e0c:	7bfb      	ldrb	r3, [r7, #15]
 8009e0e:	3301      	adds	r3, #1
 8009e10:	73fb      	strb	r3, [r7, #15]
 8009e12:	7bfb      	ldrb	r3, [r7, #15]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d0a0      	beq.n	8009d5a <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 8009e18:	bf00      	nop
 8009e1a:	bf00      	nop
 8009e1c:	3714      	adds	r7, #20
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	20002514 	.word	0x20002514
 8009e2c:	20002518 	.word	0x20002518
 8009e30:	2000251c 	.word	0x2000251c
 8009e34:	20002520 	.word	0x20002520
 8009e38:	20002524 	.word	0x20002524
 8009e3c:	20002528 	.word	0x20002528

08009e40 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	460b      	mov	r3, r1
 8009e4a:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 8009e4c:	4b08      	ldr	r3, [pc, #32]	@ (8009e70 <USBD_COMPOSITE_Init+0x30>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	78fa      	ldrb	r2, [r7, #3]
 8009e52:	4611      	mov	r1, r2
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.Init(pdev, cfgidx);
 8009e58:	4b06      	ldr	r3, [pc, #24]	@ (8009e74 <USBD_COMPOSITE_Init+0x34>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	78fa      	ldrb	r2, [r7, #3]
 8009e5e:	4611      	mov	r1, r2
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	200000bc 	.word	0x200000bc
 8009e74:	200001dc 	.word	0x200001dc

08009e78 <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	460b      	mov	r3, r1
 8009e82:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 8009e84:	4b08      	ldr	r3, [pc, #32]	@ (8009ea8 <USBD_COMPOSITE_DeInit+0x30>)
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	78fa      	ldrb	r2, [r7, #3]
 8009e8a:	4611      	mov	r1, r2
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	4798      	blx	r3
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.DeInit(pdev, cfgidx);
 8009e90:	4b06      	ldr	r3, [pc, #24]	@ (8009eac <USBD_COMPOSITE_DeInit+0x34>)
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	78fa      	ldrb	r2, [r7, #3]
 8009e96:	4611      	mov	r1, r2
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8009e9c:	2300      	movs	r3, #0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3708      	adds	r7, #8
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	200000bc 	.word	0x200000bc
 8009eac:	200001dc 	.word	0x200001dc

08009eb0 <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009eba:	2300      	movs	r3, #0
 8009ebc:	73fb      	strb	r3, [r7, #15]
 8009ebe:	e019      	b.n	8009ef4 <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	889b      	ldrh	r3, [r3, #4]
 8009ec4:	b2da      	uxtb	r2, r3
 8009ec6:	7bfb      	ldrb	r3, [r7, #15]
 8009ec8:	4915      	ldr	r1, [pc, #84]	@ (8009f20 <USBD_COMPOSITE_Setup+0x70>)
 8009eca:	5ccb      	ldrb	r3, [r1, r3]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d007      	beq.n	8009ee0 <USBD_COMPOSITE_Setup+0x30>
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	889b      	ldrh	r3, [r3, #4]
 8009ed4:	b2da      	uxtb	r2, r3
 8009ed6:	7bfb      	ldrb	r3, [r7, #15]
 8009ed8:	4912      	ldr	r1, [pc, #72]	@ (8009f24 <USBD_COMPOSITE_Setup+0x74>)
 8009eda:	5ccb      	ldrb	r3, [r1, r3]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d106      	bne.n	8009eee <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 8009ee0:	4b11      	ldr	r3, [pc, #68]	@ (8009f28 <USBD_COMPOSITE_Setup+0x78>)
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	6839      	ldr	r1, [r7, #0]
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	4798      	blx	r3
 8009eea:	4603      	mov	r3, r0
 8009eec:	e014      	b.n	8009f18 <USBD_COMPOSITE_Setup+0x68>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009eee:	7bfb      	ldrb	r3, [r7, #15]
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	73fb      	strb	r3, [r7, #15]
 8009ef4:	7bfb      	ldrb	r3, [r7, #15]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d0e2      	beq.n	8009ec0 <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_HID_KEYBOARD.Setup(pdev, req);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (LOBYTE(req->wIndex) == CUSTOM_HID_ITF_NBR)
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	889b      	ldrh	r3, [r3, #4]
 8009efe:	b2da      	uxtb	r2, r3
 8009f00:	4b0a      	ldr	r3, [pc, #40]	@ (8009f2c <USBD_COMPOSITE_Setup+0x7c>)
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d106      	bne.n	8009f16 <USBD_COMPOSITE_Setup+0x66>
  {
    return USBD_HID_CUSTOM.Setup(pdev, req);
 8009f08:	4b09      	ldr	r3, [pc, #36]	@ (8009f30 <USBD_COMPOSITE_Setup+0x80>)
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	6839      	ldr	r1, [r7, #0]
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	4798      	blx	r3
 8009f12:	4603      	mov	r3, r0
 8009f14:	e000      	b.n	8009f18 <USBD_COMPOSITE_Setup+0x68>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 8009f16:	2303      	movs	r3, #3
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	20002520 	.word	0x20002520
 8009f24:	20002524 	.word	0x20002524
 8009f28:	200000bc 	.word	0x200000bc
 8009f2c:	20002860 	.word	0x20002860
 8009f30:	200001dc 	.word	0x200001dc

08009f34 <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009f40:	2300      	movs	r3, #0
 8009f42:	73fb      	strb	r3, [r7, #15]
 8009f44:	e01a      	b.n	8009f7c <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 8009f46:	78fa      	ldrb	r2, [r7, #3]
 8009f48:	7bfb      	ldrb	r3, [r7, #15]
 8009f4a:	4918      	ldr	r1, [pc, #96]	@ (8009fac <USBD_COMPOSITE_DataIn+0x78>)
 8009f4c:	5ccb      	ldrb	r3, [r1, r3]
 8009f4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d007      	beq.n	8009f66 <USBD_COMPOSITE_DataIn+0x32>
 8009f56:	78fa      	ldrb	r2, [r7, #3]
 8009f58:	7bfb      	ldrb	r3, [r7, #15]
 8009f5a:	4915      	ldr	r1, [pc, #84]	@ (8009fb0 <USBD_COMPOSITE_DataIn+0x7c>)
 8009f5c:	5ccb      	ldrb	r3, [r1, r3]
 8009f5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d107      	bne.n	8009f76 <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 8009f66:	4b13      	ldr	r3, [pc, #76]	@ (8009fb4 <USBD_COMPOSITE_DataIn+0x80>)
 8009f68:	695b      	ldr	r3, [r3, #20]
 8009f6a:	78fa      	ldrb	r2, [r7, #3]
 8009f6c:	4611      	mov	r1, r2
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	4798      	blx	r3
 8009f72:	4603      	mov	r3, r0
 8009f74:	e015      	b.n	8009fa2 <USBD_COMPOSITE_DataIn+0x6e>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009f76:	7bfb      	ldrb	r3, [r7, #15]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	73fb      	strb	r3, [r7, #15]
 8009f7c:	7bfb      	ldrb	r3, [r7, #15]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d0e1      	beq.n	8009f46 <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_HID_KEYBOARD.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == (CUSTOM_HID_IN_EP & 0x7F))
 8009f82:	78fa      	ldrb	r2, [r7, #3]
 8009f84:	4b0c      	ldr	r3, [pc, #48]	@ (8009fb8 <USBD_COMPOSITE_DataIn+0x84>)
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d107      	bne.n	8009fa0 <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_HID_CUSTOM.DataIn(pdev, epnum);
 8009f90:	4b0a      	ldr	r3, [pc, #40]	@ (8009fbc <USBD_COMPOSITE_DataIn+0x88>)
 8009f92:	695b      	ldr	r3, [r3, #20]
 8009f94:	78fa      	ldrb	r2, [r7, #3]
 8009f96:	4611      	mov	r1, r2
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	4798      	blx	r3
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	e000      	b.n	8009fa2 <USBD_COMPOSITE_DataIn+0x6e>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8009fa0:	2303      	movs	r3, #3
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	20002514 	.word	0x20002514
 8009fb0:	2000251c 	.word	0x2000251c
 8009fb4:	200000bc 	.word	0x200000bc
 8009fb8:	200001da 	.word	0x200001da
 8009fbc:	200001dc 	.word	0x200001dc

08009fc0 <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 8009fc8:	4b06      	ldr	r3, [pc, #24]	@ (8009fe4 <USBD_COMPOSITE_EP0_RxReady+0x24>)
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	4798      	blx	r3
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.EP0_RxReady(pdev);
 8009fd0:	4b05      	ldr	r3, [pc, #20]	@ (8009fe8 <USBD_COMPOSITE_EP0_RxReady+0x28>)
 8009fd2:	691b      	ldr	r3, [r3, #16]
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3708      	adds	r7, #8
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	200000bc 	.word	0x200000bc
 8009fe8:	200001dc 	.word	0x200001dc

08009fec <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8009ff4:	2300      	movs	r3, #0
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	370c      	adds	r7, #12
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr

0800a002 <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 800a002:	b480      	push	{r7}
 800a004:	b083      	sub	sp, #12
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	370c      	adds	r7, #12
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr

0800a018 <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	460b      	mov	r3, r1
 800a022:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	370c      	adds	r7, #12
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr

0800a032 <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a032:	b480      	push	{r7}
 800a034:	b083      	sub	sp, #12
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
 800a03a:	460b      	mov	r3, r1
 800a03c:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800a03e:	2300      	movs	r3, #0
}
 800a040:	4618      	mov	r0, r3
 800a042:	370c      	adds	r7, #12
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	460b      	mov	r3, r1
 800a056:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a058:	2300      	movs	r3, #0
 800a05a:	73fb      	strb	r3, [r7, #15]
 800a05c:	e010      	b.n	800a080 <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 800a05e:	7bfb      	ldrb	r3, [r7, #15]
 800a060:	4a12      	ldr	r2, [pc, #72]	@ (800a0ac <USBD_COMPOSITE_DataOut+0x60>)
 800a062:	5cd3      	ldrb	r3, [r2, r3]
 800a064:	78fa      	ldrb	r2, [r7, #3]
 800a066:	429a      	cmp	r2, r3
 800a068:	d107      	bne.n	800a07a <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 800a06a:	4b11      	ldr	r3, [pc, #68]	@ (800a0b0 <USBD_COMPOSITE_DataOut+0x64>)
 800a06c:	699b      	ldr	r3, [r3, #24]
 800a06e:	78fa      	ldrb	r2, [r7, #3]
 800a070:	4611      	mov	r1, r2
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	4798      	blx	r3
 800a076:	4603      	mov	r3, r0
 800a078:	e013      	b.n	800a0a2 <USBD_COMPOSITE_DataOut+0x56>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a07a:	7bfb      	ldrb	r3, [r7, #15]
 800a07c:	3301      	adds	r3, #1
 800a07e:	73fb      	strb	r3, [r7, #15]
 800a080:	7bfb      	ldrb	r3, [r7, #15]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d0eb      	beq.n	800a05e <USBD_COMPOSITE_DataOut+0x12>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == CUSTOM_HID_OUT_EP)
 800a086:	4b0b      	ldr	r3, [pc, #44]	@ (800a0b4 <USBD_COMPOSITE_DataOut+0x68>)
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	78fa      	ldrb	r2, [r7, #3]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d107      	bne.n	800a0a0 <USBD_COMPOSITE_DataOut+0x54>
  {
    return USBD_HID_CUSTOM.DataOut(pdev, epnum);
 800a090:	4b09      	ldr	r3, [pc, #36]	@ (800a0b8 <USBD_COMPOSITE_DataOut+0x6c>)
 800a092:	699b      	ldr	r3, [r3, #24]
 800a094:	78fa      	ldrb	r2, [r7, #3]
 800a096:	4611      	mov	r1, r2
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	4798      	blx	r3
 800a09c:	4603      	mov	r3, r0
 800a09e:	e000      	b.n	800a0a2 <USBD_COMPOSITE_DataOut+0x56>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800a0a0:	2303      	movs	r3, #3
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	20002518 	.word	0x20002518
 800a0b0:	200000bc 	.word	0x200000bc
 800a0b4:	200001db 	.word	0x200001db
 800a0b8:	200001dc 	.word	0x200001dc

0800a0bc <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	226b      	movs	r2, #107	@ 0x6b
 800a0c8:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800a0ca:	4b03      	ldr	r3, [pc, #12]	@ (800a0d8 <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr
 800a0d8:	200027b4 	.word	0x200027b4

0800a0dc <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	226b      	movs	r2, #107	@ 0x6b
 800a0e8:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 800a0ea:	4b03      	ldr	r3, [pc, #12]	@ (800a0f8 <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr
 800a0f8:	20002748 	.word	0x20002748

0800a0fc <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	226b      	movs	r2, #107	@ 0x6b
 800a108:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800a10a:	4b03      	ldr	r3, [pc, #12]	@ (800a118 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr
 800a118:	200027b4 	.word	0x200027b4

0800a11c <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b083      	sub	sp, #12
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	220a      	movs	r2, #10
 800a128:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 800a12a:	4b03      	ldr	r3, [pc, #12]	@ (800a138 <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr
 800a138:	200001d0 	.word	0x200001d0

0800a13c <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b08a      	sub	sp, #40	@ 0x28
 800a140:	af00      	add	r7, sp, #0
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	460b      	mov	r3, r1
 800a146:	607a      	str	r2, [r7, #4]
 800a148:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 800a14a:	4b20      	ldr	r3, [pc, #128]	@ (800a1cc <USBD_COMPOSITE_GetUsrStringDesc+0x90>)
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	7afa      	ldrb	r2, [r7, #11]
 800a150:	429a      	cmp	r2, r3
 800a152:	d835      	bhi.n	800a1c0 <USBD_COMPOSITE_GetUsrStringDesc+0x84>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 800a154:	f107 0314 	add.w	r3, r7, #20
 800a158:	2200      	movs	r2, #0
 800a15a:	601a      	str	r2, [r3, #0]
 800a15c:	605a      	str	r2, [r3, #4]
 800a15e:	609a      	str	r2, [r3, #8]
 800a160:	60da      	str	r2, [r3, #12]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a162:	2300      	movs	r3, #0
 800a164:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a168:	e01a      	b.n	800a1a0 <USBD_COMPOSITE_GetUsrStringDesc+0x64>
    {
      if (index == CDC_STR_DESC_IDX[i])
 800a16a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a16e:	4a18      	ldr	r2, [pc, #96]	@ (800a1d0 <USBD_COMPOSITE_GetUsrStringDesc+0x94>)
 800a170:	5cd3      	ldrb	r3, [r2, r3]
 800a172:	7afa      	ldrb	r2, [r7, #11]
 800a174:	429a      	cmp	r2, r3
 800a176:	d10e      	bne.n	800a196 <USBD_COMPOSITE_GetUsrStringDesc+0x5a>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 800a178:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a17c:	f107 0014 	add.w	r0, r7, #20
 800a180:	4a14      	ldr	r2, [pc, #80]	@ (800a1d4 <USBD_COMPOSITE_GetUsrStringDesc+0x98>)
 800a182:	2110      	movs	r1, #16
 800a184:	f002 f8bc 	bl	800c300 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 800a188:	f107 0314 	add.w	r3, r7, #20
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	4912      	ldr	r1, [pc, #72]	@ (800a1d8 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800a190:	4618      	mov	r0, r3
 800a192:	f001 fcf4 	bl	800bb7e <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a196:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a19a:	3301      	adds	r3, #1
 800a19c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a1a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d0e0      	beq.n	800a16a <USBD_COMPOSITE_GetUsrStringDesc+0x2e>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    if (index == CUSTOM_HID_STR_DESC_IDX)
 800a1a8:	4b0c      	ldr	r3, [pc, #48]	@ (800a1dc <USBD_COMPOSITE_GetUsrStringDesc+0xa0>)
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	7afa      	ldrb	r2, [r7, #11]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d104      	bne.n	800a1bc <USBD_COMPOSITE_GetUsrStringDesc+0x80>
    {
      USBD_GetString((uint8_t *)CUSTOM_HID_STR_DESC, USBD_StrDesc, length);
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	4908      	ldr	r1, [pc, #32]	@ (800a1d8 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800a1b6:	480a      	ldr	r0, [pc, #40]	@ (800a1e0 <USBD_COMPOSITE_GetUsrStringDesc+0xa4>)
 800a1b8:	f001 fce1 	bl	800bb7e <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 800a1bc:	4b06      	ldr	r3, [pc, #24]	@ (800a1d8 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 800a1be:	e000      	b.n	800a1c2 <USBD_COMPOSITE_GetUsrStringDesc+0x86>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800a1c0:	2300      	movs	r3, #0
  }
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3728      	adds	r7, #40	@ 0x28
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	200001cc 	.word	0x200001cc
 800a1d0:	20002528 	.word	0x20002528
 800a1d4:	0800ccbc 	.word	0x0800ccbc
 800a1d8:	20002820 	.word	0x20002820
 800a1dc:	20002861 	.word	0x20002861
 800a1e0:	0800cccc 	.word	0x0800cccc

0800a1e4 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 800a1e4:	b590      	push	{r4, r7, lr}
 800a1e6:	b089      	sub	sp, #36	@ 0x24
 800a1e8:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 800a1f2:	2381      	movs	r3, #129	@ 0x81
 800a1f4:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	727b      	strb	r3, [r7, #9]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_CUSTOM == 1)
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 800a1fe:	4b74      	ldr	r3, [pc, #464]	@ (800a3d0 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 800a200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a202:	1d3a      	adds	r2, r7, #4
 800a204:	4610      	mov	r0, r2
 800a206:	4798      	blx	r3
 800a208:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800a20a:	4b72      	ldr	r3, [pc, #456]	@ (800a3d4 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	7ab8      	ldrb	r0, [r7, #10]
 800a210:	7afa      	ldrb	r2, [r7, #11]
 800a212:	7a79      	ldrb	r1, [r7, #9]
 800a214:	9300      	str	r3, [sp, #0]
 800a216:	4603      	mov	r3, r0
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f000 fbcf 	bl	800a9bc <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	3309      	adds	r3, #9
 800a222:	88ba      	ldrh	r2, [r7, #4]
 800a224:	3a09      	subs	r2, #9
 800a226:	4619      	mov	r1, r3
 800a228:	486b      	ldr	r0, [pc, #428]	@ (800a3d8 <USBD_COMPOSITE_Mount_Class+0x1f4>)
 800a22a:	f002 f8d3 	bl	800c3d4 <memcpy>

  ptr = USBD_HID_CUSTOM.GetHSConfigDescriptor(&len);
 800a22e:	4b68      	ldr	r3, [pc, #416]	@ (800a3d0 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 800a230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a232:	1d3a      	adds	r2, r7, #4
 800a234:	4610      	mov	r0, r2
 800a236:	4798      	blx	r3
 800a238:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800a23a:	4b66      	ldr	r3, [pc, #408]	@ (800a3d4 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	7ab8      	ldrb	r0, [r7, #10]
 800a240:	7afa      	ldrb	r2, [r7, #11]
 800a242:	7a79      	ldrb	r1, [r7, #9]
 800a244:	9300      	str	r3, [sp, #0]
 800a246:	4603      	mov	r3, r0
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f000 fbb7 	bl	800a9bc <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	3309      	adds	r3, #9
 800a252:	88ba      	ldrh	r2, [r7, #4]
 800a254:	3a09      	subs	r2, #9
 800a256:	4619      	mov	r1, r3
 800a258:	4860      	ldr	r0, [pc, #384]	@ (800a3dc <USBD_COMPOSITE_Mount_Class+0x1f8>)
 800a25a:	f002 f8bb 	bl	800c3d4 <memcpy>

  in_ep_track += 1;
 800a25e:	7afb      	ldrb	r3, [r7, #11]
 800a260:	3301      	adds	r3, #1
 800a262:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1;
 800a264:	7abb      	ldrb	r3, [r7, #10]
 800a266:	3301      	adds	r3, #1
 800a268:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 1;
 800a26a:	7a7b      	ldrb	r3, [r7, #9]
 800a26c:	3301      	adds	r3, #1
 800a26e:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 800a270:	4b58      	ldr	r3, [pc, #352]	@ (800a3d4 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	3301      	adds	r3, #1
 800a276:	b2da      	uxtb	r2, r3
 800a278:	4b56      	ldr	r3, [pc, #344]	@ (800a3d4 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a27a:	701a      	strb	r2, [r3, #0]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 800a27c:	4b58      	ldr	r3, [pc, #352]	@ (800a3e0 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 800a27e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a280:	1d3a      	adds	r2, r7, #4
 800a282:	4610      	mov	r0, r2
 800a284:	4798      	blx	r3
 800a286:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 800a288:	7a7b      	ldrb	r3, [r7, #9]
 800a28a:	3301      	adds	r3, #1
 800a28c:	b2d8      	uxtb	r0, r3
 800a28e:	7afb      	ldrb	r3, [r7, #11]
 800a290:	3301      	adds	r3, #1
 800a292:	b2db      	uxtb	r3, r3
 800a294:	4a4f      	ldr	r2, [pc, #316]	@ (800a3d4 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a296:	7812      	ldrb	r2, [r2, #0]
 800a298:	7afc      	ldrb	r4, [r7, #11]
 800a29a:	7a79      	ldrb	r1, [r7, #9]
 800a29c:	9202      	str	r2, [sp, #8]
 800a29e:	7aba      	ldrb	r2, [r7, #10]
 800a2a0:	9201      	str	r2, [sp, #4]
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	4623      	mov	r3, r4
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f7ff fd43 	bl	8009d34 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	3309      	adds	r3, #9
 800a2b2:	88ba      	ldrh	r2, [r7, #4]
 800a2b4:	3a09      	subs	r2, #9
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	484a      	ldr	r0, [pc, #296]	@ (800a3e4 <USBD_COMPOSITE_Mount_Class+0x200>)
 800a2ba:	f002 f88b 	bl	800c3d4 <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 800a2be:	4b48      	ldr	r3, [pc, #288]	@ (800a3e0 <USBD_COMPOSITE_Mount_Class+0x1fc>)
 800a2c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2c2:	1d3a      	adds	r2, r7, #4
 800a2c4:	4610      	mov	r0, r2
 800a2c6:	4798      	blx	r3
 800a2c8:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 800a2ca:	7a7b      	ldrb	r3, [r7, #9]
 800a2cc:	3301      	adds	r3, #1
 800a2ce:	b2d8      	uxtb	r0, r3
 800a2d0:	7afb      	ldrb	r3, [r7, #11]
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	4a3f      	ldr	r2, [pc, #252]	@ (800a3d4 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a2d8:	7812      	ldrb	r2, [r2, #0]
 800a2da:	7afc      	ldrb	r4, [r7, #11]
 800a2dc:	7a79      	ldrb	r1, [r7, #9]
 800a2de:	9202      	str	r2, [sp, #8]
 800a2e0:	7aba      	ldrb	r2, [r7, #10]
 800a2e2:	9201      	str	r2, [sp, #4]
 800a2e4:	9300      	str	r3, [sp, #0]
 800a2e6:	4623      	mov	r3, r4
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f7ff fd22 	bl	8009d34 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	3309      	adds	r3, #9
 800a2f4:	88ba      	ldrh	r2, [r7, #4]
 800a2f6:	3a09      	subs	r2, #9
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	483b      	ldr	r0, [pc, #236]	@ (800a3e8 <USBD_COMPOSITE_Mount_Class+0x204>)
 800a2fc:	f002 f86a 	bl	800c3d4 <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 800a300:	7afb      	ldrb	r3, [r7, #11]
 800a302:	3302      	adds	r3, #2
 800a304:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 800a306:	7abb      	ldrb	r3, [r7, #10]
 800a308:	3301      	adds	r3, #1
 800a30a:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 800a30c:	7a7b      	ldrb	r3, [r7, #9]
 800a30e:	3302      	adds	r3, #2
 800a310:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 800a312:	4b30      	ldr	r3, [pc, #192]	@ (800a3d4 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	3301      	adds	r3, #1
 800a318:	b2da      	uxtb	r2, r3
 800a31a:	4b2e      	ldr	r3, [pc, #184]	@ (800a3d4 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 800a31c:	701a      	strb	r2, [r3, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 800a31e:	236b      	movs	r3, #107	@ 0x6b
 800a320:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 800a322:	4b32      	ldr	r3, [pc, #200]	@ (800a3ec <USBD_COMPOSITE_Mount_Class+0x208>)
 800a324:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2209      	movs	r2, #9
 800a32a:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	3301      	adds	r3, #1
 800a330:	2202      	movs	r2, #2
 800a332:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	3302      	adds	r3, #2
 800a338:	88fa      	ldrh	r2, [r7, #6]
 800a33a:	b2d2      	uxtb	r2, r2
 800a33c:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800a33e:	88fb      	ldrh	r3, [r7, #6]
 800a340:	0a1b      	lsrs	r3, r3, #8
 800a342:	b29a      	uxth	r2, r3
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	3303      	adds	r3, #3
 800a348:	b2d2      	uxtb	r2, r2
 800a34a:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	3304      	adds	r3, #4
 800a350:	7a7a      	ldrb	r2, [r7, #9]
 800a352:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	3305      	adds	r3, #5
 800a358:	2201      	movs	r2, #1
 800a35a:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	3306      	adds	r3, #6
 800a360:	2200      	movs	r2, #0
 800a362:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	3307      	adds	r3, #7
 800a368:	22c0      	movs	r2, #192	@ 0xc0
 800a36a:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	3308      	adds	r3, #8
 800a370:	2232      	movs	r2, #50	@ 0x32
 800a372:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 800a374:	4b1e      	ldr	r3, [pc, #120]	@ (800a3f0 <USBD_COMPOSITE_Mount_Class+0x20c>)
 800a376:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2209      	movs	r2, #9
 800a37c:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	3301      	adds	r3, #1
 800a382:	2202      	movs	r2, #2
 800a384:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	3302      	adds	r3, #2
 800a38a:	88fa      	ldrh	r2, [r7, #6]
 800a38c:	b2d2      	uxtb	r2, r2
 800a38e:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800a390:	88fb      	ldrh	r3, [r7, #6]
 800a392:	0a1b      	lsrs	r3, r3, #8
 800a394:	b29a      	uxth	r2, r3
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	3303      	adds	r3, #3
 800a39a:	b2d2      	uxtb	r2, r2
 800a39c:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	3304      	adds	r3, #4
 800a3a2:	7a7a      	ldrb	r2, [r7, #9]
 800a3a4:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	3305      	adds	r3, #5
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	3306      	adds	r3, #6
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	3307      	adds	r3, #7
 800a3ba:	22c0      	movs	r2, #192	@ 0xc0
 800a3bc:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	3308      	adds	r3, #8
 800a3c2:	2232      	movs	r2, #50	@ 0x32
 800a3c4:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 800a3c6:	bf00      	nop
 800a3c8:	3714      	adds	r7, #20
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd90      	pop	{r4, r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	200001dc 	.word	0x200001dc
 800a3d4:	200001cc 	.word	0x200001cc
 800a3d8:	20002751 	.word	0x20002751
 800a3dc:	200027bd 	.word	0x200027bd
 800a3e0:	200000bc 	.word	0x200000bc
 800a3e4:	20002771 	.word	0x20002771
 800a3e8:	200027dd 	.word	0x200027dd
 800a3ec:	200027b4 	.word	0x200027b4
 800a3f0:	20002748 	.word	0x20002748

0800a3f4 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = &CUSTOM_HID_Instance;
 800a400:	4b43      	ldr	r3, [pc, #268]	@ (800a510 <USBD_CUSTOM_HID_Init+0x11c>)
 800a402:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d105      	bne.n	800a416 <USBD_CUSTOM_HID_Init+0x22>
  {
    pdev->pClassData_HID_Custom = NULL;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
    return (uint8_t)USBD_EMEM;
 800a412:	2302      	movs	r3, #2
 800a414:	e078      	b.n	800a508 <USBD_CUSTOM_HID_Init+0x114>
  }

  pdev->pClassData_HID_Custom = (void *)hhid;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	7c1b      	ldrb	r3, [r3, #16]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d11b      	bne.n	800a45e <USBD_CUSTOM_HID_Init+0x6a>
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800a426:	4b3b      	ldr	r3, [pc, #236]	@ (800a514 <USBD_CUSTOM_HID_Init+0x120>)
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	f003 020f 	and.w	r2, r3, #15
 800a42e:	6879      	ldr	r1, [r7, #4]
 800a430:	4613      	mov	r3, r2
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	4413      	add	r3, r2
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	440b      	add	r3, r1
 800a43a:	3326      	adds	r3, #38	@ 0x26
 800a43c:	2205      	movs	r2, #5
 800a43e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800a440:	4b35      	ldr	r3, [pc, #212]	@ (800a518 <USBD_CUSTOM_HID_Init+0x124>)
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	f003 020f 	and.w	r2, r3, #15
 800a448:	6879      	ldr	r1, [r7, #4]
 800a44a:	4613      	mov	r3, r2
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	4413      	add	r3, r2
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	440b      	add	r3, r1
 800a454:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800a458:	2205      	movs	r2, #5
 800a45a:	801a      	strh	r2, [r3, #0]
 800a45c:	e01a      	b.n	800a494 <USBD_CUSTOM_HID_Init+0xa0>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800a45e:	4b2d      	ldr	r3, [pc, #180]	@ (800a514 <USBD_CUSTOM_HID_Init+0x120>)
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	f003 020f 	and.w	r2, r3, #15
 800a466:	6879      	ldr	r1, [r7, #4]
 800a468:	4613      	mov	r3, r2
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	4413      	add	r3, r2
 800a46e:	009b      	lsls	r3, r3, #2
 800a470:	440b      	add	r3, r1
 800a472:	3326      	adds	r3, #38	@ 0x26
 800a474:	2201      	movs	r2, #1
 800a476:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800a478:	4b27      	ldr	r3, [pc, #156]	@ (800a518 <USBD_CUSTOM_HID_Init+0x124>)
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	f003 020f 	and.w	r2, r3, #15
 800a480:	6879      	ldr	r1, [r7, #4]
 800a482:	4613      	mov	r3, r2
 800a484:	009b      	lsls	r3, r3, #2
 800a486:	4413      	add	r3, r2
 800a488:	009b      	lsls	r3, r3, #2
 800a48a:	440b      	add	r3, r1
 800a48c:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800a490:	2201      	movs	r2, #1
 800a492:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_IN_EP, USBD_EP_TYPE_INTR,
 800a494:	4b1f      	ldr	r3, [pc, #124]	@ (800a514 <USBD_CUSTOM_HID_Init+0x120>)
 800a496:	7819      	ldrb	r1, [r3, #0]
 800a498:	2340      	movs	r3, #64	@ 0x40
 800a49a:	2203      	movs	r2, #3
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f001 fde0 	bl	800c062 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 1U;
 800a4a2:	4b1c      	ldr	r3, [pc, #112]	@ (800a514 <USBD_CUSTOM_HID_Init+0x120>)
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	f003 020f 	and.w	r2, r3, #15
 800a4aa:	6879      	ldr	r1, [r7, #4]
 800a4ac:	4613      	mov	r3, r2
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	4413      	add	r3, r2
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	440b      	add	r3, r1
 800a4b6:	3324      	adds	r3, #36	@ 0x24
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_OUT_EP, USBD_EP_TYPE_INTR,
 800a4bc:	4b16      	ldr	r3, [pc, #88]	@ (800a518 <USBD_CUSTOM_HID_Init+0x124>)
 800a4be:	7819      	ldrb	r1, [r3, #0]
 800a4c0:	2340      	movs	r3, #64	@ 0x40
 800a4c2:	2203      	movs	r2, #3
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f001 fdcc 	bl	800c062 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 1U;
 800a4ca:	4b13      	ldr	r3, [pc, #76]	@ (800a518 <USBD_CUSTOM_HID_Init+0x124>)
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	f003 020f 	and.w	r2, r3, #15
 800a4d2:	6879      	ldr	r1, [r7, #4]
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	4413      	add	r3, r2
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	440b      	add	r3, r1
 800a4de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->Init();
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_OUT_EP, hhid->Report_buf,
 800a4f8:	4b07      	ldr	r3, [pc, #28]	@ (800a518 <USBD_CUSTOM_HID_Init+0x124>)
 800a4fa:	7819      	ldrb	r1, [r3, #0]
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	2340      	movs	r3, #64	@ 0x40
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f001 fe9d 	bl	800c240 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800a506:	2300      	movs	r3, #0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3710      	adds	r7, #16
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	20002864 	.word	0x20002864
 800a514:	200001da 	.word	0x200001da
 800a518:	200001db 	.word	0x200001db

0800a51c <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	460b      	mov	r3, r1
 800a526:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 800a528:	4b2a      	ldr	r3, [pc, #168]	@ (800a5d4 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	4619      	mov	r1, r3
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f001 fdbd 	bl	800c0ae <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 0U;
 800a534:	4b27      	ldr	r3, [pc, #156]	@ (800a5d4 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	f003 020f 	and.w	r2, r3, #15
 800a53c:	6879      	ldr	r1, [r7, #4]
 800a53e:	4613      	mov	r3, r2
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	4413      	add	r3, r2
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	440b      	add	r3, r1
 800a548:	3324      	adds	r3, #36	@ 0x24
 800a54a:	2200      	movs	r2, #0
 800a54c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = 0U;
 800a54e:	4b21      	ldr	r3, [pc, #132]	@ (800a5d4 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	f003 020f 	and.w	r2, r3, #15
 800a556:	6879      	ldr	r1, [r7, #4]
 800a558:	4613      	mov	r3, r2
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	4413      	add	r3, r2
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	440b      	add	r3, r1
 800a562:	3326      	adds	r3, #38	@ 0x26
 800a564:	2200      	movs	r2, #0
 800a566:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_OUT_EP);
 800a568:	4b1b      	ldr	r3, [pc, #108]	@ (800a5d8 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	4619      	mov	r1, r3
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f001 fd9d 	bl	800c0ae <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 0U;
 800a574:	4b18      	ldr	r3, [pc, #96]	@ (800a5d8 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	f003 020f 	and.w	r2, r3, #15
 800a57c:	6879      	ldr	r1, [r7, #4]
 800a57e:	4613      	mov	r3, r2
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	4413      	add	r3, r2
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	440b      	add	r3, r1
 800a588:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a58c:	2200      	movs	r2, #0
 800a58e:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = 0U;
 800a590:	4b11      	ldr	r3, [pc, #68]	@ (800a5d8 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	f003 020f 	and.w	r2, r3, #15
 800a598:	6879      	ldr	r1, [r7, #4]
 800a59a:	4613      	mov	r3, r2
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	4413      	add	r3, r2
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	440b      	add	r3, r1
 800a5a4:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Custom != NULL)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d008      	beq.n	800a5c8 <USBD_CUSTOM_HID_DeInit+0xac>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->DeInit();
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	4798      	blx	r3
#if (0)
    USBD_free(pdev->pClassData_HID_Custom);
#endif
    pdev->pClassData_HID_Custom = NULL;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  }

  return (uint8_t)USBD_OK;
 800a5c8:	2300      	movs	r3, #0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	200001da 	.word	0x200001da
 800a5d8:	200001db 	.word	0x200001db

0800a5dc <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b088      	sub	sp, #32
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a5ec:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d101      	bne.n	800a608 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800a604:	2303      	movs	r3, #3
 800a606:	e0ed      	b.n	800a7e4 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a610:	2b00      	cmp	r3, #0
 800a612:	d052      	beq.n	800a6ba <USBD_CUSTOM_HID_Setup+0xde>
 800a614:	2b20      	cmp	r3, #32
 800a616:	f040 80dd 	bne.w	800a7d4 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	785b      	ldrb	r3, [r3, #1]
 800a61e:	3b02      	subs	r3, #2
 800a620:	2b09      	cmp	r3, #9
 800a622:	d842      	bhi.n	800a6aa <USBD_CUSTOM_HID_Setup+0xce>
 800a624:	a201      	add	r2, pc, #4	@ (adr r2, 800a62c <USBD_CUSTOM_HID_Setup+0x50>)
 800a626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a62a:	bf00      	nop
 800a62c:	0800a685 	.word	0x0800a685
 800a630:	0800a663 	.word	0x0800a663
 800a634:	0800a6ab 	.word	0x0800a6ab
 800a638:	0800a6ab 	.word	0x0800a6ab
 800a63c:	0800a6ab 	.word	0x0800a6ab
 800a640:	0800a6ab 	.word	0x0800a6ab
 800a644:	0800a6ab 	.word	0x0800a6ab
 800a648:	0800a695 	.word	0x0800a695
 800a64c:	0800a673 	.word	0x0800a673
 800a650:	0800a655 	.word	0x0800a655
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	885b      	ldrh	r3, [r3, #2]
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	461a      	mov	r2, r3
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800a660:	e02a      	b.n	800a6b8 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	3340      	adds	r3, #64	@ 0x40
 800a666:	2201      	movs	r2, #1
 800a668:	4619      	mov	r1, r3
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f001 fae7 	bl	800bc3e <USBD_CtlSendData>
      break;
 800a670:	e022      	b.n	800a6b8 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	885b      	ldrh	r3, [r3, #2]
 800a676:	0a1b      	lsrs	r3, r3, #8
 800a678:	b29b      	uxth	r3, r3
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	461a      	mov	r2, r3
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 800a682:	e019      	b.n	800a6b8 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	3344      	adds	r3, #68	@ 0x44
 800a688:	2201      	movs	r2, #1
 800a68a:	4619      	mov	r1, r3
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f001 fad6 	bl	800bc3e <USBD_CtlSendData>
      break;
 800a692:	e011      	b.n	800a6b8 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	2201      	movs	r2, #1
 800a698:	64da      	str	r2, [r3, #76]	@ 0x4c
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800a69a:	6939      	ldr	r1, [r7, #16]
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	88db      	ldrh	r3, [r3, #6]
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f001 faf7 	bl	800bc96 <USBD_CtlPrepareRx>
      break;
 800a6a8:	e006      	b.n	800a6b8 <USBD_CUSTOM_HID_Setup+0xdc>

    default:
      USBD_CtlError(pdev, req);
 800a6aa:	6839      	ldr	r1, [r7, #0]
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f001 fa55 	bl	800bb5c <USBD_CtlError>
      ret = USBD_FAIL;
 800a6b2:	2303      	movs	r3, #3
 800a6b4:	75fb      	strb	r3, [r7, #23]
      break;
 800a6b6:	bf00      	nop
    }
    break;
 800a6b8:	e093      	b.n	800a7e2 <USBD_CUSTOM_HID_Setup+0x206>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	785b      	ldrb	r3, [r3, #1]
 800a6be:	2b0b      	cmp	r3, #11
 800a6c0:	d87f      	bhi.n	800a7c2 <USBD_CUSTOM_HID_Setup+0x1e6>
 800a6c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a6c8 <USBD_CUSTOM_HID_Setup+0xec>)
 800a6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c8:	0800a6f9 	.word	0x0800a6f9
 800a6cc:	0800a7d1 	.word	0x0800a7d1
 800a6d0:	0800a7c3 	.word	0x0800a7c3
 800a6d4:	0800a7c3 	.word	0x0800a7c3
 800a6d8:	0800a7c3 	.word	0x0800a7c3
 800a6dc:	0800a7c3 	.word	0x0800a7c3
 800a6e0:	0800a723 	.word	0x0800a723
 800a6e4:	0800a7c3 	.word	0x0800a7c3
 800a6e8:	0800a7c3 	.word	0x0800a7c3
 800a6ec:	0800a7c3 	.word	0x0800a7c3
 800a6f0:	0800a771 	.word	0x0800a771
 800a6f4:	0800a79b 	.word	0x0800a79b
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	2b03      	cmp	r3, #3
 800a702:	d107      	bne.n	800a714 <USBD_CUSTOM_HID_Setup+0x138>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a704:	f107 030e 	add.w	r3, r7, #14
 800a708:	2202      	movs	r2, #2
 800a70a:	4619      	mov	r1, r3
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f001 fa96 	bl	800bc3e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a712:	e05e      	b.n	800a7d2 <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800a714:	6839      	ldr	r1, [r7, #0]
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f001 fa20 	bl	800bb5c <USBD_CtlError>
        ret = USBD_FAIL;
 800a71c:	2303      	movs	r3, #3
 800a71e:	75fb      	strb	r3, [r7, #23]
      break;
 800a720:	e057      	b.n	800a7d2 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	885b      	ldrh	r3, [r3, #2]
 800a726:	0a1b      	lsrs	r3, r3, #8
 800a728:	b29b      	uxth	r3, r3
 800a72a:	2b22      	cmp	r3, #34	@ 0x22
 800a72c:	d10b      	bne.n	800a746 <USBD_CUSTOM_HID_Setup+0x16a>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	88db      	ldrh	r3, [r3, #6]
 800a732:	2b21      	cmp	r3, #33	@ 0x21
 800a734:	bf28      	it	cs
 800a736:	2321      	movcs	r3, #33	@ 0x21
 800a738:	83fb      	strh	r3, [r7, #30]
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->pReport;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	61bb      	str	r3, [r7, #24]
 800a744:	e00d      	b.n	800a762 <USBD_CUSTOM_HID_Setup+0x186>
      }
      else
      {
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	885b      	ldrh	r3, [r3, #2]
 800a74a:	0a1b      	lsrs	r3, r3, #8
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	2b21      	cmp	r3, #33	@ 0x21
 800a750:	d107      	bne.n	800a762 <USBD_CUSTOM_HID_Setup+0x186>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 800a752:	4b26      	ldr	r3, [pc, #152]	@ (800a7ec <USBD_CUSTOM_HID_Setup+0x210>)
 800a754:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	88db      	ldrh	r3, [r3, #6]
 800a75a:	2b09      	cmp	r3, #9
 800a75c:	bf28      	it	cs
 800a75e:	2309      	movcs	r3, #9
 800a760:	83fb      	strh	r3, [r7, #30]
        }
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a762:	8bfb      	ldrh	r3, [r7, #30]
 800a764:	461a      	mov	r2, r3
 800a766:	69b9      	ldr	r1, [r7, #24]
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f001 fa68 	bl	800bc3e <USBD_CtlSendData>
      break;
 800a76e:	e030      	b.n	800a7d2 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a776:	b2db      	uxtb	r3, r3
 800a778:	2b03      	cmp	r3, #3
 800a77a:	d107      	bne.n	800a78c <USBD_CUSTOM_HID_Setup+0x1b0>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	3348      	adds	r3, #72	@ 0x48
 800a780:	2201      	movs	r2, #1
 800a782:	4619      	mov	r1, r3
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f001 fa5a 	bl	800bc3e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a78a:	e022      	b.n	800a7d2 <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800a78c:	6839      	ldr	r1, [r7, #0]
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f001 f9e4 	bl	800bb5c <USBD_CtlError>
        ret = USBD_FAIL;
 800a794:	2303      	movs	r3, #3
 800a796:	75fb      	strb	r3, [r7, #23]
      break;
 800a798:	e01b      	b.n	800a7d2 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	2b03      	cmp	r3, #3
 800a7a4:	d106      	bne.n	800a7b4 <USBD_CUSTOM_HID_Setup+0x1d8>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	885b      	ldrh	r3, [r3, #2]
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	649a      	str	r2, [r3, #72]	@ 0x48
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a7b2:	e00e      	b.n	800a7d2 <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800a7b4:	6839      	ldr	r1, [r7, #0]
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f001 f9d0 	bl	800bb5c <USBD_CtlError>
        ret = USBD_FAIL;
 800a7bc:	2303      	movs	r3, #3
 800a7be:	75fb      	strb	r3, [r7, #23]
      break;
 800a7c0:	e007      	b.n	800a7d2 <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800a7c2:	6839      	ldr	r1, [r7, #0]
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f001 f9c9 	bl	800bb5c <USBD_CtlError>
      ret = USBD_FAIL;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	75fb      	strb	r3, [r7, #23]
      break;
 800a7ce:	e000      	b.n	800a7d2 <USBD_CUSTOM_HID_Setup+0x1f6>
      break;
 800a7d0:	bf00      	nop
    }
    break;
 800a7d2:	e006      	b.n	800a7e2 <USBD_CUSTOM_HID_Setup+0x206>

  default:
    USBD_CtlError(pdev, req);
 800a7d4:	6839      	ldr	r1, [r7, #0]
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f001 f9c0 	bl	800bb5c <USBD_CtlError>
    ret = USBD_FAIL;
 800a7dc:	2303      	movs	r3, #3
 800a7de:	75fb      	strb	r3, [r7, #23]
    break;
 800a7e0:	bf00      	nop
  }
  return (uint8_t)ret;
 800a7e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3720      	adds	r7, #32
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	2000029c 	.word	0x2000029c

0800a7f0 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b086      	sub	sp, #24
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	4613      	mov	r3, r2
 800a7fc:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a804:	2b00      	cmp	r3, #0
 800a806:	d101      	bne.n	800a80c <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a808:	2303      	movs	r3, #3
 800a80a:	e01d      	b.n	800a848 <USBD_CUSTOM_HID_SendReport+0x58>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a812:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	2b03      	cmp	r3, #3
 800a81e:	d112      	bne.n	800a846 <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a826:	2b00      	cmp	r3, #0
 800a828:	d10b      	bne.n	800a842 <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	2201      	movs	r2, #1
 800a82e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_IN_EP, report, len);
 800a832:	4b07      	ldr	r3, [pc, #28]	@ (800a850 <USBD_CUSTOM_HID_SendReport+0x60>)
 800a834:	7819      	ldrb	r1, [r3, #0]
 800a836:	88fb      	ldrh	r3, [r7, #6]
 800a838:	68ba      	ldr	r2, [r7, #8]
 800a83a:	68f8      	ldr	r0, [r7, #12]
 800a83c:	f001 fcdf 	bl	800c1fe <USBD_LL_Transmit>
 800a840:	e001      	b.n	800a846 <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800a842:	2301      	movs	r3, #1
 800a844:	e000      	b.n	800a848 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 800a846:	2300      	movs	r3, #0
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3718      	adds	r7, #24
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	200001da 	.word	0x200001da

0800a854 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2229      	movs	r2, #41	@ 0x29
 800a860:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 800a862:	4b03      	ldr	r3, [pc, #12]	@ (800a870 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 800a864:	4618      	mov	r0, r3
 800a866:	370c      	adds	r7, #12
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr
 800a870:	20000218 	.word	0x20000218

0800a874 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800a874:	b480      	push	{r7}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2229      	movs	r2, #41	@ 0x29
 800a880:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 800a882:	4b03      	ldr	r3, [pc, #12]	@ (800a890 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800a884:	4618      	mov	r0, r3
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr
 800a890:	20000244 	.word	0x20000244

0800a894 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2229      	movs	r2, #41	@ 0x29
 800a8a0:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800a8a2:	4b03      	ldr	r3, [pc, #12]	@ (800a8b0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	370c      	adds	r7, #12
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr
 800a8b0:	20000270 	.word	0x20000270

0800a8b4 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */

static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	460b      	mov	r3, r1
 800a8be:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom)->state = CUSTOM_HID_IDLE;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6); // hoặc nháy LED nếu có
  return (uint8_t)USBD_OK;
 800a8cc:	2300      	movs	r3, #0
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	370c      	adds	r7, #12
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr
	...

0800a8dc <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d101      	bne.n	800a8f6 <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a8f2:	2303      	movs	r3, #3
 800a8f4:	e013      	b.n	800a91e <USBD_CUSTOM_HID_DataOut+0x42>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a8fc:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800a904:	68db      	ldr	r3, [r3, #12]
 800a906:	68fa      	ldr	r2, [r7, #12]
 800a908:	2140      	movs	r1, #64	@ 0x40
 800a90a:	4610      	mov	r0, r2
 800a90c:	4798      	blx	r3
 // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
  USBD_LL_PrepareReceive(pdev,CUSTOM_HID_OUT_EP,hhid->Report_buf,
 800a90e:	4b06      	ldr	r3, [pc, #24]	@ (800a928 <USBD_CUSTOM_HID_DataOut+0x4c>)
 800a910:	7819      	ldrb	r1, [r3, #0]
 800a912:	68fa      	ldr	r2, [r7, #12]
 800a914:	2340      	movs	r3, #64	@ 0x40
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f001 fc92 	bl	800c240 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  return (uint8_t)USBD_OK;
 800a91c:	2300      	movs	r3, #0
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3710      	adds	r7, #16
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	200001db 	.word	0x200001db

0800a92c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a93a:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d101      	bne.n	800a946 <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a942:	2303      	movs	r3, #3
 800a944:	e00f      	b.n	800a966 <USBD_CUSTOM_HID_EP0_RxReady+0x3a>
  }

  if (hhid->IsReportAvailable == 1U)
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a94a:	2b01      	cmp	r3, #1
 800a94c:	d10a      	bne.n	800a964 <USBD_CUSTOM_HID_EP0_RxReady+0x38>
  {
    //((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
	  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	68fa      	ldr	r2, [r7, #12]
 800a958:	2140      	movs	r1, #64	@ 0x40
 800a95a:	4610      	mov	r0, r2
 800a95c:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2200      	movs	r2, #0
 800a962:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
 800a964:	2300      	movs	r3, #0
}
 800a966:	4618      	mov	r0, r3
 800a968:	3710      	adds	r7, #16
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
	...

0800a970 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	220a      	movs	r2, #10
 800a97c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800a97e:	4b03      	ldr	r3, [pc, #12]	@ (800a98c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800a980:	4618      	mov	r0, r3
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr
 800a98c:	200002a8 	.word	0x200002a8

0800a990 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d101      	bne.n	800a9a4 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a9a0:	2303      	movs	r3, #3
 800a9a2:	e004      	b.n	800a9ae <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData_HID_Custom = fops;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	683a      	ldr	r2, [r7, #0]
 800a9a8:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc

  return (uint8_t)USBD_OK;
 800a9ac:	2300      	movs	r3, #0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	370c      	adds	r7, #12
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr
	...

0800a9bc <USBD_Update_HID_Custom_DESC>:

void USBD_Update_HID_Custom_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	4608      	mov	r0, r1
 800a9c6:	4611      	mov	r1, r2
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	70fb      	strb	r3, [r7, #3]
 800a9ce:	460b      	mov	r3, r1
 800a9d0:	70bb      	strb	r3, [r7, #2]
 800a9d2:	4613      	mov	r3, r2
 800a9d4:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	330b      	adds	r3, #11
 800a9da:	78fa      	ldrb	r2, [r7, #3]
 800a9dc:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	3311      	adds	r3, #17
 800a9e2:	7c3a      	ldrb	r2, [r7, #16]
 800a9e4:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	331d      	adds	r3, #29
 800a9ea:	78ba      	ldrb	r2, [r7, #2]
 800a9ec:	701a      	strb	r2, [r3, #0]
  desc[36] = out_ep;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	3324      	adds	r3, #36	@ 0x24
 800a9f2:	787a      	ldrb	r2, [r7, #1]
 800a9f4:	701a      	strb	r2, [r3, #0]

  CUSTOM_HID_IN_EP = in_ep;
 800a9f6:	4a09      	ldr	r2, [pc, #36]	@ (800aa1c <USBD_Update_HID_Custom_DESC+0x60>)
 800a9f8:	78bb      	ldrb	r3, [r7, #2]
 800a9fa:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_OUT_EP = out_ep;
 800a9fc:	4a08      	ldr	r2, [pc, #32]	@ (800aa20 <USBD_Update_HID_Custom_DESC+0x64>)
 800a9fe:	787b      	ldrb	r3, [r7, #1]
 800aa00:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_ITF_NBR = itf_no;
 800aa02:	4a08      	ldr	r2, [pc, #32]	@ (800aa24 <USBD_Update_HID_Custom_DESC+0x68>)
 800aa04:	78fb      	ldrb	r3, [r7, #3]
 800aa06:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_STR_DESC_IDX = str_idx;
 800aa08:	4a07      	ldr	r2, [pc, #28]	@ (800aa28 <USBD_Update_HID_Custom_DESC+0x6c>)
 800aa0a:	7c3b      	ldrb	r3, [r7, #16]
 800aa0c:	7013      	strb	r3, [r2, #0]
}
 800aa0e:	bf00      	nop
 800aa10:	370c      	adds	r7, #12
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr
 800aa1a:	bf00      	nop
 800aa1c:	200001da 	.word	0x200001da
 800aa20:	200001db 	.word	0x200001db
 800aa24:	20002860 	.word	0x20002860
 800aa28:	20002861 	.word	0x20002861

0800aa2c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b086      	sub	sp, #24
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	60b9      	str	r1, [r7, #8]
 800aa36:	4613      	mov	r3, r2
 800aa38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d101      	bne.n	800aa44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800aa40:	2303      	movs	r3, #3
 800aa42:	e01b      	b.n	800aa7c <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pConfDesc = NULL;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d003      	beq.n	800aa62 <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	68ba      	ldr	r2, [r7, #8]
 800aa5e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2201      	movs	r2, #1
 800aa66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	79fa      	ldrb	r2, [r7, #7]
 800aa6e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800aa70:	68f8      	ldr	r0, [r7, #12]
 800aa72:	f001 fa7d 	bl	800bf70 <USBD_LL_Init>
 800aa76:	4603      	mov	r3, r0
 800aa78:	75fb      	strb	r3, [r7, #23]

  return ret;
 800aa7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3718      	adds	r7, #24
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b084      	sub	sp, #16
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d101      	bne.n	800aa9c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800aa98:	2303      	movs	r3, #3
 800aa9a:	e02d      	b.n	800aaf8 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	683a      	ldr	r2, [r7, #0]
 800aaa0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	7c1b      	ldrb	r3, [r3, #16]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d112      	bne.n	800aad2 <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d01e      	beq.n	800aaf6 <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aabe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aac0:	f107 020e 	add.w	r2, r7, #14
 800aac4:	4610      	mov	r0, r2
 800aac6:	4798      	blx	r3
 800aac8:	4602      	mov	r2, r0
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
 800aad0:	e011      	b.n	800aaf6 <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d00b      	beq.n	800aaf6 <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aae6:	f107 020e 	add.w	r2, r7, #14
 800aaea:	4610      	mov	r0, r2
 800aaec:	4798      	blx	r3
 800aaee:	4602      	mov	r2, r0
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
  }

  return USBD_OK;
 800aaf6:	2300      	movs	r3, #0
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3710      	adds	r7, #16
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f001 fa8f 	bl	800c02c <USBD_LL_Start>
 800ab0e:	4603      	mov	r3, r0
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3708      	adds	r7, #8
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b083      	sub	sp, #12
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	370c      	adds	r7, #12
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr

0800ab2e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab2e:	b580      	push	{r7, lr}
 800ab30:	b084      	sub	sp, #16
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
 800ab36:	460b      	mov	r3, r1
 800ab38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ab3a:	2303      	movs	r3, #3
 800ab3c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d009      	beq.n	800ab5c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	78fa      	ldrb	r2, [r7, #3]
 800ab52:	4611      	mov	r1, r2
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	4798      	blx	r3
 800ab58:	4603      	mov	r3, r0
 800ab5a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ab5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3710      	adds	r7, #16
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b082      	sub	sp, #8
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
 800ab6e:	460b      	mov	r3, r1
 800ab70:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d007      	beq.n	800ab8c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	78fa      	ldrb	r2, [r7, #3]
 800ab86:	4611      	mov	r1, r2
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	4798      	blx	r3
  }

  return USBD_OK;
 800ab8c:	2300      	movs	r3, #0
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3708      	adds	r7, #8
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b084      	sub	sp, #16
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
 800ab9e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800aba6:	6839      	ldr	r1, [r7, #0]
 800aba8:	4618      	mov	r0, r3
 800abaa:	f000 ff9d 	bl	800bae8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2201      	movs	r2, #1
 800abb2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800abbc:	461a      	mov	r2, r3
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800abca:	f003 031f 	and.w	r3, r3, #31
 800abce:	2b02      	cmp	r3, #2
 800abd0:	d01a      	beq.n	800ac08 <USBD_LL_SetupStage+0x72>
 800abd2:	2b02      	cmp	r3, #2
 800abd4:	d822      	bhi.n	800ac1c <USBD_LL_SetupStage+0x86>
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d002      	beq.n	800abe0 <USBD_LL_SetupStage+0x4a>
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d00a      	beq.n	800abf4 <USBD_LL_SetupStage+0x5e>
 800abde:	e01d      	b.n	800ac1c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800abe6:	4619      	mov	r1, r3
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 fa5d 	bl	800b0a8 <USBD_StdDevReq>
 800abee:	4603      	mov	r3, r0
 800abf0:	73fb      	strb	r3, [r7, #15]
      break;
 800abf2:	e020      	b.n	800ac36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800abfa:	4619      	mov	r1, r3
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 fac1 	bl	800b184 <USBD_StdItfReq>
 800ac02:	4603      	mov	r3, r0
 800ac04:	73fb      	strb	r3, [r7, #15]
      break;
 800ac06:	e016      	b.n	800ac36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ac0e:	4619      	mov	r1, r3
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 fb00 	bl	800b216 <USBD_StdEPReq>
 800ac16:	4603      	mov	r3, r0
 800ac18:	73fb      	strb	r3, [r7, #15]
      break;
 800ac1a:	e00c      	b.n	800ac36 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ac22:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	4619      	mov	r1, r3
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f001 fa5e 	bl	800c0ec <USBD_LL_StallEP>
 800ac30:	4603      	mov	r3, r0
 800ac32:	73fb      	strb	r3, [r7, #15]
      break;
 800ac34:	bf00      	nop
  }

  return ret;
 800ac36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3710      	adds	r7, #16
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b086      	sub	sp, #24
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	460b      	mov	r3, r1
 800ac4a:	607a      	str	r2, [r7, #4]
 800ac4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ac4e:	7afb      	ldrb	r3, [r7, #11]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d138      	bne.n	800acc6 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ac5a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ac62:	2b03      	cmp	r3, #3
 800ac64:	d14a      	bne.n	800acfc <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	689a      	ldr	r2, [r3, #8]
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	68db      	ldr	r3, [r3, #12]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d913      	bls.n	800ac9a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	689a      	ldr	r2, [r3, #8]
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	68db      	ldr	r3, [r3, #12]
 800ac7a:	1ad2      	subs	r2, r2, r3
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	68da      	ldr	r2, [r3, #12]
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	bf28      	it	cs
 800ac8c:	4613      	movcs	r3, r2
 800ac8e:	461a      	mov	r2, r3
 800ac90:	6879      	ldr	r1, [r7, #4]
 800ac92:	68f8      	ldr	r0, [r7, #12]
 800ac94:	f001 f81c 	bl	800bcd0 <USBD_CtlContinueRx>
 800ac98:	e030      	b.n	800acfc <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	2b03      	cmp	r3, #3
 800aca4:	d10b      	bne.n	800acbe <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acac:	691b      	ldr	r3, [r3, #16]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d005      	beq.n	800acbe <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acb8:	691b      	ldr	r3, [r3, #16]
 800acba:	68f8      	ldr	r0, [r7, #12]
 800acbc:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800acbe:	68f8      	ldr	r0, [r7, #12]
 800acc0:	f001 f817 	bl	800bcf2 <USBD_CtlSendStatus>
 800acc4:	e01a      	b.n	800acfc <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800accc:	b2db      	uxtb	r3, r3
 800acce:	2b03      	cmp	r3, #3
 800acd0:	d114      	bne.n	800acfc <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acd8:	699b      	ldr	r3, [r3, #24]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00e      	beq.n	800acfc <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ace4:	699b      	ldr	r3, [r3, #24]
 800ace6:	7afa      	ldrb	r2, [r7, #11]
 800ace8:	4611      	mov	r1, r2
 800acea:	68f8      	ldr	r0, [r7, #12]
 800acec:	4798      	blx	r3
 800acee:	4603      	mov	r3, r0
 800acf0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800acf2:	7dfb      	ldrb	r3, [r7, #23]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d001      	beq.n	800acfc <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800acf8:	7dfb      	ldrb	r3, [r7, #23]
 800acfa:	e000      	b.n	800acfe <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800acfc:	2300      	movs	r3, #0
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3718      	adds	r7, #24
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b086      	sub	sp, #24
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	60f8      	str	r0, [r7, #12]
 800ad0e:	460b      	mov	r3, r1
 800ad10:	607a      	str	r2, [r7, #4]
 800ad12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ad14:	7afb      	ldrb	r3, [r7, #11]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d16b      	bne.n	800adf2 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	3314      	adds	r3, #20
 800ad1e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ad26:	2b02      	cmp	r3, #2
 800ad28:	d156      	bne.n	800add8 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	689a      	ldr	r2, [r3, #8]
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	68db      	ldr	r3, [r3, #12]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d914      	bls.n	800ad60 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	689a      	ldr	r2, [r3, #8]
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	68db      	ldr	r3, [r3, #12]
 800ad3e:	1ad2      	subs	r2, r2, r3
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	461a      	mov	r2, r3
 800ad4a:	6879      	ldr	r1, [r7, #4]
 800ad4c:	68f8      	ldr	r0, [r7, #12]
 800ad4e:	f000 ff91 	bl	800bc74 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad52:	2300      	movs	r3, #0
 800ad54:	2200      	movs	r2, #0
 800ad56:	2100      	movs	r1, #0
 800ad58:	68f8      	ldr	r0, [r7, #12]
 800ad5a:	f001 fa71 	bl	800c240 <USBD_LL_PrepareReceive>
 800ad5e:	e03b      	b.n	800add8 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	68da      	ldr	r2, [r3, #12]
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	689b      	ldr	r3, [r3, #8]
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d11c      	bne.n	800ada6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	685a      	ldr	r2, [r3, #4]
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d316      	bcc.n	800ada6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	685a      	ldr	r2, [r3, #4]
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d20f      	bcs.n	800ada6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ad86:	2200      	movs	r2, #0
 800ad88:	2100      	movs	r1, #0
 800ad8a:	68f8      	ldr	r0, [r7, #12]
 800ad8c:	f000 ff72 	bl	800bc74 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2200      	movs	r2, #0
 800ad94:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad98:	2300      	movs	r3, #0
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	2100      	movs	r1, #0
 800ad9e:	68f8      	ldr	r0, [r7, #12]
 800ada0:	f001 fa4e 	bl	800c240 <USBD_LL_PrepareReceive>
 800ada4:	e018      	b.n	800add8 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adac:	b2db      	uxtb	r3, r3
 800adae:	2b03      	cmp	r3, #3
 800adb0:	d10b      	bne.n	800adca <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adb8:	68db      	ldr	r3, [r3, #12]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d005      	beq.n	800adca <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adc4:	68db      	ldr	r3, [r3, #12]
 800adc6:	68f8      	ldr	r0, [r7, #12]
 800adc8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800adca:	2180      	movs	r1, #128	@ 0x80
 800adcc:	68f8      	ldr	r0, [r7, #12]
 800adce:	f001 f98d 	bl	800c0ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800add2:	68f8      	ldr	r0, [r7, #12]
 800add4:	f000 ffa0 	bl	800bd18 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800adde:	2b01      	cmp	r3, #1
 800ade0:	d122      	bne.n	800ae28 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	f7ff fe98 	bl	800ab18 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2200      	movs	r2, #0
 800adec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800adf0:	e01a      	b.n	800ae28 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adf8:	b2db      	uxtb	r3, r3
 800adfa:	2b03      	cmp	r3, #3
 800adfc:	d114      	bne.n	800ae28 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae04:	695b      	ldr	r3, [r3, #20]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00e      	beq.n	800ae28 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae10:	695b      	ldr	r3, [r3, #20]
 800ae12:	7afa      	ldrb	r2, [r7, #11]
 800ae14:	4611      	mov	r1, r2
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	4798      	blx	r3
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ae1e:	7dfb      	ldrb	r3, [r7, #23]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d001      	beq.n	800ae28 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ae24:	7dfb      	ldrb	r3, [r7, #23]
 800ae26:	e000      	b.n	800ae2a <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ae28:	2300      	movs	r3, #0
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3718      	adds	r7, #24
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}

0800ae32 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ae32:	b580      	push	{r7, lr}
 800ae34:	b082      	sub	sp, #8
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d101      	bne.n	800ae66 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ae62:	2303      	movs	r3, #3
 800ae64:	e02a      	b.n	800aebc <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d009      	beq.n	800ae86 <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	6852      	ldr	r2, [r2, #4]
 800ae7e:	b2d2      	uxtb	r2, r2
 800ae80:	4611      	mov	r1, r2
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae86:	2340      	movs	r3, #64	@ 0x40
 800ae88:	2200      	movs	r2, #0
 800ae8a:	2100      	movs	r1, #0
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f001 f8e8 	bl	800c062 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2201      	movs	r2, #1
 800ae96:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2240      	movs	r2, #64	@ 0x40
 800ae9e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aea2:	2340      	movs	r3, #64	@ 0x40
 800aea4:	2200      	movs	r2, #0
 800aea6:	2180      	movs	r1, #128	@ 0x80
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f001 f8da 	bl	800c062 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2240      	movs	r2, #64	@ 0x40
 800aeb8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800aeba:	2300      	movs	r3, #0
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3708      	adds	r7, #8
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b083      	sub	sp, #12
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	460b      	mov	r3, r1
 800aece:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	78fa      	ldrb	r2, [r7, #3]
 800aed4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aed6:	2300      	movs	r3, #0
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	370c      	adds	r7, #12
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr

0800aee4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b083      	sub	sp, #12
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aef2:	b2da      	uxtb	r2, r3
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2204      	movs	r2, #4
 800aefe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800af02:	2300      	movs	r3, #0
}
 800af04:	4618      	mov	r0, r3
 800af06:	370c      	adds	r7, #12
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr

0800af10 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800af10:	b480      	push	{r7}
 800af12:	b083      	sub	sp, #12
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	2b04      	cmp	r3, #4
 800af22:	d106      	bne.n	800af32 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800af2a:	b2da      	uxtb	r2, r3
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800af32:	2300      	movs	r3, #0
}
 800af34:	4618      	mov	r0, r3
 800af36:	370c      	adds	r7, #12
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d101      	bne.n	800af56 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800af52:	2303      	movs	r3, #3
 800af54:	e012      	b.n	800af7c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	2b03      	cmp	r3, #3
 800af60:	d10b      	bne.n	800af7a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af68:	69db      	ldr	r3, [r3, #28]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d005      	beq.n	800af7a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af74:	69db      	ldr	r3, [r3, #28]
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800af7a:	2300      	movs	r3, #0
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	460b      	mov	r3, r1
 800af8e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af96:	2b00      	cmp	r3, #0
 800af98:	d101      	bne.n	800af9e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800af9a:	2303      	movs	r3, #3
 800af9c:	e014      	b.n	800afc8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	2b03      	cmp	r3, #3
 800afa8:	d10d      	bne.n	800afc6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afb0:	6a1b      	ldr	r3, [r3, #32]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d007      	beq.n	800afc6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afbc:	6a1b      	ldr	r3, [r3, #32]
 800afbe:	78fa      	ldrb	r2, [r7, #3]
 800afc0:	4611      	mov	r1, r2
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800afc6:	2300      	movs	r3, #0
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3708      	adds	r7, #8
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b082      	sub	sp, #8
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	460b      	mov	r3, r1
 800afda:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d101      	bne.n	800afea <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800afe6:	2303      	movs	r3, #3
 800afe8:	e014      	b.n	800b014 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	2b03      	cmp	r3, #3
 800aff4:	d10d      	bne.n	800b012 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800affc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800affe:	2b00      	cmp	r3, #0
 800b000:	d007      	beq.n	800b012 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b00a:	78fa      	ldrb	r2, [r7, #3]
 800b00c:	4611      	mov	r1, r2
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b012:	2300      	movs	r3, #0
}
 800b014:	4618      	mov	r0, r3
 800b016:	3708      	adds	r7, #8
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b083      	sub	sp, #12
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b024:	2300      	movs	r3, #0
}
 800b026:	4618      	mov	r0, r3
 800b028:	370c      	adds	r7, #12
 800b02a:	46bd      	mov	sp, r7
 800b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b030:	4770      	bx	lr

0800b032 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b032:	b580      	push	{r7, lr}
 800b034:	b082      	sub	sp, #8
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2201      	movs	r2, #1
 800b03e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d009      	beq.n	800b060 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	6852      	ldr	r2, [r2, #4]
 800b058:	b2d2      	uxtb	r2, r2
 800b05a:	4611      	mov	r1, r2
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	4798      	blx	r3
  }

  return USBD_OK;
 800b060:	2300      	movs	r3, #0
}
 800b062:	4618      	mov	r0, r3
 800b064:	3708      	adds	r7, #8
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}

0800b06a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b06a:	b480      	push	{r7}
 800b06c:	b087      	sub	sp, #28
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	3301      	adds	r3, #1
 800b080:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b088:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b08c:	021b      	lsls	r3, r3, #8
 800b08e:	b21a      	sxth	r2, r3
 800b090:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b094:	4313      	orrs	r3, r2
 800b096:	b21b      	sxth	r3, r3
 800b098:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b09a:	89fb      	ldrh	r3, [r7, #14]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	371c      	adds	r7, #28
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b084      	sub	sp, #16
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b0be:	2b40      	cmp	r3, #64	@ 0x40
 800b0c0:	d005      	beq.n	800b0ce <USBD_StdDevReq+0x26>
 800b0c2:	2b40      	cmp	r3, #64	@ 0x40
 800b0c4:	d853      	bhi.n	800b16e <USBD_StdDevReq+0xc6>
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d00b      	beq.n	800b0e2 <USBD_StdDevReq+0x3a>
 800b0ca:	2b20      	cmp	r3, #32
 800b0cc:	d14f      	bne.n	800b16e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0d4:	689b      	ldr	r3, [r3, #8]
 800b0d6:	6839      	ldr	r1, [r7, #0]
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	4798      	blx	r3
 800b0dc:	4603      	mov	r3, r0
 800b0de:	73fb      	strb	r3, [r7, #15]
      break;
 800b0e0:	e04a      	b.n	800b178 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	785b      	ldrb	r3, [r3, #1]
 800b0e6:	2b09      	cmp	r3, #9
 800b0e8:	d83b      	bhi.n	800b162 <USBD_StdDevReq+0xba>
 800b0ea:	a201      	add	r2, pc, #4	@ (adr r2, 800b0f0 <USBD_StdDevReq+0x48>)
 800b0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f0:	0800b145 	.word	0x0800b145
 800b0f4:	0800b159 	.word	0x0800b159
 800b0f8:	0800b163 	.word	0x0800b163
 800b0fc:	0800b14f 	.word	0x0800b14f
 800b100:	0800b163 	.word	0x0800b163
 800b104:	0800b123 	.word	0x0800b123
 800b108:	0800b119 	.word	0x0800b119
 800b10c:	0800b163 	.word	0x0800b163
 800b110:	0800b13b 	.word	0x0800b13b
 800b114:	0800b12d 	.word	0x0800b12d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b118:	6839      	ldr	r1, [r7, #0]
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 f9de 	bl	800b4dc <USBD_GetDescriptor>
          break;
 800b120:	e024      	b.n	800b16c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b122:	6839      	ldr	r1, [r7, #0]
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 fb55 	bl	800b7d4 <USBD_SetAddress>
          break;
 800b12a:	e01f      	b.n	800b16c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b12c:	6839      	ldr	r1, [r7, #0]
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 fb94 	bl	800b85c <USBD_SetConfig>
 800b134:	4603      	mov	r3, r0
 800b136:	73fb      	strb	r3, [r7, #15]
          break;
 800b138:	e018      	b.n	800b16c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b13a:	6839      	ldr	r1, [r7, #0]
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f000 fc33 	bl	800b9a8 <USBD_GetConfig>
          break;
 800b142:	e013      	b.n	800b16c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b144:	6839      	ldr	r1, [r7, #0]
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 fc64 	bl	800ba14 <USBD_GetStatus>
          break;
 800b14c:	e00e      	b.n	800b16c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b14e:	6839      	ldr	r1, [r7, #0]
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f000 fc93 	bl	800ba7c <USBD_SetFeature>
          break;
 800b156:	e009      	b.n	800b16c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b158:	6839      	ldr	r1, [r7, #0]
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 fca2 	bl	800baa4 <USBD_ClrFeature>
          break;
 800b160:	e004      	b.n	800b16c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b162:	6839      	ldr	r1, [r7, #0]
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 fcf9 	bl	800bb5c <USBD_CtlError>
          break;
 800b16a:	bf00      	nop
      }
      break;
 800b16c:	e004      	b.n	800b178 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b16e:	6839      	ldr	r1, [r7, #0]
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 fcf3 	bl	800bb5c <USBD_CtlError>
      break;
 800b176:	bf00      	nop
  }

  return ret;
 800b178:	7bfb      	ldrb	r3, [r7, #15]
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3710      	adds	r7, #16
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
 800b182:	bf00      	nop

0800b184 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b18e:	2300      	movs	r3, #0
 800b190:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b19a:	2b40      	cmp	r3, #64	@ 0x40
 800b19c:	d005      	beq.n	800b1aa <USBD_StdItfReq+0x26>
 800b19e:	2b40      	cmp	r3, #64	@ 0x40
 800b1a0:	d82f      	bhi.n	800b202 <USBD_StdItfReq+0x7e>
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d001      	beq.n	800b1aa <USBD_StdItfReq+0x26>
 800b1a6:	2b20      	cmp	r3, #32
 800b1a8:	d12b      	bne.n	800b202 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1b0:	b2db      	uxtb	r3, r3
 800b1b2:	3b01      	subs	r3, #1
 800b1b4:	2b02      	cmp	r3, #2
 800b1b6:	d81d      	bhi.n	800b1f4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	889b      	ldrh	r3, [r3, #4]
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	2b0f      	cmp	r3, #15
 800b1c0:	d813      	bhi.n	800b1ea <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1c8:	689b      	ldr	r3, [r3, #8]
 800b1ca:	6839      	ldr	r1, [r7, #0]
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	4798      	blx	r3
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	88db      	ldrh	r3, [r3, #6]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d110      	bne.n	800b1fe <USBD_StdItfReq+0x7a>
 800b1dc:	7bfb      	ldrb	r3, [r7, #15]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d10d      	bne.n	800b1fe <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 fd85 	bl	800bcf2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b1e8:	e009      	b.n	800b1fe <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b1ea:	6839      	ldr	r1, [r7, #0]
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f000 fcb5 	bl	800bb5c <USBD_CtlError>
          break;
 800b1f2:	e004      	b.n	800b1fe <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b1f4:	6839      	ldr	r1, [r7, #0]
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 fcb0 	bl	800bb5c <USBD_CtlError>
          break;
 800b1fc:	e000      	b.n	800b200 <USBD_StdItfReq+0x7c>
          break;
 800b1fe:	bf00      	nop
      }
      break;
 800b200:	e004      	b.n	800b20c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b202:	6839      	ldr	r1, [r7, #0]
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 fca9 	bl	800bb5c <USBD_CtlError>
      break;
 800b20a:	bf00      	nop
  }

  return ret;
 800b20c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3710      	adds	r7, #16
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}

0800b216 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b216:	b580      	push	{r7, lr}
 800b218:	b084      	sub	sp, #16
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	6078      	str	r0, [r7, #4]
 800b21e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b220:	2300      	movs	r3, #0
 800b222:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	889b      	ldrh	r3, [r3, #4]
 800b228:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b232:	2b40      	cmp	r3, #64	@ 0x40
 800b234:	d007      	beq.n	800b246 <USBD_StdEPReq+0x30>
 800b236:	2b40      	cmp	r3, #64	@ 0x40
 800b238:	f200 8145 	bhi.w	800b4c6 <USBD_StdEPReq+0x2b0>
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d00c      	beq.n	800b25a <USBD_StdEPReq+0x44>
 800b240:	2b20      	cmp	r3, #32
 800b242:	f040 8140 	bne.w	800b4c6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b24c:	689b      	ldr	r3, [r3, #8]
 800b24e:	6839      	ldr	r1, [r7, #0]
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	4798      	blx	r3
 800b254:	4603      	mov	r3, r0
 800b256:	73fb      	strb	r3, [r7, #15]
      break;
 800b258:	e13a      	b.n	800b4d0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	785b      	ldrb	r3, [r3, #1]
 800b25e:	2b03      	cmp	r3, #3
 800b260:	d007      	beq.n	800b272 <USBD_StdEPReq+0x5c>
 800b262:	2b03      	cmp	r3, #3
 800b264:	f300 8129 	bgt.w	800b4ba <USBD_StdEPReq+0x2a4>
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d07f      	beq.n	800b36c <USBD_StdEPReq+0x156>
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d03c      	beq.n	800b2ea <USBD_StdEPReq+0xd4>
 800b270:	e123      	b.n	800b4ba <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	2b02      	cmp	r3, #2
 800b27c:	d002      	beq.n	800b284 <USBD_StdEPReq+0x6e>
 800b27e:	2b03      	cmp	r3, #3
 800b280:	d016      	beq.n	800b2b0 <USBD_StdEPReq+0x9a>
 800b282:	e02c      	b.n	800b2de <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b284:	7bbb      	ldrb	r3, [r7, #14]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d00d      	beq.n	800b2a6 <USBD_StdEPReq+0x90>
 800b28a:	7bbb      	ldrb	r3, [r7, #14]
 800b28c:	2b80      	cmp	r3, #128	@ 0x80
 800b28e:	d00a      	beq.n	800b2a6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b290:	7bbb      	ldrb	r3, [r7, #14]
 800b292:	4619      	mov	r1, r3
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 ff29 	bl	800c0ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b29a:	2180      	movs	r1, #128	@ 0x80
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f000 ff25 	bl	800c0ec <USBD_LL_StallEP>
 800b2a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b2a4:	e020      	b.n	800b2e8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b2a6:	6839      	ldr	r1, [r7, #0]
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f000 fc57 	bl	800bb5c <USBD_CtlError>
              break;
 800b2ae:	e01b      	b.n	800b2e8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	885b      	ldrh	r3, [r3, #2]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d10e      	bne.n	800b2d6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b2b8:	7bbb      	ldrb	r3, [r7, #14]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d00b      	beq.n	800b2d6 <USBD_StdEPReq+0xc0>
 800b2be:	7bbb      	ldrb	r3, [r7, #14]
 800b2c0:	2b80      	cmp	r3, #128	@ 0x80
 800b2c2:	d008      	beq.n	800b2d6 <USBD_StdEPReq+0xc0>
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	88db      	ldrh	r3, [r3, #6]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d104      	bne.n	800b2d6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b2cc:	7bbb      	ldrb	r3, [r7, #14]
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 ff0b 	bl	800c0ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 fd0b 	bl	800bcf2 <USBD_CtlSendStatus>

              break;
 800b2dc:	e004      	b.n	800b2e8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b2de:	6839      	ldr	r1, [r7, #0]
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 fc3b 	bl	800bb5c <USBD_CtlError>
              break;
 800b2e6:	bf00      	nop
          }
          break;
 800b2e8:	e0ec      	b.n	800b4c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	2b02      	cmp	r3, #2
 800b2f4:	d002      	beq.n	800b2fc <USBD_StdEPReq+0xe6>
 800b2f6:	2b03      	cmp	r3, #3
 800b2f8:	d016      	beq.n	800b328 <USBD_StdEPReq+0x112>
 800b2fa:	e030      	b.n	800b35e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b2fc:	7bbb      	ldrb	r3, [r7, #14]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d00d      	beq.n	800b31e <USBD_StdEPReq+0x108>
 800b302:	7bbb      	ldrb	r3, [r7, #14]
 800b304:	2b80      	cmp	r3, #128	@ 0x80
 800b306:	d00a      	beq.n	800b31e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b308:	7bbb      	ldrb	r3, [r7, #14]
 800b30a:	4619      	mov	r1, r3
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 feed 	bl	800c0ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b312:	2180      	movs	r1, #128	@ 0x80
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 fee9 	bl	800c0ec <USBD_LL_StallEP>
 800b31a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b31c:	e025      	b.n	800b36a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b31e:	6839      	ldr	r1, [r7, #0]
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f000 fc1b 	bl	800bb5c <USBD_CtlError>
              break;
 800b326:	e020      	b.n	800b36a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	885b      	ldrh	r3, [r3, #2]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d11b      	bne.n	800b368 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b330:	7bbb      	ldrb	r3, [r7, #14]
 800b332:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b336:	2b00      	cmp	r3, #0
 800b338:	d004      	beq.n	800b344 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b33a:	7bbb      	ldrb	r3, [r7, #14]
 800b33c:	4619      	mov	r1, r3
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f000 fef3 	bl	800c12a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f000 fcd4 	bl	800bcf2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b350:	689b      	ldr	r3, [r3, #8]
 800b352:	6839      	ldr	r1, [r7, #0]
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	4798      	blx	r3
 800b358:	4603      	mov	r3, r0
 800b35a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b35c:	e004      	b.n	800b368 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b35e:	6839      	ldr	r1, [r7, #0]
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 fbfb 	bl	800bb5c <USBD_CtlError>
              break;
 800b366:	e000      	b.n	800b36a <USBD_StdEPReq+0x154>
              break;
 800b368:	bf00      	nop
          }
          break;
 800b36a:	e0ab      	b.n	800b4c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b372:	b2db      	uxtb	r3, r3
 800b374:	2b02      	cmp	r3, #2
 800b376:	d002      	beq.n	800b37e <USBD_StdEPReq+0x168>
 800b378:	2b03      	cmp	r3, #3
 800b37a:	d032      	beq.n	800b3e2 <USBD_StdEPReq+0x1cc>
 800b37c:	e097      	b.n	800b4ae <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b37e:	7bbb      	ldrb	r3, [r7, #14]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d007      	beq.n	800b394 <USBD_StdEPReq+0x17e>
 800b384:	7bbb      	ldrb	r3, [r7, #14]
 800b386:	2b80      	cmp	r3, #128	@ 0x80
 800b388:	d004      	beq.n	800b394 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b38a:	6839      	ldr	r1, [r7, #0]
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f000 fbe5 	bl	800bb5c <USBD_CtlError>
                break;
 800b392:	e091      	b.n	800b4b8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b394:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	da0b      	bge.n	800b3b4 <USBD_StdEPReq+0x19e>
 800b39c:	7bbb      	ldrb	r3, [r7, #14]
 800b39e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b3a2:	4613      	mov	r3, r2
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	4413      	add	r3, r2
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	3310      	adds	r3, #16
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	4413      	add	r3, r2
 800b3b0:	3304      	adds	r3, #4
 800b3b2:	e00b      	b.n	800b3cc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b3b4:	7bbb      	ldrb	r3, [r7, #14]
 800b3b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3ba:	4613      	mov	r3, r2
 800b3bc:	009b      	lsls	r3, r3, #2
 800b3be:	4413      	add	r3, r2
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	3304      	adds	r3, #4
 800b3cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	2202      	movs	r2, #2
 800b3d8:	4619      	mov	r1, r3
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 fc2f 	bl	800bc3e <USBD_CtlSendData>
              break;
 800b3e0:	e06a      	b.n	800b4b8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b3e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	da11      	bge.n	800b40e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b3ea:	7bbb      	ldrb	r3, [r7, #14]
 800b3ec:	f003 020f 	and.w	r2, r3, #15
 800b3f0:	6879      	ldr	r1, [r7, #4]
 800b3f2:	4613      	mov	r3, r2
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	4413      	add	r3, r2
 800b3f8:	009b      	lsls	r3, r3, #2
 800b3fa:	440b      	add	r3, r1
 800b3fc:	3324      	adds	r3, #36	@ 0x24
 800b3fe:	881b      	ldrh	r3, [r3, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d117      	bne.n	800b434 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b404:	6839      	ldr	r1, [r7, #0]
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 fba8 	bl	800bb5c <USBD_CtlError>
                  break;
 800b40c:	e054      	b.n	800b4b8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b40e:	7bbb      	ldrb	r3, [r7, #14]
 800b410:	f003 020f 	and.w	r2, r3, #15
 800b414:	6879      	ldr	r1, [r7, #4]
 800b416:	4613      	mov	r3, r2
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	4413      	add	r3, r2
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	440b      	add	r3, r1
 800b420:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b424:	881b      	ldrh	r3, [r3, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d104      	bne.n	800b434 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b42a:	6839      	ldr	r1, [r7, #0]
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f000 fb95 	bl	800bb5c <USBD_CtlError>
                  break;
 800b432:	e041      	b.n	800b4b8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b434:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	da0b      	bge.n	800b454 <USBD_StdEPReq+0x23e>
 800b43c:	7bbb      	ldrb	r3, [r7, #14]
 800b43e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b442:	4613      	mov	r3, r2
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	4413      	add	r3, r2
 800b448:	009b      	lsls	r3, r3, #2
 800b44a:	3310      	adds	r3, #16
 800b44c:	687a      	ldr	r2, [r7, #4]
 800b44e:	4413      	add	r3, r2
 800b450:	3304      	adds	r3, #4
 800b452:	e00b      	b.n	800b46c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b454:	7bbb      	ldrb	r3, [r7, #14]
 800b456:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b45a:	4613      	mov	r3, r2
 800b45c:	009b      	lsls	r3, r3, #2
 800b45e:	4413      	add	r3, r2
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	4413      	add	r3, r2
 800b46a:	3304      	adds	r3, #4
 800b46c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b46e:	7bbb      	ldrb	r3, [r7, #14]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d002      	beq.n	800b47a <USBD_StdEPReq+0x264>
 800b474:	7bbb      	ldrb	r3, [r7, #14]
 800b476:	2b80      	cmp	r3, #128	@ 0x80
 800b478:	d103      	bne.n	800b482 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	2200      	movs	r2, #0
 800b47e:	601a      	str	r2, [r3, #0]
 800b480:	e00e      	b.n	800b4a0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b482:	7bbb      	ldrb	r3, [r7, #14]
 800b484:	4619      	mov	r1, r3
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 fe6e 	bl	800c168 <USBD_LL_IsStallEP>
 800b48c:	4603      	mov	r3, r0
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d003      	beq.n	800b49a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	2201      	movs	r2, #1
 800b496:	601a      	str	r2, [r3, #0]
 800b498:	e002      	b.n	800b4a0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	2200      	movs	r2, #0
 800b49e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	2202      	movs	r2, #2
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f000 fbc9 	bl	800bc3e <USBD_CtlSendData>
              break;
 800b4ac:	e004      	b.n	800b4b8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b4ae:	6839      	ldr	r1, [r7, #0]
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 fb53 	bl	800bb5c <USBD_CtlError>
              break;
 800b4b6:	bf00      	nop
          }
          break;
 800b4b8:	e004      	b.n	800b4c4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b4ba:	6839      	ldr	r1, [r7, #0]
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f000 fb4d 	bl	800bb5c <USBD_CtlError>
          break;
 800b4c2:	bf00      	nop
      }
      break;
 800b4c4:	e004      	b.n	800b4d0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b4c6:	6839      	ldr	r1, [r7, #0]
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 fb47 	bl	800bb5c <USBD_CtlError>
      break;
 800b4ce:	bf00      	nop
  }

  return ret;
 800b4d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3710      	adds	r7, #16
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
	...

0800b4dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	885b      	ldrh	r3, [r3, #2]
 800b4f6:	0a1b      	lsrs	r3, r3, #8
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	3b01      	subs	r3, #1
 800b4fc:	2b06      	cmp	r3, #6
 800b4fe:	f200 813b 	bhi.w	800b778 <USBD_GetDescriptor+0x29c>
 800b502:	a201      	add	r2, pc, #4	@ (adr r2, 800b508 <USBD_GetDescriptor+0x2c>)
 800b504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b508:	0800b525 	.word	0x0800b525
 800b50c:	0800b53d 	.word	0x0800b53d
 800b510:	0800b57d 	.word	0x0800b57d
 800b514:	0800b779 	.word	0x0800b779
 800b518:	0800b779 	.word	0x0800b779
 800b51c:	0800b719 	.word	0x0800b719
 800b520:	0800b745 	.word	0x0800b745
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	687a      	ldr	r2, [r7, #4]
 800b52e:	7c12      	ldrb	r2, [r2, #16]
 800b530:	f107 0108 	add.w	r1, r7, #8
 800b534:	4610      	mov	r0, r2
 800b536:	4798      	blx	r3
 800b538:	60f8      	str	r0, [r7, #12]
      break;
 800b53a:	e125      	b.n	800b788 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	7c1b      	ldrb	r3, [r3, #16]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d10d      	bne.n	800b560 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b54a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b54c:	f107 0208 	add.w	r2, r7, #8
 800b550:	4610      	mov	r0, r2
 800b552:	4798      	blx	r3
 800b554:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	3301      	adds	r3, #1
 800b55a:	2202      	movs	r2, #2
 800b55c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b55e:	e113      	b.n	800b788 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b568:	f107 0208 	add.w	r2, r7, #8
 800b56c:	4610      	mov	r0, r2
 800b56e:	4798      	blx	r3
 800b570:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	3301      	adds	r3, #1
 800b576:	2202      	movs	r2, #2
 800b578:	701a      	strb	r2, [r3, #0]
      break;
 800b57a:	e105      	b.n	800b788 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	885b      	ldrh	r3, [r3, #2]
 800b580:	b2db      	uxtb	r3, r3
 800b582:	2b05      	cmp	r3, #5
 800b584:	f200 80ac 	bhi.w	800b6e0 <USBD_GetDescriptor+0x204>
 800b588:	a201      	add	r2, pc, #4	@ (adr r2, 800b590 <USBD_GetDescriptor+0xb4>)
 800b58a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b58e:	bf00      	nop
 800b590:	0800b5a9 	.word	0x0800b5a9
 800b594:	0800b5dd 	.word	0x0800b5dd
 800b598:	0800b611 	.word	0x0800b611
 800b59c:	0800b645 	.word	0x0800b645
 800b5a0:	0800b679 	.word	0x0800b679
 800b5a4:	0800b6ad 	.word	0x0800b6ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d00b      	beq.n	800b5cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	687a      	ldr	r2, [r7, #4]
 800b5be:	7c12      	ldrb	r2, [r2, #16]
 800b5c0:	f107 0108 	add.w	r1, r7, #8
 800b5c4:	4610      	mov	r0, r2
 800b5c6:	4798      	blx	r3
 800b5c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5ca:	e0a4      	b.n	800b716 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b5cc:	6839      	ldr	r1, [r7, #0]
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f000 fac4 	bl	800bb5c <USBD_CtlError>
            err++;
 800b5d4:	7afb      	ldrb	r3, [r7, #11]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	72fb      	strb	r3, [r7, #11]
          break;
 800b5da:	e09c      	b.n	800b716 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5e2:	689b      	ldr	r3, [r3, #8]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d00b      	beq.n	800b600 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	7c12      	ldrb	r2, [r2, #16]
 800b5f4:	f107 0108 	add.w	r1, r7, #8
 800b5f8:	4610      	mov	r0, r2
 800b5fa:	4798      	blx	r3
 800b5fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5fe:	e08a      	b.n	800b716 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b600:	6839      	ldr	r1, [r7, #0]
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 faaa 	bl	800bb5c <USBD_CtlError>
            err++;
 800b608:	7afb      	ldrb	r3, [r7, #11]
 800b60a:	3301      	adds	r3, #1
 800b60c:	72fb      	strb	r3, [r7, #11]
          break;
 800b60e:	e082      	b.n	800b716 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b616:	68db      	ldr	r3, [r3, #12]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d00b      	beq.n	800b634 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b622:	68db      	ldr	r3, [r3, #12]
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	7c12      	ldrb	r2, [r2, #16]
 800b628:	f107 0108 	add.w	r1, r7, #8
 800b62c:	4610      	mov	r0, r2
 800b62e:	4798      	blx	r3
 800b630:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b632:	e070      	b.n	800b716 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b634:	6839      	ldr	r1, [r7, #0]
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 fa90 	bl	800bb5c <USBD_CtlError>
            err++;
 800b63c:	7afb      	ldrb	r3, [r7, #11]
 800b63e:	3301      	adds	r3, #1
 800b640:	72fb      	strb	r3, [r7, #11]
          break;
 800b642:	e068      	b.n	800b716 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b64a:	691b      	ldr	r3, [r3, #16]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00b      	beq.n	800b668 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b656:	691b      	ldr	r3, [r3, #16]
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	7c12      	ldrb	r2, [r2, #16]
 800b65c:	f107 0108 	add.w	r1, r7, #8
 800b660:	4610      	mov	r0, r2
 800b662:	4798      	blx	r3
 800b664:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b666:	e056      	b.n	800b716 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b668:	6839      	ldr	r1, [r7, #0]
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 fa76 	bl	800bb5c <USBD_CtlError>
            err++;
 800b670:	7afb      	ldrb	r3, [r7, #11]
 800b672:	3301      	adds	r3, #1
 800b674:	72fb      	strb	r3, [r7, #11]
          break;
 800b676:	e04e      	b.n	800b716 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b67e:	695b      	ldr	r3, [r3, #20]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d00b      	beq.n	800b69c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b68a:	695b      	ldr	r3, [r3, #20]
 800b68c:	687a      	ldr	r2, [r7, #4]
 800b68e:	7c12      	ldrb	r2, [r2, #16]
 800b690:	f107 0108 	add.w	r1, r7, #8
 800b694:	4610      	mov	r0, r2
 800b696:	4798      	blx	r3
 800b698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b69a:	e03c      	b.n	800b716 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b69c:	6839      	ldr	r1, [r7, #0]
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 fa5c 	bl	800bb5c <USBD_CtlError>
            err++;
 800b6a4:	7afb      	ldrb	r3, [r7, #11]
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	72fb      	strb	r3, [r7, #11]
          break;
 800b6aa:	e034      	b.n	800b716 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6b2:	699b      	ldr	r3, [r3, #24]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d00b      	beq.n	800b6d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6be:	699b      	ldr	r3, [r3, #24]
 800b6c0:	687a      	ldr	r2, [r7, #4]
 800b6c2:	7c12      	ldrb	r2, [r2, #16]
 800b6c4:	f107 0108 	add.w	r1, r7, #8
 800b6c8:	4610      	mov	r0, r2
 800b6ca:	4798      	blx	r3
 800b6cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6ce:	e022      	b.n	800b716 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b6d0:	6839      	ldr	r1, [r7, #0]
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 fa42 	bl	800bb5c <USBD_CtlError>
            err++;
 800b6d8:	7afb      	ldrb	r3, [r7, #11]
 800b6da:	3301      	adds	r3, #1
 800b6dc:	72fb      	strb	r3, [r7, #11]
          break;
 800b6de:	e01a      	b.n	800b716 <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d00c      	beq.n	800b706 <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6f4:	683a      	ldr	r2, [r7, #0]
 800b6f6:	8852      	ldrh	r2, [r2, #2]
 800b6f8:	b2d1      	uxtb	r1, r2
 800b6fa:	f107 0208 	add.w	r2, r7, #8
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	4798      	blx	r3
 800b702:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 800b704:	e006      	b.n	800b714 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 800b706:	6839      	ldr	r1, [r7, #0]
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 fa27 	bl	800bb5c <USBD_CtlError>
            err++;
 800b70e:	7afb      	ldrb	r3, [r7, #11]
 800b710:	3301      	adds	r3, #1
 800b712:	72fb      	strb	r3, [r7, #11]
          break;
 800b714:	bf00      	nop
      }
      break;
 800b716:	e037      	b.n	800b788 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	7c1b      	ldrb	r3, [r3, #16]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d109      	bne.n	800b734 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b728:	f107 0208 	add.w	r2, r7, #8
 800b72c:	4610      	mov	r0, r2
 800b72e:	4798      	blx	r3
 800b730:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b732:	e029      	b.n	800b788 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800b734:	6839      	ldr	r1, [r7, #0]
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 fa10 	bl	800bb5c <USBD_CtlError>
        err++;
 800b73c:	7afb      	ldrb	r3, [r7, #11]
 800b73e:	3301      	adds	r3, #1
 800b740:	72fb      	strb	r3, [r7, #11]
      break;
 800b742:	e021      	b.n	800b788 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	7c1b      	ldrb	r3, [r3, #16]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d10d      	bne.n	800b768 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b754:	f107 0208 	add.w	r2, r7, #8
 800b758:	4610      	mov	r0, r2
 800b75a:	4798      	blx	r3
 800b75c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	3301      	adds	r3, #1
 800b762:	2207      	movs	r2, #7
 800b764:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b766:	e00f      	b.n	800b788 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800b768:	6839      	ldr	r1, [r7, #0]
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f000 f9f6 	bl	800bb5c <USBD_CtlError>
        err++;
 800b770:	7afb      	ldrb	r3, [r7, #11]
 800b772:	3301      	adds	r3, #1
 800b774:	72fb      	strb	r3, [r7, #11]
      break;
 800b776:	e007      	b.n	800b788 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800b778:	6839      	ldr	r1, [r7, #0]
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 f9ee 	bl	800bb5c <USBD_CtlError>
      err++;
 800b780:	7afb      	ldrb	r3, [r7, #11]
 800b782:	3301      	adds	r3, #1
 800b784:	72fb      	strb	r3, [r7, #11]
      break;
 800b786:	bf00      	nop
  }

  if (err != 0U)
 800b788:	7afb      	ldrb	r3, [r7, #11]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d11e      	bne.n	800b7cc <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	88db      	ldrh	r3, [r3, #6]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d016      	beq.n	800b7c4 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 800b796:	893b      	ldrh	r3, [r7, #8]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d00e      	beq.n	800b7ba <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	88da      	ldrh	r2, [r3, #6]
 800b7a0:	893b      	ldrh	r3, [r7, #8]
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	bf28      	it	cs
 800b7a6:	4613      	movcs	r3, r2
 800b7a8:	b29b      	uxth	r3, r3
 800b7aa:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b7ac:	893b      	ldrh	r3, [r7, #8]
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	68f9      	ldr	r1, [r7, #12]
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 fa43 	bl	800bc3e <USBD_CtlSendData>
 800b7b8:	e009      	b.n	800b7ce <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b7ba:	6839      	ldr	r1, [r7, #0]
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f000 f9cd 	bl	800bb5c <USBD_CtlError>
 800b7c2:	e004      	b.n	800b7ce <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 fa94 	bl	800bcf2 <USBD_CtlSendStatus>
 800b7ca:	e000      	b.n	800b7ce <USBD_GetDescriptor+0x2f2>
    return;
 800b7cc:	bf00      	nop
  }
}
 800b7ce:	3710      	adds	r7, #16
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	889b      	ldrh	r3, [r3, #4]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d131      	bne.n	800b84a <USBD_SetAddress+0x76>
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	88db      	ldrh	r3, [r3, #6]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d12d      	bne.n	800b84a <USBD_SetAddress+0x76>
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	885b      	ldrh	r3, [r3, #2]
 800b7f2:	2b7f      	cmp	r3, #127	@ 0x7f
 800b7f4:	d829      	bhi.n	800b84a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	885b      	ldrh	r3, [r3, #2]
 800b7fa:	b2db      	uxtb	r3, r3
 800b7fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b800:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b808:	b2db      	uxtb	r3, r3
 800b80a:	2b03      	cmp	r3, #3
 800b80c:	d104      	bne.n	800b818 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b80e:	6839      	ldr	r1, [r7, #0]
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 f9a3 	bl	800bb5c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b816:	e01d      	b.n	800b854 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	7bfa      	ldrb	r2, [r7, #15]
 800b81c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b820:	7bfb      	ldrb	r3, [r7, #15]
 800b822:	4619      	mov	r1, r3
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f000 fccb 	bl	800c1c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 fa61 	bl	800bcf2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b830:	7bfb      	ldrb	r3, [r7, #15]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d004      	beq.n	800b840 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2202      	movs	r2, #2
 800b83a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b83e:	e009      	b.n	800b854 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2201      	movs	r2, #1
 800b844:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b848:	e004      	b.n	800b854 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b84a:	6839      	ldr	r1, [r7, #0]
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 f985 	bl	800bb5c <USBD_CtlError>
  }
}
 800b852:	bf00      	nop
 800b854:	bf00      	nop
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b084      	sub	sp, #16
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b866:	2300      	movs	r3, #0
 800b868:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	885b      	ldrh	r3, [r3, #2]
 800b86e:	b2da      	uxtb	r2, r3
 800b870:	4b4c      	ldr	r3, [pc, #304]	@ (800b9a4 <USBD_SetConfig+0x148>)
 800b872:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b874:	4b4b      	ldr	r3, [pc, #300]	@ (800b9a4 <USBD_SetConfig+0x148>)
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	2b01      	cmp	r3, #1
 800b87a:	d905      	bls.n	800b888 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b87c:	6839      	ldr	r1, [r7, #0]
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 f96c 	bl	800bb5c <USBD_CtlError>
    return USBD_FAIL;
 800b884:	2303      	movs	r3, #3
 800b886:	e088      	b.n	800b99a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	2b02      	cmp	r3, #2
 800b892:	d002      	beq.n	800b89a <USBD_SetConfig+0x3e>
 800b894:	2b03      	cmp	r3, #3
 800b896:	d025      	beq.n	800b8e4 <USBD_SetConfig+0x88>
 800b898:	e071      	b.n	800b97e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b89a:	4b42      	ldr	r3, [pc, #264]	@ (800b9a4 <USBD_SetConfig+0x148>)
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d01c      	beq.n	800b8dc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b8a2:	4b40      	ldr	r3, [pc, #256]	@ (800b9a4 <USBD_SetConfig+0x148>)
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b8ac:	4b3d      	ldr	r3, [pc, #244]	@ (800b9a4 <USBD_SetConfig+0x148>)
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f7ff f93b 	bl	800ab2e <USBD_SetClassConfig>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b8bc:	7bfb      	ldrb	r3, [r7, #15]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d004      	beq.n	800b8cc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b8c2:	6839      	ldr	r1, [r7, #0]
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 f949 	bl	800bb5c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b8ca:	e065      	b.n	800b998 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 fa10 	bl	800bcf2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2203      	movs	r2, #3
 800b8d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b8da:	e05d      	b.n	800b998 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 fa08 	bl	800bcf2 <USBD_CtlSendStatus>
      break;
 800b8e2:	e059      	b.n	800b998 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b8e4:	4b2f      	ldr	r3, [pc, #188]	@ (800b9a4 <USBD_SetConfig+0x148>)
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d112      	bne.n	800b912 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2202      	movs	r2, #2
 800b8f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b8f4:	4b2b      	ldr	r3, [pc, #172]	@ (800b9a4 <USBD_SetConfig+0x148>)
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b8fe:	4b29      	ldr	r3, [pc, #164]	@ (800b9a4 <USBD_SetConfig+0x148>)
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	4619      	mov	r1, r3
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f7ff f92e 	bl	800ab66 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f000 f9f1 	bl	800bcf2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b910:	e042      	b.n	800b998 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b912:	4b24      	ldr	r3, [pc, #144]	@ (800b9a4 <USBD_SetConfig+0x148>)
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	461a      	mov	r2, r3
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d02a      	beq.n	800b976 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	b2db      	uxtb	r3, r3
 800b926:	4619      	mov	r1, r3
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f7ff f91c 	bl	800ab66 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b92e:	4b1d      	ldr	r3, [pc, #116]	@ (800b9a4 <USBD_SetConfig+0x148>)
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	461a      	mov	r2, r3
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b938:	4b1a      	ldr	r3, [pc, #104]	@ (800b9a4 <USBD_SetConfig+0x148>)
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	4619      	mov	r1, r3
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f7ff f8f5 	bl	800ab2e <USBD_SetClassConfig>
 800b944:	4603      	mov	r3, r0
 800b946:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b948:	7bfb      	ldrb	r3, [r7, #15]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d00f      	beq.n	800b96e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b94e:	6839      	ldr	r1, [r7, #0]
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 f903 	bl	800bb5c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	4619      	mov	r1, r3
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f7ff f901 	bl	800ab66 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2202      	movs	r2, #2
 800b968:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b96c:	e014      	b.n	800b998 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 f9bf 	bl	800bcf2 <USBD_CtlSendStatus>
      break;
 800b974:	e010      	b.n	800b998 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 f9bb 	bl	800bcf2 <USBD_CtlSendStatus>
      break;
 800b97c:	e00c      	b.n	800b998 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b97e:	6839      	ldr	r1, [r7, #0]
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f000 f8eb 	bl	800bb5c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b986:	4b07      	ldr	r3, [pc, #28]	@ (800b9a4 <USBD_SetConfig+0x148>)
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	4619      	mov	r1, r3
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f7ff f8ea 	bl	800ab66 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b992:	2303      	movs	r3, #3
 800b994:	73fb      	strb	r3, [r7, #15]
      break;
 800b996:	bf00      	nop
  }

  return ret;
 800b998:	7bfb      	ldrb	r3, [r7, #15]
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	200028b8 	.word	0x200028b8

0800b9a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	88db      	ldrh	r3, [r3, #6]
 800b9b6:	2b01      	cmp	r3, #1
 800b9b8:	d004      	beq.n	800b9c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b9ba:	6839      	ldr	r1, [r7, #0]
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 f8cd 	bl	800bb5c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b9c2:	e023      	b.n	800ba0c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	2b02      	cmp	r3, #2
 800b9ce:	dc02      	bgt.n	800b9d6 <USBD_GetConfig+0x2e>
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	dc03      	bgt.n	800b9dc <USBD_GetConfig+0x34>
 800b9d4:	e015      	b.n	800ba02 <USBD_GetConfig+0x5a>
 800b9d6:	2b03      	cmp	r3, #3
 800b9d8:	d00b      	beq.n	800b9f2 <USBD_GetConfig+0x4a>
 800b9da:	e012      	b.n	800ba02 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	3308      	adds	r3, #8
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 f927 	bl	800bc3e <USBD_CtlSendData>
        break;
 800b9f0:	e00c      	b.n	800ba0c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	3304      	adds	r3, #4
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 f91f 	bl	800bc3e <USBD_CtlSendData>
        break;
 800ba00:	e004      	b.n	800ba0c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ba02:	6839      	ldr	r1, [r7, #0]
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 f8a9 	bl	800bb5c <USBD_CtlError>
        break;
 800ba0a:	bf00      	nop
}
 800ba0c:	bf00      	nop
 800ba0e:	3708      	adds	r7, #8
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	3b01      	subs	r3, #1
 800ba28:	2b02      	cmp	r3, #2
 800ba2a:	d81e      	bhi.n	800ba6a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	88db      	ldrh	r3, [r3, #6]
 800ba30:	2b02      	cmp	r3, #2
 800ba32:	d004      	beq.n	800ba3e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ba34:	6839      	ldr	r1, [r7, #0]
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f000 f890 	bl	800bb5c <USBD_CtlError>
        break;
 800ba3c:	e01a      	b.n	800ba74 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2201      	movs	r2, #1
 800ba42:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d005      	beq.n	800ba5a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	68db      	ldr	r3, [r3, #12]
 800ba52:	f043 0202 	orr.w	r2, r3, #2
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	330c      	adds	r3, #12
 800ba5e:	2202      	movs	r2, #2
 800ba60:	4619      	mov	r1, r3
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f000 f8eb 	bl	800bc3e <USBD_CtlSendData>
      break;
 800ba68:	e004      	b.n	800ba74 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ba6a:	6839      	ldr	r1, [r7, #0]
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f000 f875 	bl	800bb5c <USBD_CtlError>
      break;
 800ba72:	bf00      	nop
  }
}
 800ba74:	bf00      	nop
 800ba76:	3708      	adds	r7, #8
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b082      	sub	sp, #8
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	885b      	ldrh	r3, [r3, #2]
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	d106      	bne.n	800ba9c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2201      	movs	r2, #1
 800ba92:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f000 f92b 	bl	800bcf2 <USBD_CtlSendStatus>
  }
}
 800ba9c:	bf00      	nop
 800ba9e:	3708      	adds	r7, #8
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b082      	sub	sp, #8
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bab4:	b2db      	uxtb	r3, r3
 800bab6:	3b01      	subs	r3, #1
 800bab8:	2b02      	cmp	r3, #2
 800baba:	d80b      	bhi.n	800bad4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	885b      	ldrh	r3, [r3, #2]
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d10c      	bne.n	800bade <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2200      	movs	r2, #0
 800bac8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 f910 	bl	800bcf2 <USBD_CtlSendStatus>
      }
      break;
 800bad2:	e004      	b.n	800bade <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bad4:	6839      	ldr	r1, [r7, #0]
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 f840 	bl	800bb5c <USBD_CtlError>
      break;
 800badc:	e000      	b.n	800bae0 <USBD_ClrFeature+0x3c>
      break;
 800bade:	bf00      	nop
  }
}
 800bae0:	bf00      	nop
 800bae2:	3708      	adds	r7, #8
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	781a      	ldrb	r2, [r3, #0]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	3301      	adds	r3, #1
 800bb02:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	781a      	ldrb	r2, [r3, #0]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	3301      	adds	r3, #1
 800bb10:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bb12:	68f8      	ldr	r0, [r7, #12]
 800bb14:	f7ff faa9 	bl	800b06a <SWAPBYTE>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	3301      	adds	r3, #1
 800bb24:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bb2c:	68f8      	ldr	r0, [r7, #12]
 800bb2e:	f7ff fa9c 	bl	800b06a <SWAPBYTE>
 800bb32:	4603      	mov	r3, r0
 800bb34:	461a      	mov	r2, r3
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	3301      	adds	r3, #1
 800bb44:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bb46:	68f8      	ldr	r0, [r7, #12]
 800bb48:	f7ff fa8f 	bl	800b06a <SWAPBYTE>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	461a      	mov	r2, r3
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	80da      	strh	r2, [r3, #6]
}
 800bb54:	bf00      	nop
 800bb56:	3710      	adds	r7, #16
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb66:	2180      	movs	r1, #128	@ 0x80
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 fabf 	bl	800c0ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bb6e:	2100      	movs	r1, #0
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 fabb 	bl	800c0ec <USBD_LL_StallEP>
}
 800bb76:	bf00      	nop
 800bb78:	3708      	adds	r7, #8
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}

0800bb7e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bb7e:	b580      	push	{r7, lr}
 800bb80:	b086      	sub	sp, #24
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	60f8      	str	r0, [r7, #12]
 800bb86:	60b9      	str	r1, [r7, #8]
 800bb88:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d036      	beq.n	800bc02 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bb98:	6938      	ldr	r0, [r7, #16]
 800bb9a:	f000 f836 	bl	800bc0a <USBD_GetLen>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	3301      	adds	r3, #1
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	005b      	lsls	r3, r3, #1
 800bba6:	b29a      	uxth	r2, r3
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bbac:	7dfb      	ldrb	r3, [r7, #23]
 800bbae:	68ba      	ldr	r2, [r7, #8]
 800bbb0:	4413      	add	r3, r2
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	7812      	ldrb	r2, [r2, #0]
 800bbb6:	701a      	strb	r2, [r3, #0]
  idx++;
 800bbb8:	7dfb      	ldrb	r3, [r7, #23]
 800bbba:	3301      	adds	r3, #1
 800bbbc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bbbe:	7dfb      	ldrb	r3, [r7, #23]
 800bbc0:	68ba      	ldr	r2, [r7, #8]
 800bbc2:	4413      	add	r3, r2
 800bbc4:	2203      	movs	r2, #3
 800bbc6:	701a      	strb	r2, [r3, #0]
  idx++;
 800bbc8:	7dfb      	ldrb	r3, [r7, #23]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bbce:	e013      	b.n	800bbf8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bbd0:	7dfb      	ldrb	r3, [r7, #23]
 800bbd2:	68ba      	ldr	r2, [r7, #8]
 800bbd4:	4413      	add	r3, r2
 800bbd6:	693a      	ldr	r2, [r7, #16]
 800bbd8:	7812      	ldrb	r2, [r2, #0]
 800bbda:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	3301      	adds	r3, #1
 800bbe0:	613b      	str	r3, [r7, #16]
    idx++;
 800bbe2:	7dfb      	ldrb	r3, [r7, #23]
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bbe8:	7dfb      	ldrb	r3, [r7, #23]
 800bbea:	68ba      	ldr	r2, [r7, #8]
 800bbec:	4413      	add	r3, r2
 800bbee:	2200      	movs	r2, #0
 800bbf0:	701a      	strb	r2, [r3, #0]
    idx++;
 800bbf2:	7dfb      	ldrb	r3, [r7, #23]
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d1e7      	bne.n	800bbd0 <USBD_GetString+0x52>
 800bc00:	e000      	b.n	800bc04 <USBD_GetString+0x86>
    return;
 800bc02:	bf00      	nop
  }
}
 800bc04:	3718      	adds	r7, #24
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}

0800bc0a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bc0a:	b480      	push	{r7}
 800bc0c:	b085      	sub	sp, #20
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bc12:	2300      	movs	r3, #0
 800bc14:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bc1a:	e005      	b.n	800bc28 <USBD_GetLen+0x1e>
  {
    len++;
 800bc1c:	7bfb      	ldrb	r3, [r7, #15]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	3301      	adds	r3, #1
 800bc26:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d1f5      	bne.n	800bc1c <USBD_GetLen+0x12>
  }

  return len;
 800bc30:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3714      	adds	r7, #20
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr

0800bc3e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bc3e:	b580      	push	{r7, lr}
 800bc40:	b084      	sub	sp, #16
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	60f8      	str	r0, [r7, #12]
 800bc46:	60b9      	str	r1, [r7, #8]
 800bc48:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2202      	movs	r2, #2
 800bc4e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	687a      	ldr	r2, [r7, #4]
 800bc56:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	68ba      	ldr	r2, [r7, #8]
 800bc62:	2100      	movs	r1, #0
 800bc64:	68f8      	ldr	r0, [r7, #12]
 800bc66:	f000 faca 	bl	800c1fe <USBD_LL_Transmit>

  return USBD_OK;
 800bc6a:	2300      	movs	r3, #0
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3710      	adds	r7, #16
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	60f8      	str	r0, [r7, #12]
 800bc7c:	60b9      	str	r1, [r7, #8]
 800bc7e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	68ba      	ldr	r2, [r7, #8]
 800bc84:	2100      	movs	r1, #0
 800bc86:	68f8      	ldr	r0, [r7, #12]
 800bc88:	f000 fab9 	bl	800c1fe <USBD_LL_Transmit>

  return USBD_OK;
 800bc8c:	2300      	movs	r3, #0
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3710      	adds	r7, #16
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}

0800bc96 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bc96:	b580      	push	{r7, lr}
 800bc98:	b084      	sub	sp, #16
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	60f8      	str	r0, [r7, #12]
 800bc9e:	60b9      	str	r1, [r7, #8]
 800bca0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2203      	movs	r2, #3
 800bca6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	687a      	ldr	r2, [r7, #4]
 800bcae:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	68ba      	ldr	r2, [r7, #8]
 800bcbe:	2100      	movs	r1, #0
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	f000 fabd 	bl	800c240 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bcc6:	2300      	movs	r3, #0
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3710      	adds	r7, #16
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	60b9      	str	r1, [r7, #8]
 800bcda:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	68ba      	ldr	r2, [r7, #8]
 800bce0:	2100      	movs	r1, #0
 800bce2:	68f8      	ldr	r0, [r7, #12]
 800bce4:	f000 faac 	bl	800c240 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bce8:	2300      	movs	r3, #0
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3710      	adds	r7, #16
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}

0800bcf2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b082      	sub	sp, #8
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2204      	movs	r2, #4
 800bcfe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bd02:	2300      	movs	r3, #0
 800bd04:	2200      	movs	r2, #0
 800bd06:	2100      	movs	r1, #0
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 fa78 	bl	800c1fe <USBD_LL_Transmit>

  return USBD_OK;
 800bd0e:	2300      	movs	r3, #0
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3708      	adds	r7, #8
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2205      	movs	r2, #5
 800bd24:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd28:	2300      	movs	r3, #0
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	2100      	movs	r1, #0
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 fa86 	bl	800c240 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bd34:	2300      	movs	r3, #0
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3708      	adds	r7, #8
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}

0800bd3e <HAL_PCDEx_SetTxFiFoInBytes>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 1 */
#if(!STM32F1_DEVICE)
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800bd3e:	b580      	push	{r7, lr}
 800bd40:	b082      	sub	sp, #8
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]
 800bd46:	460b      	mov	r3, r1
 800bd48:	70fb      	strb	r3, [r7, #3]
 800bd4a:	4613      	mov	r3, r2
 800bd4c:	803b      	strh	r3, [r7, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 800bd4e:	883b      	ldrh	r3, [r7, #0]
 800bd50:	089b      	lsrs	r3, r3, #2
 800bd52:	b29a      	uxth	r2, r3
 800bd54:	78fb      	ldrb	r3, [r7, #3]
 800bd56:	4619      	mov	r1, r3
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f7f8 ffb9 	bl	8004cd0 <HAL_PCDEx_SetTxFiFo>
 800bd5e:	4603      	mov	r3, r0
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3708      	adds	r7, #8
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <HAL_PCDEx_SetRxFiFoInBytes>:

HAL_StatusTypeDef HAL_PCDEx_SetRxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	460b      	mov	r3, r1
 800bd72:	807b      	strh	r3, [r7, #2]
	return HAL_PCDEx_SetRxFiFo(hpcd, (size/4));
 800bd74:	887b      	ldrh	r3, [r7, #2]
 800bd76:	089b      	lsrs	r3, r3, #2
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f7f8 ffee 	bl	8004d5e <HAL_PCDEx_SetRxFiFo>
 800bd82:	4603      	mov	r3, r0
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3708      	adds	r7, #8
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bda0:	4619      	mov	r1, r3
 800bda2:	4610      	mov	r0, r2
 800bda4:	f7fe fef7 	bl	800ab96 <USBD_LL_SetupStage>
}
 800bda8:	bf00      	nop
 800bdaa:	3708      	adds	r7, #8
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	460b      	mov	r3, r1
 800bdba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bdc2:	78fa      	ldrb	r2, [r7, #3]
 800bdc4:	6879      	ldr	r1, [r7, #4]
 800bdc6:	4613      	mov	r3, r2
 800bdc8:	00db      	lsls	r3, r3, #3
 800bdca:	4413      	add	r3, r2
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	440b      	add	r3, r1
 800bdd0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bdd4:	681a      	ldr	r2, [r3, #0]
 800bdd6:	78fb      	ldrb	r3, [r7, #3]
 800bdd8:	4619      	mov	r1, r3
 800bdda:	f7fe ff31 	bl	800ac40 <USBD_LL_DataOutStage>
}
 800bdde:	bf00      	nop
 800bde0:	3708      	adds	r7, #8
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}

0800bde6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bde6:	b580      	push	{r7, lr}
 800bde8:	b082      	sub	sp, #8
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	6078      	str	r0, [r7, #4]
 800bdee:	460b      	mov	r3, r1
 800bdf0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bdf8:	78fa      	ldrb	r2, [r7, #3]
 800bdfa:	6879      	ldr	r1, [r7, #4]
 800bdfc:	4613      	mov	r3, r2
 800bdfe:	00db      	lsls	r3, r3, #3
 800be00:	4413      	add	r3, r2
 800be02:	009b      	lsls	r3, r3, #2
 800be04:	440b      	add	r3, r1
 800be06:	3320      	adds	r3, #32
 800be08:	681a      	ldr	r2, [r3, #0]
 800be0a:	78fb      	ldrb	r3, [r7, #3]
 800be0c:	4619      	mov	r1, r3
 800be0e:	f7fe ff7a 	bl	800ad06 <USBD_LL_DataInStage>
}
 800be12:	bf00      	nop
 800be14:	3708      	adds	r7, #8
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}

0800be1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be1a:	b580      	push	{r7, lr}
 800be1c:	b082      	sub	sp, #8
 800be1e:	af00      	add	r7, sp, #0
 800be20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800be28:	4618      	mov	r0, r3
 800be2a:	f7ff f889 	bl	800af40 <USBD_LL_SOF>
}
 800be2e:	bf00      	nop
 800be30:	3708      	adds	r7, #8
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}

0800be36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b084      	sub	sp, #16
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800be3e:	2301      	movs	r3, #1
 800be40:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	79db      	ldrb	r3, [r3, #7]
 800be46:	2b02      	cmp	r3, #2
 800be48:	d102      	bne.n	800be50 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 800be4a:	2301      	movs	r3, #1
 800be4c:	73fb      	strb	r3, [r7, #15]
 800be4e:	e008      	b.n	800be62 <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	79db      	ldrb	r3, [r3, #7]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d102      	bne.n	800be5e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 800be58:	2300      	movs	r3, #0
 800be5a:	73fb      	strb	r3, [r7, #15]
 800be5c:	e001      	b.n	800be62 <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 800be5e:	f7f5 f825 	bl	8000eac <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800be68:	7bfa      	ldrb	r2, [r7, #15]
 800be6a:	4611      	mov	r1, r2
 800be6c:	4618      	mov	r0, r3
 800be6e:	f7ff f829 	bl	800aec4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800be78:	4618      	mov	r0, r3
 800be7a:	f7fe ffda 	bl	800ae32 <USBD_LL_Reset>
}
 800be7e:	bf00      	nop
 800be80:	3710      	adds	r7, #16
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
	...

0800be88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b082      	sub	sp, #8
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800be96:	4618      	mov	r0, r3
 800be98:	f7ff f824 	bl	800aee4 <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	6812      	ldr	r2, [r2, #0]
 800beaa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800beae:	f043 0301 	orr.w	r3, r3, #1
 800beb2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	7adb      	ldrb	r3, [r3, #11]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d005      	beq.n	800bec8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bebc:	4b04      	ldr	r3, [pc, #16]	@ (800bed0 <HAL_PCD_SuspendCallback+0x48>)
 800bebe:	691b      	ldr	r3, [r3, #16]
 800bec0:	4a03      	ldr	r2, [pc, #12]	@ (800bed0 <HAL_PCD_SuspendCallback+0x48>)
 800bec2:	f043 0306 	orr.w	r3, r3, #6
 800bec6:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 800bec8:	bf00      	nop
 800beca:	3708      	adds	r7, #8
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}
 800bed0:	e000ed00 	.word	0xe000ed00

0800bed4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b082      	sub	sp, #8
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7ff f814 	bl	800af10 <USBD_LL_Resume>
}
 800bee8:	bf00      	nop
 800beea:	3708      	adds	r7, #8
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b082      	sub	sp, #8
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	460b      	mov	r3, r1
 800befa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bf02:	78fa      	ldrb	r2, [r7, #3]
 800bf04:	4611      	mov	r1, r2
 800bf06:	4618      	mov	r0, r3
 800bf08:	f7ff f862 	bl	800afd0 <USBD_LL_IsoOUTIncomplete>
}
 800bf0c:	bf00      	nop
 800bf0e:	3708      	adds	r7, #8
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	460b      	mov	r3, r1
 800bf1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bf26:	78fa      	ldrb	r2, [r7, #3]
 800bf28:	4611      	mov	r1, r2
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7ff f82a 	bl	800af84 <USBD_LL_IsoINIncomplete>
}
 800bf30:	bf00      	nop
 800bf32:	3708      	adds	r7, #8
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}

0800bf38 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7ff f868 	bl	800b01c <USBD_LL_DevConnected>
}
 800bf4c:	bf00      	nop
 800bf4e:	3708      	adds	r7, #8
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}

0800bf54 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bf62:	4618      	mov	r0, r3
 800bf64:	f7ff f865 	bl	800b032 <USBD_LL_DevDisconnected>
}
 800bf68:	bf00      	nop
 800bf6a:	3708      	adds	r7, #8
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 800bf78:	4b27      	ldr	r3, [pc, #156]	@ (800c018 <USBD_LL_Init+0xa8>)
 800bf7a:	4a28      	ldr	r2, [pc, #160]	@ (800c01c <USBD_LL_Init+0xac>)
 800bf7c:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d143      	bne.n	800c00e <USBD_LL_Init+0x9e>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 800bf86:	4b24      	ldr	r3, [pc, #144]	@ (800c018 <USBD_LL_Init+0xa8>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	687a      	ldr	r2, [r7, #4]
 800bf8c:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
    pdev->pData = hpcd_USB_OTG_PTR;
 800bf90:	4b21      	ldr	r3, [pc, #132]	@ (800c018 <USBD_LL_Init+0xa8>)
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
      pma_track += 8;
    }
#endif
#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFoInBytes(hpcd_USB_OTG_PTR, 512); // ALL OUT EP Buffer
 800bf9a:	4b1f      	ldr	r3, [pc, #124]	@ (800c018 <USBD_LL_Init+0xa8>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f7ff fee0 	bl	800bd68 <HAL_PCDEx_SetRxFiFoInBytes>

    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, 0, 64); // EP0 IN
 800bfa8:	4b1b      	ldr	r3, [pc, #108]	@ (800c018 <USBD_LL_Init+0xa8>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	2240      	movs	r2, #64	@ 0x40
 800bfae:	2100      	movs	r1, #0
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7ff fec4 	bl	800bd3e <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (HID_KEYBOARD_IN_EP & 0x7F), 64);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CUSTOM_HID_IN_EP & 0x7F), 64);
 800bfb6:	4b18      	ldr	r3, [pc, #96]	@ (800c018 <USBD_LL_Init+0xa8>)
 800bfb8:	6818      	ldr	r0, [r3, #0]
 800bfba:	4b19      	ldr	r3, [pc, #100]	@ (800c020 <USBD_LL_Init+0xb0>)
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	2240      	movs	r2, #64	@ 0x40
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	f7ff feb9 	bl	800bd3e <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_PRNTR == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (PRNT_IN_EP & 0x7F), 128);
#endif
#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800bfcc:	2300      	movs	r3, #0
 800bfce:	73fb      	strb	r3, [r7, #15]
 800bfd0:	e01a      	b.n	800c008 <USBD_LL_Init+0x98>
    {
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 128);
 800bfd2:	4b11      	ldr	r3, [pc, #68]	@ (800c018 <USBD_LL_Init+0xa8>)
 800bfd4:	6818      	ldr	r0, [r3, #0]
 800bfd6:	7bfb      	ldrb	r3, [r7, #15]
 800bfd8:	4a12      	ldr	r2, [pc, #72]	@ (800c024 <USBD_LL_Init+0xb4>)
 800bfda:	5cd3      	ldrb	r3, [r2, r3]
 800bfdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bfe0:	b2db      	uxtb	r3, r3
 800bfe2:	2280      	movs	r2, #128	@ 0x80
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	f7ff feaa 	bl	800bd3e <HAL_PCDEx_SetTxFiFoInBytes>
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 64);
 800bfea:	4b0b      	ldr	r3, [pc, #44]	@ (800c018 <USBD_LL_Init+0xa8>)
 800bfec:	6818      	ldr	r0, [r3, #0]
 800bfee:	7bfb      	ldrb	r3, [r7, #15]
 800bff0:	4a0d      	ldr	r2, [pc, #52]	@ (800c028 <USBD_LL_Init+0xb8>)
 800bff2:	5cd3      	ldrb	r3, [r2, r3]
 800bff4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bff8:	b2db      	uxtb	r3, r3
 800bffa:	2240      	movs	r2, #64	@ 0x40
 800bffc:	4619      	mov	r1, r3
 800bffe:	f7ff fe9e 	bl	800bd3e <HAL_PCDEx_SetTxFiFoInBytes>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800c002:	7bfb      	ldrb	r3, [r7, #15]
 800c004:	3301      	adds	r3, #1
 800c006:	73fb      	strb	r3, [r7, #15]
 800c008:	7bfb      	ldrb	r3, [r7, #15]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d0e1      	beq.n	800bfd2 <USBD_LL_Init+0x62>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 800c00e:	2300      	movs	r3, #0
}
 800c010:	4618      	mov	r0, r3
 800c012:	3710      	adds	r7, #16
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}
 800c018:	200028bc 	.word	0x200028bc
 800c01c:	20000868 	.word	0x20000868
 800c020:	200001da 	.word	0x200001da
 800c024:	20002514 	.word	0x20002514
 800c028:	2000251c 	.word	0x2000251c

0800c02c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b084      	sub	sp, #16
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c034:	2300      	movs	r3, #0
 800c036:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c038:	2300      	movs	r3, #0
 800c03a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c042:	4618      	mov	r0, r3
 800c044:	f7f7 fd65 	bl	8003b12 <HAL_PCD_Start>
 800c048:	4603      	mov	r3, r0
 800c04a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c04c:	7bfb      	ldrb	r3, [r7, #15]
 800c04e:	4618      	mov	r0, r3
 800c050:	f000 f92a 	bl	800c2a8 <USBD_Get_USB_Status>
 800c054:	4603      	mov	r3, r0
 800c056:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c058:	7bbb      	ldrb	r3, [r7, #14]
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3710      	adds	r7, #16
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}

0800c062 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c062:	b580      	push	{r7, lr}
 800c064:	b084      	sub	sp, #16
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
 800c06a:	4608      	mov	r0, r1
 800c06c:	4611      	mov	r1, r2
 800c06e:	461a      	mov	r2, r3
 800c070:	4603      	mov	r3, r0
 800c072:	70fb      	strb	r3, [r7, #3]
 800c074:	460b      	mov	r3, r1
 800c076:	70bb      	strb	r3, [r7, #2]
 800c078:	4613      	mov	r3, r2
 800c07a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c07c:	2300      	movs	r3, #0
 800c07e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c080:	2300      	movs	r3, #0
 800c082:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800c08a:	78bb      	ldrb	r3, [r7, #2]
 800c08c:	883a      	ldrh	r2, [r7, #0]
 800c08e:	78f9      	ldrb	r1, [r7, #3]
 800c090:	f7f8 fa39 	bl	8004506 <HAL_PCD_EP_Open>
 800c094:	4603      	mov	r3, r0
 800c096:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c098:	7bfb      	ldrb	r3, [r7, #15]
 800c09a:	4618      	mov	r0, r3
 800c09c:	f000 f904 	bl	800c2a8 <USBD_Get_USB_Status>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3710      	adds	r7, #16
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0ae:	b580      	push	{r7, lr}
 800c0b0:	b084      	sub	sp, #16
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
 800c0b6:	460b      	mov	r3, r1
 800c0b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c0c8:	78fa      	ldrb	r2, [r7, #3]
 800c0ca:	4611      	mov	r1, r2
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7f8 fa84 	bl	80045da <HAL_PCD_EP_Close>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c0d6:	7bfb      	ldrb	r3, [r7, #15]
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f000 f8e5 	bl	800c2a8 <USBD_Get_USB_Status>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3710      	adds	r7, #16
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c106:	78fa      	ldrb	r2, [r7, #3]
 800c108:	4611      	mov	r1, r2
 800c10a:	4618      	mov	r0, r3
 800c10c:	f7f8 fb3c 	bl	8004788 <HAL_PCD_EP_SetStall>
 800c110:	4603      	mov	r3, r0
 800c112:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c114:	7bfb      	ldrb	r3, [r7, #15]
 800c116:	4618      	mov	r0, r3
 800c118:	f000 f8c6 	bl	800c2a8 <USBD_Get_USB_Status>
 800c11c:	4603      	mov	r3, r0
 800c11e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c120:	7bbb      	ldrb	r3, [r7, #14]
}
 800c122:	4618      	mov	r0, r3
 800c124:	3710      	adds	r7, #16
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}

0800c12a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c12a:	b580      	push	{r7, lr}
 800c12c:	b084      	sub	sp, #16
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
 800c132:	460b      	mov	r3, r1
 800c134:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c136:	2300      	movs	r3, #0
 800c138:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c13a:	2300      	movs	r3, #0
 800c13c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c144:	78fa      	ldrb	r2, [r7, #3]
 800c146:	4611      	mov	r1, r2
 800c148:	4618      	mov	r0, r3
 800c14a:	f7f8 fb80 	bl	800484e <HAL_PCD_EP_ClrStall>
 800c14e:	4603      	mov	r3, r0
 800c150:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c152:	7bfb      	ldrb	r3, [r7, #15]
 800c154:	4618      	mov	r0, r3
 800c156:	f000 f8a7 	bl	800c2a8 <USBD_Get_USB_Status>
 800c15a:	4603      	mov	r3, r0
 800c15c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c15e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c160:	4618      	mov	r0, r3
 800c162:	3710      	adds	r7, #16
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c168:	b480      	push	{r7}
 800c16a:	b085      	sub	sp, #20
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	460b      	mov	r3, r1
 800c172:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c17a:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 800c17c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c180:	2b00      	cmp	r3, #0
 800c182:	da0b      	bge.n	800c19c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c184:	78fb      	ldrb	r3, [r7, #3]
 800c186:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c18a:	68f9      	ldr	r1, [r7, #12]
 800c18c:	4613      	mov	r3, r2
 800c18e:	00db      	lsls	r3, r3, #3
 800c190:	4413      	add	r3, r2
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	440b      	add	r3, r1
 800c196:	3316      	adds	r3, #22
 800c198:	781b      	ldrb	r3, [r3, #0]
 800c19a:	e00b      	b.n	800c1b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c19c:	78fb      	ldrb	r3, [r7, #3]
 800c19e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c1a2:	68f9      	ldr	r1, [r7, #12]
 800c1a4:	4613      	mov	r3, r2
 800c1a6:	00db      	lsls	r3, r3, #3
 800c1a8:	4413      	add	r3, r2
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	440b      	add	r3, r1
 800c1ae:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c1b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3714      	adds	r7, #20
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr

0800c1c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	460b      	mov	r3, r1
 800c1ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c1da:	78fa      	ldrb	r2, [r7, #3]
 800c1dc:	4611      	mov	r1, r2
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7f8 f96d 	bl	80044be <HAL_PCD_SetAddress>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c1e8:	7bfb      	ldrb	r3, [r7, #15]
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f000 f85c 	bl	800c2a8 <USBD_Get_USB_Status>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3710      	adds	r7, #16
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}

0800c1fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c1fe:	b580      	push	{r7, lr}
 800c200:	b086      	sub	sp, #24
 800c202:	af00      	add	r7, sp, #0
 800c204:	60f8      	str	r0, [r7, #12]
 800c206:	607a      	str	r2, [r7, #4]
 800c208:	603b      	str	r3, [r7, #0]
 800c20a:	460b      	mov	r3, r1
 800c20c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c20e:	2300      	movs	r3, #0
 800c210:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c212:	2300      	movs	r3, #0
 800c214:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800c21c:	7af9      	ldrb	r1, [r7, #11]
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	687a      	ldr	r2, [r7, #4]
 800c222:	f7f8 fa77 	bl	8004714 <HAL_PCD_EP_Transmit>
 800c226:	4603      	mov	r3, r0
 800c228:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c22a:	7dfb      	ldrb	r3, [r7, #23]
 800c22c:	4618      	mov	r0, r3
 800c22e:	f000 f83b 	bl	800c2a8 <USBD_Get_USB_Status>
 800c232:	4603      	mov	r3, r0
 800c234:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c236:	7dbb      	ldrb	r3, [r7, #22]
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3718      	adds	r7, #24
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b086      	sub	sp, #24
 800c244:	af00      	add	r7, sp, #0
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	607a      	str	r2, [r7, #4]
 800c24a:	603b      	str	r3, [r7, #0]
 800c24c:	460b      	mov	r3, r1
 800c24e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c250:	2300      	movs	r3, #0
 800c252:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c254:	2300      	movs	r3, #0
 800c256:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800c25e:	7af9      	ldrb	r1, [r7, #11]
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	f7f8 fa03 	bl	800466e <HAL_PCD_EP_Receive>
 800c268:	4603      	mov	r3, r0
 800c26a:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800c26c:	7dfb      	ldrb	r3, [r7, #23]
 800c26e:	4618      	mov	r0, r3
 800c270:	f000 f81a 	bl	800c2a8 <USBD_Get_USB_Status>
 800c274:	4603      	mov	r3, r0
 800c276:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c278:	7dbb      	ldrb	r3, [r7, #22]
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3718      	adds	r7, #24
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}

0800c282 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c282:	b580      	push	{r7, lr}
 800c284:	b082      	sub	sp, #8
 800c286:	af00      	add	r7, sp, #0
 800c288:	6078      	str	r0, [r7, #4]
 800c28a:	460b      	mov	r3, r1
 800c28c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800c294:	78fa      	ldrb	r2, [r7, #3]
 800c296:	4611      	mov	r1, r2
 800c298:	4618      	mov	r0, r3
 800c29a:	f7f8 fa23 	bl	80046e4 <HAL_PCD_EP_GetRxCount>
 800c29e:	4603      	mov	r3, r0
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b085      	sub	sp, #20
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c2b6:	79fb      	ldrb	r3, [r7, #7]
 800c2b8:	2b03      	cmp	r3, #3
 800c2ba:	d817      	bhi.n	800c2ec <USBD_Get_USB_Status+0x44>
 800c2bc:	a201      	add	r2, pc, #4	@ (adr r2, 800c2c4 <USBD_Get_USB_Status+0x1c>)
 800c2be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2c2:	bf00      	nop
 800c2c4:	0800c2d5 	.word	0x0800c2d5
 800c2c8:	0800c2db 	.word	0x0800c2db
 800c2cc:	0800c2e1 	.word	0x0800c2e1
 800c2d0:	0800c2e7 	.word	0x0800c2e7
  {
  case HAL_OK:
    usb_status = USBD_OK;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c2d8:	e00b      	b.n	800c2f2 <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 800c2da:	2303      	movs	r3, #3
 800c2dc:	73fb      	strb	r3, [r7, #15]
    break;
 800c2de:	e008      	b.n	800c2f2 <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	73fb      	strb	r3, [r7, #15]
    break;
 800c2e4:	e005      	b.n	800c2f2 <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 800c2e6:	2303      	movs	r3, #3
 800c2e8:	73fb      	strb	r3, [r7, #15]
    break;
 800c2ea:	e002      	b.n	800c2f2 <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 800c2ec:	2303      	movs	r3, #3
 800c2ee:	73fb      	strb	r3, [r7, #15]
    break;
 800c2f0:	bf00      	nop
  }
  return usb_status;
 800c2f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3714      	adds	r7, #20
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr

0800c300 <sniprintf>:
 800c300:	b40c      	push	{r2, r3}
 800c302:	b530      	push	{r4, r5, lr}
 800c304:	4b18      	ldr	r3, [pc, #96]	@ (800c368 <sniprintf+0x68>)
 800c306:	1e0c      	subs	r4, r1, #0
 800c308:	681d      	ldr	r5, [r3, #0]
 800c30a:	b09d      	sub	sp, #116	@ 0x74
 800c30c:	da08      	bge.n	800c320 <sniprintf+0x20>
 800c30e:	238b      	movs	r3, #139	@ 0x8b
 800c310:	602b      	str	r3, [r5, #0]
 800c312:	f04f 30ff 	mov.w	r0, #4294967295
 800c316:	b01d      	add	sp, #116	@ 0x74
 800c318:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c31c:	b002      	add	sp, #8
 800c31e:	4770      	bx	lr
 800c320:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c324:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c328:	f04f 0300 	mov.w	r3, #0
 800c32c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800c32e:	bf14      	ite	ne
 800c330:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c334:	4623      	moveq	r3, r4
 800c336:	9304      	str	r3, [sp, #16]
 800c338:	9307      	str	r3, [sp, #28]
 800c33a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c33e:	9002      	str	r0, [sp, #8]
 800c340:	9006      	str	r0, [sp, #24]
 800c342:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c346:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c348:	ab21      	add	r3, sp, #132	@ 0x84
 800c34a:	a902      	add	r1, sp, #8
 800c34c:	4628      	mov	r0, r5
 800c34e:	9301      	str	r3, [sp, #4]
 800c350:	f000 f9a2 	bl	800c698 <_svfiprintf_r>
 800c354:	1c43      	adds	r3, r0, #1
 800c356:	bfbc      	itt	lt
 800c358:	238b      	movlt	r3, #139	@ 0x8b
 800c35a:	602b      	strlt	r3, [r5, #0]
 800c35c:	2c00      	cmp	r4, #0
 800c35e:	d0da      	beq.n	800c316 <sniprintf+0x16>
 800c360:	9b02      	ldr	r3, [sp, #8]
 800c362:	2200      	movs	r2, #0
 800c364:	701a      	strb	r2, [r3, #0]
 800c366:	e7d6      	b.n	800c316 <sniprintf+0x16>
 800c368:	200002b4 	.word	0x200002b4

0800c36c <memset>:
 800c36c:	4402      	add	r2, r0
 800c36e:	4603      	mov	r3, r0
 800c370:	4293      	cmp	r3, r2
 800c372:	d100      	bne.n	800c376 <memset+0xa>
 800c374:	4770      	bx	lr
 800c376:	f803 1b01 	strb.w	r1, [r3], #1
 800c37a:	e7f9      	b.n	800c370 <memset+0x4>

0800c37c <__errno>:
 800c37c:	4b01      	ldr	r3, [pc, #4]	@ (800c384 <__errno+0x8>)
 800c37e:	6818      	ldr	r0, [r3, #0]
 800c380:	4770      	bx	lr
 800c382:	bf00      	nop
 800c384:	200002b4 	.word	0x200002b4

0800c388 <__libc_init_array>:
 800c388:	b570      	push	{r4, r5, r6, lr}
 800c38a:	4d0d      	ldr	r5, [pc, #52]	@ (800c3c0 <__libc_init_array+0x38>)
 800c38c:	4c0d      	ldr	r4, [pc, #52]	@ (800c3c4 <__libc_init_array+0x3c>)
 800c38e:	1b64      	subs	r4, r4, r5
 800c390:	10a4      	asrs	r4, r4, #2
 800c392:	2600      	movs	r6, #0
 800c394:	42a6      	cmp	r6, r4
 800c396:	d109      	bne.n	800c3ac <__libc_init_array+0x24>
 800c398:	4d0b      	ldr	r5, [pc, #44]	@ (800c3c8 <__libc_init_array+0x40>)
 800c39a:	4c0c      	ldr	r4, [pc, #48]	@ (800c3cc <__libc_init_array+0x44>)
 800c39c:	f000 fc64 	bl	800cc68 <_init>
 800c3a0:	1b64      	subs	r4, r4, r5
 800c3a2:	10a4      	asrs	r4, r4, #2
 800c3a4:	2600      	movs	r6, #0
 800c3a6:	42a6      	cmp	r6, r4
 800c3a8:	d105      	bne.n	800c3b6 <__libc_init_array+0x2e>
 800c3aa:	bd70      	pop	{r4, r5, r6, pc}
 800c3ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3b0:	4798      	blx	r3
 800c3b2:	3601      	adds	r6, #1
 800c3b4:	e7ee      	b.n	800c394 <__libc_init_array+0xc>
 800c3b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3ba:	4798      	blx	r3
 800c3bc:	3601      	adds	r6, #1
 800c3be:	e7f2      	b.n	800c3a6 <__libc_init_array+0x1e>
 800c3c0:	0800cd38 	.word	0x0800cd38
 800c3c4:	0800cd38 	.word	0x0800cd38
 800c3c8:	0800cd38 	.word	0x0800cd38
 800c3cc:	0800cd3c 	.word	0x0800cd3c

0800c3d0 <__retarget_lock_acquire_recursive>:
 800c3d0:	4770      	bx	lr

0800c3d2 <__retarget_lock_release_recursive>:
 800c3d2:	4770      	bx	lr

0800c3d4 <memcpy>:
 800c3d4:	440a      	add	r2, r1
 800c3d6:	4291      	cmp	r1, r2
 800c3d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3dc:	d100      	bne.n	800c3e0 <memcpy+0xc>
 800c3de:	4770      	bx	lr
 800c3e0:	b510      	push	{r4, lr}
 800c3e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3ea:	4291      	cmp	r1, r2
 800c3ec:	d1f9      	bne.n	800c3e2 <memcpy+0xe>
 800c3ee:	bd10      	pop	{r4, pc}

0800c3f0 <_free_r>:
 800c3f0:	b538      	push	{r3, r4, r5, lr}
 800c3f2:	4605      	mov	r5, r0
 800c3f4:	2900      	cmp	r1, #0
 800c3f6:	d041      	beq.n	800c47c <_free_r+0x8c>
 800c3f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3fc:	1f0c      	subs	r4, r1, #4
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	bfb8      	it	lt
 800c402:	18e4      	addlt	r4, r4, r3
 800c404:	f000 f8e0 	bl	800c5c8 <__malloc_lock>
 800c408:	4a1d      	ldr	r2, [pc, #116]	@ (800c480 <_free_r+0x90>)
 800c40a:	6813      	ldr	r3, [r2, #0]
 800c40c:	b933      	cbnz	r3, 800c41c <_free_r+0x2c>
 800c40e:	6063      	str	r3, [r4, #4]
 800c410:	6014      	str	r4, [r2, #0]
 800c412:	4628      	mov	r0, r5
 800c414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c418:	f000 b8dc 	b.w	800c5d4 <__malloc_unlock>
 800c41c:	42a3      	cmp	r3, r4
 800c41e:	d908      	bls.n	800c432 <_free_r+0x42>
 800c420:	6820      	ldr	r0, [r4, #0]
 800c422:	1821      	adds	r1, r4, r0
 800c424:	428b      	cmp	r3, r1
 800c426:	bf01      	itttt	eq
 800c428:	6819      	ldreq	r1, [r3, #0]
 800c42a:	685b      	ldreq	r3, [r3, #4]
 800c42c:	1809      	addeq	r1, r1, r0
 800c42e:	6021      	streq	r1, [r4, #0]
 800c430:	e7ed      	b.n	800c40e <_free_r+0x1e>
 800c432:	461a      	mov	r2, r3
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	b10b      	cbz	r3, 800c43c <_free_r+0x4c>
 800c438:	42a3      	cmp	r3, r4
 800c43a:	d9fa      	bls.n	800c432 <_free_r+0x42>
 800c43c:	6811      	ldr	r1, [r2, #0]
 800c43e:	1850      	adds	r0, r2, r1
 800c440:	42a0      	cmp	r0, r4
 800c442:	d10b      	bne.n	800c45c <_free_r+0x6c>
 800c444:	6820      	ldr	r0, [r4, #0]
 800c446:	4401      	add	r1, r0
 800c448:	1850      	adds	r0, r2, r1
 800c44a:	4283      	cmp	r3, r0
 800c44c:	6011      	str	r1, [r2, #0]
 800c44e:	d1e0      	bne.n	800c412 <_free_r+0x22>
 800c450:	6818      	ldr	r0, [r3, #0]
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	6053      	str	r3, [r2, #4]
 800c456:	4408      	add	r0, r1
 800c458:	6010      	str	r0, [r2, #0]
 800c45a:	e7da      	b.n	800c412 <_free_r+0x22>
 800c45c:	d902      	bls.n	800c464 <_free_r+0x74>
 800c45e:	230c      	movs	r3, #12
 800c460:	602b      	str	r3, [r5, #0]
 800c462:	e7d6      	b.n	800c412 <_free_r+0x22>
 800c464:	6820      	ldr	r0, [r4, #0]
 800c466:	1821      	adds	r1, r4, r0
 800c468:	428b      	cmp	r3, r1
 800c46a:	bf04      	itt	eq
 800c46c:	6819      	ldreq	r1, [r3, #0]
 800c46e:	685b      	ldreq	r3, [r3, #4]
 800c470:	6063      	str	r3, [r4, #4]
 800c472:	bf04      	itt	eq
 800c474:	1809      	addeq	r1, r1, r0
 800c476:	6021      	streq	r1, [r4, #0]
 800c478:	6054      	str	r4, [r2, #4]
 800c47a:	e7ca      	b.n	800c412 <_free_r+0x22>
 800c47c:	bd38      	pop	{r3, r4, r5, pc}
 800c47e:	bf00      	nop
 800c480:	20002a04 	.word	0x20002a04

0800c484 <sbrk_aligned>:
 800c484:	b570      	push	{r4, r5, r6, lr}
 800c486:	4e0f      	ldr	r6, [pc, #60]	@ (800c4c4 <sbrk_aligned+0x40>)
 800c488:	460c      	mov	r4, r1
 800c48a:	6831      	ldr	r1, [r6, #0]
 800c48c:	4605      	mov	r5, r0
 800c48e:	b911      	cbnz	r1, 800c496 <sbrk_aligned+0x12>
 800c490:	f000 fba4 	bl	800cbdc <_sbrk_r>
 800c494:	6030      	str	r0, [r6, #0]
 800c496:	4621      	mov	r1, r4
 800c498:	4628      	mov	r0, r5
 800c49a:	f000 fb9f 	bl	800cbdc <_sbrk_r>
 800c49e:	1c43      	adds	r3, r0, #1
 800c4a0:	d103      	bne.n	800c4aa <sbrk_aligned+0x26>
 800c4a2:	f04f 34ff 	mov.w	r4, #4294967295
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	bd70      	pop	{r4, r5, r6, pc}
 800c4aa:	1cc4      	adds	r4, r0, #3
 800c4ac:	f024 0403 	bic.w	r4, r4, #3
 800c4b0:	42a0      	cmp	r0, r4
 800c4b2:	d0f8      	beq.n	800c4a6 <sbrk_aligned+0x22>
 800c4b4:	1a21      	subs	r1, r4, r0
 800c4b6:	4628      	mov	r0, r5
 800c4b8:	f000 fb90 	bl	800cbdc <_sbrk_r>
 800c4bc:	3001      	adds	r0, #1
 800c4be:	d1f2      	bne.n	800c4a6 <sbrk_aligned+0x22>
 800c4c0:	e7ef      	b.n	800c4a2 <sbrk_aligned+0x1e>
 800c4c2:	bf00      	nop
 800c4c4:	20002a00 	.word	0x20002a00

0800c4c8 <_malloc_r>:
 800c4c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4cc:	1ccd      	adds	r5, r1, #3
 800c4ce:	f025 0503 	bic.w	r5, r5, #3
 800c4d2:	3508      	adds	r5, #8
 800c4d4:	2d0c      	cmp	r5, #12
 800c4d6:	bf38      	it	cc
 800c4d8:	250c      	movcc	r5, #12
 800c4da:	2d00      	cmp	r5, #0
 800c4dc:	4606      	mov	r6, r0
 800c4de:	db01      	blt.n	800c4e4 <_malloc_r+0x1c>
 800c4e0:	42a9      	cmp	r1, r5
 800c4e2:	d904      	bls.n	800c4ee <_malloc_r+0x26>
 800c4e4:	230c      	movs	r3, #12
 800c4e6:	6033      	str	r3, [r6, #0]
 800c4e8:	2000      	movs	r0, #0
 800c4ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c5c4 <_malloc_r+0xfc>
 800c4f2:	f000 f869 	bl	800c5c8 <__malloc_lock>
 800c4f6:	f8d8 3000 	ldr.w	r3, [r8]
 800c4fa:	461c      	mov	r4, r3
 800c4fc:	bb44      	cbnz	r4, 800c550 <_malloc_r+0x88>
 800c4fe:	4629      	mov	r1, r5
 800c500:	4630      	mov	r0, r6
 800c502:	f7ff ffbf 	bl	800c484 <sbrk_aligned>
 800c506:	1c43      	adds	r3, r0, #1
 800c508:	4604      	mov	r4, r0
 800c50a:	d158      	bne.n	800c5be <_malloc_r+0xf6>
 800c50c:	f8d8 4000 	ldr.w	r4, [r8]
 800c510:	4627      	mov	r7, r4
 800c512:	2f00      	cmp	r7, #0
 800c514:	d143      	bne.n	800c59e <_malloc_r+0xd6>
 800c516:	2c00      	cmp	r4, #0
 800c518:	d04b      	beq.n	800c5b2 <_malloc_r+0xea>
 800c51a:	6823      	ldr	r3, [r4, #0]
 800c51c:	4639      	mov	r1, r7
 800c51e:	4630      	mov	r0, r6
 800c520:	eb04 0903 	add.w	r9, r4, r3
 800c524:	f000 fb5a 	bl	800cbdc <_sbrk_r>
 800c528:	4581      	cmp	r9, r0
 800c52a:	d142      	bne.n	800c5b2 <_malloc_r+0xea>
 800c52c:	6821      	ldr	r1, [r4, #0]
 800c52e:	1a6d      	subs	r5, r5, r1
 800c530:	4629      	mov	r1, r5
 800c532:	4630      	mov	r0, r6
 800c534:	f7ff ffa6 	bl	800c484 <sbrk_aligned>
 800c538:	3001      	adds	r0, #1
 800c53a:	d03a      	beq.n	800c5b2 <_malloc_r+0xea>
 800c53c:	6823      	ldr	r3, [r4, #0]
 800c53e:	442b      	add	r3, r5
 800c540:	6023      	str	r3, [r4, #0]
 800c542:	f8d8 3000 	ldr.w	r3, [r8]
 800c546:	685a      	ldr	r2, [r3, #4]
 800c548:	bb62      	cbnz	r2, 800c5a4 <_malloc_r+0xdc>
 800c54a:	f8c8 7000 	str.w	r7, [r8]
 800c54e:	e00f      	b.n	800c570 <_malloc_r+0xa8>
 800c550:	6822      	ldr	r2, [r4, #0]
 800c552:	1b52      	subs	r2, r2, r5
 800c554:	d420      	bmi.n	800c598 <_malloc_r+0xd0>
 800c556:	2a0b      	cmp	r2, #11
 800c558:	d917      	bls.n	800c58a <_malloc_r+0xc2>
 800c55a:	1961      	adds	r1, r4, r5
 800c55c:	42a3      	cmp	r3, r4
 800c55e:	6025      	str	r5, [r4, #0]
 800c560:	bf18      	it	ne
 800c562:	6059      	strne	r1, [r3, #4]
 800c564:	6863      	ldr	r3, [r4, #4]
 800c566:	bf08      	it	eq
 800c568:	f8c8 1000 	streq.w	r1, [r8]
 800c56c:	5162      	str	r2, [r4, r5]
 800c56e:	604b      	str	r3, [r1, #4]
 800c570:	4630      	mov	r0, r6
 800c572:	f000 f82f 	bl	800c5d4 <__malloc_unlock>
 800c576:	f104 000b 	add.w	r0, r4, #11
 800c57a:	1d23      	adds	r3, r4, #4
 800c57c:	f020 0007 	bic.w	r0, r0, #7
 800c580:	1ac2      	subs	r2, r0, r3
 800c582:	bf1c      	itt	ne
 800c584:	1a1b      	subne	r3, r3, r0
 800c586:	50a3      	strne	r3, [r4, r2]
 800c588:	e7af      	b.n	800c4ea <_malloc_r+0x22>
 800c58a:	6862      	ldr	r2, [r4, #4]
 800c58c:	42a3      	cmp	r3, r4
 800c58e:	bf0c      	ite	eq
 800c590:	f8c8 2000 	streq.w	r2, [r8]
 800c594:	605a      	strne	r2, [r3, #4]
 800c596:	e7eb      	b.n	800c570 <_malloc_r+0xa8>
 800c598:	4623      	mov	r3, r4
 800c59a:	6864      	ldr	r4, [r4, #4]
 800c59c:	e7ae      	b.n	800c4fc <_malloc_r+0x34>
 800c59e:	463c      	mov	r4, r7
 800c5a0:	687f      	ldr	r7, [r7, #4]
 800c5a2:	e7b6      	b.n	800c512 <_malloc_r+0x4a>
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	42a3      	cmp	r3, r4
 800c5aa:	d1fb      	bne.n	800c5a4 <_malloc_r+0xdc>
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	6053      	str	r3, [r2, #4]
 800c5b0:	e7de      	b.n	800c570 <_malloc_r+0xa8>
 800c5b2:	230c      	movs	r3, #12
 800c5b4:	6033      	str	r3, [r6, #0]
 800c5b6:	4630      	mov	r0, r6
 800c5b8:	f000 f80c 	bl	800c5d4 <__malloc_unlock>
 800c5bc:	e794      	b.n	800c4e8 <_malloc_r+0x20>
 800c5be:	6005      	str	r5, [r0, #0]
 800c5c0:	e7d6      	b.n	800c570 <_malloc_r+0xa8>
 800c5c2:	bf00      	nop
 800c5c4:	20002a04 	.word	0x20002a04

0800c5c8 <__malloc_lock>:
 800c5c8:	4801      	ldr	r0, [pc, #4]	@ (800c5d0 <__malloc_lock+0x8>)
 800c5ca:	f7ff bf01 	b.w	800c3d0 <__retarget_lock_acquire_recursive>
 800c5ce:	bf00      	nop
 800c5d0:	200029fc 	.word	0x200029fc

0800c5d4 <__malloc_unlock>:
 800c5d4:	4801      	ldr	r0, [pc, #4]	@ (800c5dc <__malloc_unlock+0x8>)
 800c5d6:	f7ff befc 	b.w	800c3d2 <__retarget_lock_release_recursive>
 800c5da:	bf00      	nop
 800c5dc:	200029fc 	.word	0x200029fc

0800c5e0 <__ssputs_r>:
 800c5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5e4:	688e      	ldr	r6, [r1, #8]
 800c5e6:	461f      	mov	r7, r3
 800c5e8:	42be      	cmp	r6, r7
 800c5ea:	680b      	ldr	r3, [r1, #0]
 800c5ec:	4682      	mov	sl, r0
 800c5ee:	460c      	mov	r4, r1
 800c5f0:	4690      	mov	r8, r2
 800c5f2:	d82d      	bhi.n	800c650 <__ssputs_r+0x70>
 800c5f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c5f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c5fc:	d026      	beq.n	800c64c <__ssputs_r+0x6c>
 800c5fe:	6965      	ldr	r5, [r4, #20]
 800c600:	6909      	ldr	r1, [r1, #16]
 800c602:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c606:	eba3 0901 	sub.w	r9, r3, r1
 800c60a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c60e:	1c7b      	adds	r3, r7, #1
 800c610:	444b      	add	r3, r9
 800c612:	106d      	asrs	r5, r5, #1
 800c614:	429d      	cmp	r5, r3
 800c616:	bf38      	it	cc
 800c618:	461d      	movcc	r5, r3
 800c61a:	0553      	lsls	r3, r2, #21
 800c61c:	d527      	bpl.n	800c66e <__ssputs_r+0x8e>
 800c61e:	4629      	mov	r1, r5
 800c620:	f7ff ff52 	bl	800c4c8 <_malloc_r>
 800c624:	4606      	mov	r6, r0
 800c626:	b360      	cbz	r0, 800c682 <__ssputs_r+0xa2>
 800c628:	6921      	ldr	r1, [r4, #16]
 800c62a:	464a      	mov	r2, r9
 800c62c:	f7ff fed2 	bl	800c3d4 <memcpy>
 800c630:	89a3      	ldrh	r3, [r4, #12]
 800c632:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c63a:	81a3      	strh	r3, [r4, #12]
 800c63c:	6126      	str	r6, [r4, #16]
 800c63e:	6165      	str	r5, [r4, #20]
 800c640:	444e      	add	r6, r9
 800c642:	eba5 0509 	sub.w	r5, r5, r9
 800c646:	6026      	str	r6, [r4, #0]
 800c648:	60a5      	str	r5, [r4, #8]
 800c64a:	463e      	mov	r6, r7
 800c64c:	42be      	cmp	r6, r7
 800c64e:	d900      	bls.n	800c652 <__ssputs_r+0x72>
 800c650:	463e      	mov	r6, r7
 800c652:	6820      	ldr	r0, [r4, #0]
 800c654:	4632      	mov	r2, r6
 800c656:	4641      	mov	r1, r8
 800c658:	f000 faa6 	bl	800cba8 <memmove>
 800c65c:	68a3      	ldr	r3, [r4, #8]
 800c65e:	1b9b      	subs	r3, r3, r6
 800c660:	60a3      	str	r3, [r4, #8]
 800c662:	6823      	ldr	r3, [r4, #0]
 800c664:	4433      	add	r3, r6
 800c666:	6023      	str	r3, [r4, #0]
 800c668:	2000      	movs	r0, #0
 800c66a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c66e:	462a      	mov	r2, r5
 800c670:	f000 fac4 	bl	800cbfc <_realloc_r>
 800c674:	4606      	mov	r6, r0
 800c676:	2800      	cmp	r0, #0
 800c678:	d1e0      	bne.n	800c63c <__ssputs_r+0x5c>
 800c67a:	6921      	ldr	r1, [r4, #16]
 800c67c:	4650      	mov	r0, sl
 800c67e:	f7ff feb7 	bl	800c3f0 <_free_r>
 800c682:	230c      	movs	r3, #12
 800c684:	f8ca 3000 	str.w	r3, [sl]
 800c688:	89a3      	ldrh	r3, [r4, #12]
 800c68a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c68e:	81a3      	strh	r3, [r4, #12]
 800c690:	f04f 30ff 	mov.w	r0, #4294967295
 800c694:	e7e9      	b.n	800c66a <__ssputs_r+0x8a>
	...

0800c698 <_svfiprintf_r>:
 800c698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c69c:	4698      	mov	r8, r3
 800c69e:	898b      	ldrh	r3, [r1, #12]
 800c6a0:	061b      	lsls	r3, r3, #24
 800c6a2:	b09d      	sub	sp, #116	@ 0x74
 800c6a4:	4607      	mov	r7, r0
 800c6a6:	460d      	mov	r5, r1
 800c6a8:	4614      	mov	r4, r2
 800c6aa:	d510      	bpl.n	800c6ce <_svfiprintf_r+0x36>
 800c6ac:	690b      	ldr	r3, [r1, #16]
 800c6ae:	b973      	cbnz	r3, 800c6ce <_svfiprintf_r+0x36>
 800c6b0:	2140      	movs	r1, #64	@ 0x40
 800c6b2:	f7ff ff09 	bl	800c4c8 <_malloc_r>
 800c6b6:	6028      	str	r0, [r5, #0]
 800c6b8:	6128      	str	r0, [r5, #16]
 800c6ba:	b930      	cbnz	r0, 800c6ca <_svfiprintf_r+0x32>
 800c6bc:	230c      	movs	r3, #12
 800c6be:	603b      	str	r3, [r7, #0]
 800c6c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6c4:	b01d      	add	sp, #116	@ 0x74
 800c6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ca:	2340      	movs	r3, #64	@ 0x40
 800c6cc:	616b      	str	r3, [r5, #20]
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6d2:	2320      	movs	r3, #32
 800c6d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c6d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6dc:	2330      	movs	r3, #48	@ 0x30
 800c6de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c87c <_svfiprintf_r+0x1e4>
 800c6e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c6e6:	f04f 0901 	mov.w	r9, #1
 800c6ea:	4623      	mov	r3, r4
 800c6ec:	469a      	mov	sl, r3
 800c6ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6f2:	b10a      	cbz	r2, 800c6f8 <_svfiprintf_r+0x60>
 800c6f4:	2a25      	cmp	r2, #37	@ 0x25
 800c6f6:	d1f9      	bne.n	800c6ec <_svfiprintf_r+0x54>
 800c6f8:	ebba 0b04 	subs.w	fp, sl, r4
 800c6fc:	d00b      	beq.n	800c716 <_svfiprintf_r+0x7e>
 800c6fe:	465b      	mov	r3, fp
 800c700:	4622      	mov	r2, r4
 800c702:	4629      	mov	r1, r5
 800c704:	4638      	mov	r0, r7
 800c706:	f7ff ff6b 	bl	800c5e0 <__ssputs_r>
 800c70a:	3001      	adds	r0, #1
 800c70c:	f000 80a7 	beq.w	800c85e <_svfiprintf_r+0x1c6>
 800c710:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c712:	445a      	add	r2, fp
 800c714:	9209      	str	r2, [sp, #36]	@ 0x24
 800c716:	f89a 3000 	ldrb.w	r3, [sl]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	f000 809f 	beq.w	800c85e <_svfiprintf_r+0x1c6>
 800c720:	2300      	movs	r3, #0
 800c722:	f04f 32ff 	mov.w	r2, #4294967295
 800c726:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c72a:	f10a 0a01 	add.w	sl, sl, #1
 800c72e:	9304      	str	r3, [sp, #16]
 800c730:	9307      	str	r3, [sp, #28]
 800c732:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c736:	931a      	str	r3, [sp, #104]	@ 0x68
 800c738:	4654      	mov	r4, sl
 800c73a:	2205      	movs	r2, #5
 800c73c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c740:	484e      	ldr	r0, [pc, #312]	@ (800c87c <_svfiprintf_r+0x1e4>)
 800c742:	f7f3 fd45 	bl	80001d0 <memchr>
 800c746:	9a04      	ldr	r2, [sp, #16]
 800c748:	b9d8      	cbnz	r0, 800c782 <_svfiprintf_r+0xea>
 800c74a:	06d0      	lsls	r0, r2, #27
 800c74c:	bf44      	itt	mi
 800c74e:	2320      	movmi	r3, #32
 800c750:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c754:	0711      	lsls	r1, r2, #28
 800c756:	bf44      	itt	mi
 800c758:	232b      	movmi	r3, #43	@ 0x2b
 800c75a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c75e:	f89a 3000 	ldrb.w	r3, [sl]
 800c762:	2b2a      	cmp	r3, #42	@ 0x2a
 800c764:	d015      	beq.n	800c792 <_svfiprintf_r+0xfa>
 800c766:	9a07      	ldr	r2, [sp, #28]
 800c768:	4654      	mov	r4, sl
 800c76a:	2000      	movs	r0, #0
 800c76c:	f04f 0c0a 	mov.w	ip, #10
 800c770:	4621      	mov	r1, r4
 800c772:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c776:	3b30      	subs	r3, #48	@ 0x30
 800c778:	2b09      	cmp	r3, #9
 800c77a:	d94b      	bls.n	800c814 <_svfiprintf_r+0x17c>
 800c77c:	b1b0      	cbz	r0, 800c7ac <_svfiprintf_r+0x114>
 800c77e:	9207      	str	r2, [sp, #28]
 800c780:	e014      	b.n	800c7ac <_svfiprintf_r+0x114>
 800c782:	eba0 0308 	sub.w	r3, r0, r8
 800c786:	fa09 f303 	lsl.w	r3, r9, r3
 800c78a:	4313      	orrs	r3, r2
 800c78c:	9304      	str	r3, [sp, #16]
 800c78e:	46a2      	mov	sl, r4
 800c790:	e7d2      	b.n	800c738 <_svfiprintf_r+0xa0>
 800c792:	9b03      	ldr	r3, [sp, #12]
 800c794:	1d19      	adds	r1, r3, #4
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	9103      	str	r1, [sp, #12]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	bfbb      	ittet	lt
 800c79e:	425b      	neglt	r3, r3
 800c7a0:	f042 0202 	orrlt.w	r2, r2, #2
 800c7a4:	9307      	strge	r3, [sp, #28]
 800c7a6:	9307      	strlt	r3, [sp, #28]
 800c7a8:	bfb8      	it	lt
 800c7aa:	9204      	strlt	r2, [sp, #16]
 800c7ac:	7823      	ldrb	r3, [r4, #0]
 800c7ae:	2b2e      	cmp	r3, #46	@ 0x2e
 800c7b0:	d10a      	bne.n	800c7c8 <_svfiprintf_r+0x130>
 800c7b2:	7863      	ldrb	r3, [r4, #1]
 800c7b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7b6:	d132      	bne.n	800c81e <_svfiprintf_r+0x186>
 800c7b8:	9b03      	ldr	r3, [sp, #12]
 800c7ba:	1d1a      	adds	r2, r3, #4
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	9203      	str	r2, [sp, #12]
 800c7c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c7c4:	3402      	adds	r4, #2
 800c7c6:	9305      	str	r3, [sp, #20]
 800c7c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c88c <_svfiprintf_r+0x1f4>
 800c7cc:	7821      	ldrb	r1, [r4, #0]
 800c7ce:	2203      	movs	r2, #3
 800c7d0:	4650      	mov	r0, sl
 800c7d2:	f7f3 fcfd 	bl	80001d0 <memchr>
 800c7d6:	b138      	cbz	r0, 800c7e8 <_svfiprintf_r+0x150>
 800c7d8:	9b04      	ldr	r3, [sp, #16]
 800c7da:	eba0 000a 	sub.w	r0, r0, sl
 800c7de:	2240      	movs	r2, #64	@ 0x40
 800c7e0:	4082      	lsls	r2, r0
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	3401      	adds	r4, #1
 800c7e6:	9304      	str	r3, [sp, #16]
 800c7e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7ec:	4824      	ldr	r0, [pc, #144]	@ (800c880 <_svfiprintf_r+0x1e8>)
 800c7ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c7f2:	2206      	movs	r2, #6
 800c7f4:	f7f3 fcec 	bl	80001d0 <memchr>
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	d036      	beq.n	800c86a <_svfiprintf_r+0x1d2>
 800c7fc:	4b21      	ldr	r3, [pc, #132]	@ (800c884 <_svfiprintf_r+0x1ec>)
 800c7fe:	bb1b      	cbnz	r3, 800c848 <_svfiprintf_r+0x1b0>
 800c800:	9b03      	ldr	r3, [sp, #12]
 800c802:	3307      	adds	r3, #7
 800c804:	f023 0307 	bic.w	r3, r3, #7
 800c808:	3308      	adds	r3, #8
 800c80a:	9303      	str	r3, [sp, #12]
 800c80c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c80e:	4433      	add	r3, r6
 800c810:	9309      	str	r3, [sp, #36]	@ 0x24
 800c812:	e76a      	b.n	800c6ea <_svfiprintf_r+0x52>
 800c814:	fb0c 3202 	mla	r2, ip, r2, r3
 800c818:	460c      	mov	r4, r1
 800c81a:	2001      	movs	r0, #1
 800c81c:	e7a8      	b.n	800c770 <_svfiprintf_r+0xd8>
 800c81e:	2300      	movs	r3, #0
 800c820:	3401      	adds	r4, #1
 800c822:	9305      	str	r3, [sp, #20]
 800c824:	4619      	mov	r1, r3
 800c826:	f04f 0c0a 	mov.w	ip, #10
 800c82a:	4620      	mov	r0, r4
 800c82c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c830:	3a30      	subs	r2, #48	@ 0x30
 800c832:	2a09      	cmp	r2, #9
 800c834:	d903      	bls.n	800c83e <_svfiprintf_r+0x1a6>
 800c836:	2b00      	cmp	r3, #0
 800c838:	d0c6      	beq.n	800c7c8 <_svfiprintf_r+0x130>
 800c83a:	9105      	str	r1, [sp, #20]
 800c83c:	e7c4      	b.n	800c7c8 <_svfiprintf_r+0x130>
 800c83e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c842:	4604      	mov	r4, r0
 800c844:	2301      	movs	r3, #1
 800c846:	e7f0      	b.n	800c82a <_svfiprintf_r+0x192>
 800c848:	ab03      	add	r3, sp, #12
 800c84a:	9300      	str	r3, [sp, #0]
 800c84c:	462a      	mov	r2, r5
 800c84e:	4b0e      	ldr	r3, [pc, #56]	@ (800c888 <_svfiprintf_r+0x1f0>)
 800c850:	a904      	add	r1, sp, #16
 800c852:	4638      	mov	r0, r7
 800c854:	f3af 8000 	nop.w
 800c858:	1c42      	adds	r2, r0, #1
 800c85a:	4606      	mov	r6, r0
 800c85c:	d1d6      	bne.n	800c80c <_svfiprintf_r+0x174>
 800c85e:	89ab      	ldrh	r3, [r5, #12]
 800c860:	065b      	lsls	r3, r3, #25
 800c862:	f53f af2d 	bmi.w	800c6c0 <_svfiprintf_r+0x28>
 800c866:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c868:	e72c      	b.n	800c6c4 <_svfiprintf_r+0x2c>
 800c86a:	ab03      	add	r3, sp, #12
 800c86c:	9300      	str	r3, [sp, #0]
 800c86e:	462a      	mov	r2, r5
 800c870:	4b05      	ldr	r3, [pc, #20]	@ (800c888 <_svfiprintf_r+0x1f0>)
 800c872:	a904      	add	r1, sp, #16
 800c874:	4638      	mov	r0, r7
 800c876:	f000 f879 	bl	800c96c <_printf_i>
 800c87a:	e7ed      	b.n	800c858 <_svfiprintf_r+0x1c0>
 800c87c:	0800ccfc 	.word	0x0800ccfc
 800c880:	0800cd06 	.word	0x0800cd06
 800c884:	00000000 	.word	0x00000000
 800c888:	0800c5e1 	.word	0x0800c5e1
 800c88c:	0800cd02 	.word	0x0800cd02

0800c890 <_printf_common>:
 800c890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c894:	4616      	mov	r6, r2
 800c896:	4698      	mov	r8, r3
 800c898:	688a      	ldr	r2, [r1, #8]
 800c89a:	690b      	ldr	r3, [r1, #16]
 800c89c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	bfb8      	it	lt
 800c8a4:	4613      	movlt	r3, r2
 800c8a6:	6033      	str	r3, [r6, #0]
 800c8a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c8ac:	4607      	mov	r7, r0
 800c8ae:	460c      	mov	r4, r1
 800c8b0:	b10a      	cbz	r2, 800c8b6 <_printf_common+0x26>
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	6033      	str	r3, [r6, #0]
 800c8b6:	6823      	ldr	r3, [r4, #0]
 800c8b8:	0699      	lsls	r1, r3, #26
 800c8ba:	bf42      	ittt	mi
 800c8bc:	6833      	ldrmi	r3, [r6, #0]
 800c8be:	3302      	addmi	r3, #2
 800c8c0:	6033      	strmi	r3, [r6, #0]
 800c8c2:	6825      	ldr	r5, [r4, #0]
 800c8c4:	f015 0506 	ands.w	r5, r5, #6
 800c8c8:	d106      	bne.n	800c8d8 <_printf_common+0x48>
 800c8ca:	f104 0a19 	add.w	sl, r4, #25
 800c8ce:	68e3      	ldr	r3, [r4, #12]
 800c8d0:	6832      	ldr	r2, [r6, #0]
 800c8d2:	1a9b      	subs	r3, r3, r2
 800c8d4:	42ab      	cmp	r3, r5
 800c8d6:	dc26      	bgt.n	800c926 <_printf_common+0x96>
 800c8d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c8dc:	6822      	ldr	r2, [r4, #0]
 800c8de:	3b00      	subs	r3, #0
 800c8e0:	bf18      	it	ne
 800c8e2:	2301      	movne	r3, #1
 800c8e4:	0692      	lsls	r2, r2, #26
 800c8e6:	d42b      	bmi.n	800c940 <_printf_common+0xb0>
 800c8e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c8ec:	4641      	mov	r1, r8
 800c8ee:	4638      	mov	r0, r7
 800c8f0:	47c8      	blx	r9
 800c8f2:	3001      	adds	r0, #1
 800c8f4:	d01e      	beq.n	800c934 <_printf_common+0xa4>
 800c8f6:	6823      	ldr	r3, [r4, #0]
 800c8f8:	6922      	ldr	r2, [r4, #16]
 800c8fa:	f003 0306 	and.w	r3, r3, #6
 800c8fe:	2b04      	cmp	r3, #4
 800c900:	bf02      	ittt	eq
 800c902:	68e5      	ldreq	r5, [r4, #12]
 800c904:	6833      	ldreq	r3, [r6, #0]
 800c906:	1aed      	subeq	r5, r5, r3
 800c908:	68a3      	ldr	r3, [r4, #8]
 800c90a:	bf0c      	ite	eq
 800c90c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c910:	2500      	movne	r5, #0
 800c912:	4293      	cmp	r3, r2
 800c914:	bfc4      	itt	gt
 800c916:	1a9b      	subgt	r3, r3, r2
 800c918:	18ed      	addgt	r5, r5, r3
 800c91a:	2600      	movs	r6, #0
 800c91c:	341a      	adds	r4, #26
 800c91e:	42b5      	cmp	r5, r6
 800c920:	d11a      	bne.n	800c958 <_printf_common+0xc8>
 800c922:	2000      	movs	r0, #0
 800c924:	e008      	b.n	800c938 <_printf_common+0xa8>
 800c926:	2301      	movs	r3, #1
 800c928:	4652      	mov	r2, sl
 800c92a:	4641      	mov	r1, r8
 800c92c:	4638      	mov	r0, r7
 800c92e:	47c8      	blx	r9
 800c930:	3001      	adds	r0, #1
 800c932:	d103      	bne.n	800c93c <_printf_common+0xac>
 800c934:	f04f 30ff 	mov.w	r0, #4294967295
 800c938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c93c:	3501      	adds	r5, #1
 800c93e:	e7c6      	b.n	800c8ce <_printf_common+0x3e>
 800c940:	18e1      	adds	r1, r4, r3
 800c942:	1c5a      	adds	r2, r3, #1
 800c944:	2030      	movs	r0, #48	@ 0x30
 800c946:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c94a:	4422      	add	r2, r4
 800c94c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c950:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c954:	3302      	adds	r3, #2
 800c956:	e7c7      	b.n	800c8e8 <_printf_common+0x58>
 800c958:	2301      	movs	r3, #1
 800c95a:	4622      	mov	r2, r4
 800c95c:	4641      	mov	r1, r8
 800c95e:	4638      	mov	r0, r7
 800c960:	47c8      	blx	r9
 800c962:	3001      	adds	r0, #1
 800c964:	d0e6      	beq.n	800c934 <_printf_common+0xa4>
 800c966:	3601      	adds	r6, #1
 800c968:	e7d9      	b.n	800c91e <_printf_common+0x8e>
	...

0800c96c <_printf_i>:
 800c96c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c970:	7e0f      	ldrb	r7, [r1, #24]
 800c972:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c974:	2f78      	cmp	r7, #120	@ 0x78
 800c976:	4691      	mov	r9, r2
 800c978:	4680      	mov	r8, r0
 800c97a:	460c      	mov	r4, r1
 800c97c:	469a      	mov	sl, r3
 800c97e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c982:	d807      	bhi.n	800c994 <_printf_i+0x28>
 800c984:	2f62      	cmp	r7, #98	@ 0x62
 800c986:	d80a      	bhi.n	800c99e <_printf_i+0x32>
 800c988:	2f00      	cmp	r7, #0
 800c98a:	f000 80d1 	beq.w	800cb30 <_printf_i+0x1c4>
 800c98e:	2f58      	cmp	r7, #88	@ 0x58
 800c990:	f000 80b8 	beq.w	800cb04 <_printf_i+0x198>
 800c994:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c998:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c99c:	e03a      	b.n	800ca14 <_printf_i+0xa8>
 800c99e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c9a2:	2b15      	cmp	r3, #21
 800c9a4:	d8f6      	bhi.n	800c994 <_printf_i+0x28>
 800c9a6:	a101      	add	r1, pc, #4	@ (adr r1, 800c9ac <_printf_i+0x40>)
 800c9a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c9ac:	0800ca05 	.word	0x0800ca05
 800c9b0:	0800ca19 	.word	0x0800ca19
 800c9b4:	0800c995 	.word	0x0800c995
 800c9b8:	0800c995 	.word	0x0800c995
 800c9bc:	0800c995 	.word	0x0800c995
 800c9c0:	0800c995 	.word	0x0800c995
 800c9c4:	0800ca19 	.word	0x0800ca19
 800c9c8:	0800c995 	.word	0x0800c995
 800c9cc:	0800c995 	.word	0x0800c995
 800c9d0:	0800c995 	.word	0x0800c995
 800c9d4:	0800c995 	.word	0x0800c995
 800c9d8:	0800cb17 	.word	0x0800cb17
 800c9dc:	0800ca43 	.word	0x0800ca43
 800c9e0:	0800cad1 	.word	0x0800cad1
 800c9e4:	0800c995 	.word	0x0800c995
 800c9e8:	0800c995 	.word	0x0800c995
 800c9ec:	0800cb39 	.word	0x0800cb39
 800c9f0:	0800c995 	.word	0x0800c995
 800c9f4:	0800ca43 	.word	0x0800ca43
 800c9f8:	0800c995 	.word	0x0800c995
 800c9fc:	0800c995 	.word	0x0800c995
 800ca00:	0800cad9 	.word	0x0800cad9
 800ca04:	6833      	ldr	r3, [r6, #0]
 800ca06:	1d1a      	adds	r2, r3, #4
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	6032      	str	r2, [r6, #0]
 800ca0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ca10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ca14:	2301      	movs	r3, #1
 800ca16:	e09c      	b.n	800cb52 <_printf_i+0x1e6>
 800ca18:	6833      	ldr	r3, [r6, #0]
 800ca1a:	6820      	ldr	r0, [r4, #0]
 800ca1c:	1d19      	adds	r1, r3, #4
 800ca1e:	6031      	str	r1, [r6, #0]
 800ca20:	0606      	lsls	r6, r0, #24
 800ca22:	d501      	bpl.n	800ca28 <_printf_i+0xbc>
 800ca24:	681d      	ldr	r5, [r3, #0]
 800ca26:	e003      	b.n	800ca30 <_printf_i+0xc4>
 800ca28:	0645      	lsls	r5, r0, #25
 800ca2a:	d5fb      	bpl.n	800ca24 <_printf_i+0xb8>
 800ca2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ca30:	2d00      	cmp	r5, #0
 800ca32:	da03      	bge.n	800ca3c <_printf_i+0xd0>
 800ca34:	232d      	movs	r3, #45	@ 0x2d
 800ca36:	426d      	negs	r5, r5
 800ca38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca3c:	4858      	ldr	r0, [pc, #352]	@ (800cba0 <_printf_i+0x234>)
 800ca3e:	230a      	movs	r3, #10
 800ca40:	e011      	b.n	800ca66 <_printf_i+0xfa>
 800ca42:	6821      	ldr	r1, [r4, #0]
 800ca44:	6833      	ldr	r3, [r6, #0]
 800ca46:	0608      	lsls	r0, r1, #24
 800ca48:	f853 5b04 	ldr.w	r5, [r3], #4
 800ca4c:	d402      	bmi.n	800ca54 <_printf_i+0xe8>
 800ca4e:	0649      	lsls	r1, r1, #25
 800ca50:	bf48      	it	mi
 800ca52:	b2ad      	uxthmi	r5, r5
 800ca54:	2f6f      	cmp	r7, #111	@ 0x6f
 800ca56:	4852      	ldr	r0, [pc, #328]	@ (800cba0 <_printf_i+0x234>)
 800ca58:	6033      	str	r3, [r6, #0]
 800ca5a:	bf14      	ite	ne
 800ca5c:	230a      	movne	r3, #10
 800ca5e:	2308      	moveq	r3, #8
 800ca60:	2100      	movs	r1, #0
 800ca62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ca66:	6866      	ldr	r6, [r4, #4]
 800ca68:	60a6      	str	r6, [r4, #8]
 800ca6a:	2e00      	cmp	r6, #0
 800ca6c:	db05      	blt.n	800ca7a <_printf_i+0x10e>
 800ca6e:	6821      	ldr	r1, [r4, #0]
 800ca70:	432e      	orrs	r6, r5
 800ca72:	f021 0104 	bic.w	r1, r1, #4
 800ca76:	6021      	str	r1, [r4, #0]
 800ca78:	d04b      	beq.n	800cb12 <_printf_i+0x1a6>
 800ca7a:	4616      	mov	r6, r2
 800ca7c:	fbb5 f1f3 	udiv	r1, r5, r3
 800ca80:	fb03 5711 	mls	r7, r3, r1, r5
 800ca84:	5dc7      	ldrb	r7, [r0, r7]
 800ca86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ca8a:	462f      	mov	r7, r5
 800ca8c:	42bb      	cmp	r3, r7
 800ca8e:	460d      	mov	r5, r1
 800ca90:	d9f4      	bls.n	800ca7c <_printf_i+0x110>
 800ca92:	2b08      	cmp	r3, #8
 800ca94:	d10b      	bne.n	800caae <_printf_i+0x142>
 800ca96:	6823      	ldr	r3, [r4, #0]
 800ca98:	07df      	lsls	r7, r3, #31
 800ca9a:	d508      	bpl.n	800caae <_printf_i+0x142>
 800ca9c:	6923      	ldr	r3, [r4, #16]
 800ca9e:	6861      	ldr	r1, [r4, #4]
 800caa0:	4299      	cmp	r1, r3
 800caa2:	bfde      	ittt	le
 800caa4:	2330      	movle	r3, #48	@ 0x30
 800caa6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800caaa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800caae:	1b92      	subs	r2, r2, r6
 800cab0:	6122      	str	r2, [r4, #16]
 800cab2:	f8cd a000 	str.w	sl, [sp]
 800cab6:	464b      	mov	r3, r9
 800cab8:	aa03      	add	r2, sp, #12
 800caba:	4621      	mov	r1, r4
 800cabc:	4640      	mov	r0, r8
 800cabe:	f7ff fee7 	bl	800c890 <_printf_common>
 800cac2:	3001      	adds	r0, #1
 800cac4:	d14a      	bne.n	800cb5c <_printf_i+0x1f0>
 800cac6:	f04f 30ff 	mov.w	r0, #4294967295
 800caca:	b004      	add	sp, #16
 800cacc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cad0:	6823      	ldr	r3, [r4, #0]
 800cad2:	f043 0320 	orr.w	r3, r3, #32
 800cad6:	6023      	str	r3, [r4, #0]
 800cad8:	4832      	ldr	r0, [pc, #200]	@ (800cba4 <_printf_i+0x238>)
 800cada:	2778      	movs	r7, #120	@ 0x78
 800cadc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cae0:	6823      	ldr	r3, [r4, #0]
 800cae2:	6831      	ldr	r1, [r6, #0]
 800cae4:	061f      	lsls	r7, r3, #24
 800cae6:	f851 5b04 	ldr.w	r5, [r1], #4
 800caea:	d402      	bmi.n	800caf2 <_printf_i+0x186>
 800caec:	065f      	lsls	r7, r3, #25
 800caee:	bf48      	it	mi
 800caf0:	b2ad      	uxthmi	r5, r5
 800caf2:	6031      	str	r1, [r6, #0]
 800caf4:	07d9      	lsls	r1, r3, #31
 800caf6:	bf44      	itt	mi
 800caf8:	f043 0320 	orrmi.w	r3, r3, #32
 800cafc:	6023      	strmi	r3, [r4, #0]
 800cafe:	b11d      	cbz	r5, 800cb08 <_printf_i+0x19c>
 800cb00:	2310      	movs	r3, #16
 800cb02:	e7ad      	b.n	800ca60 <_printf_i+0xf4>
 800cb04:	4826      	ldr	r0, [pc, #152]	@ (800cba0 <_printf_i+0x234>)
 800cb06:	e7e9      	b.n	800cadc <_printf_i+0x170>
 800cb08:	6823      	ldr	r3, [r4, #0]
 800cb0a:	f023 0320 	bic.w	r3, r3, #32
 800cb0e:	6023      	str	r3, [r4, #0]
 800cb10:	e7f6      	b.n	800cb00 <_printf_i+0x194>
 800cb12:	4616      	mov	r6, r2
 800cb14:	e7bd      	b.n	800ca92 <_printf_i+0x126>
 800cb16:	6833      	ldr	r3, [r6, #0]
 800cb18:	6825      	ldr	r5, [r4, #0]
 800cb1a:	6961      	ldr	r1, [r4, #20]
 800cb1c:	1d18      	adds	r0, r3, #4
 800cb1e:	6030      	str	r0, [r6, #0]
 800cb20:	062e      	lsls	r6, r5, #24
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	d501      	bpl.n	800cb2a <_printf_i+0x1be>
 800cb26:	6019      	str	r1, [r3, #0]
 800cb28:	e002      	b.n	800cb30 <_printf_i+0x1c4>
 800cb2a:	0668      	lsls	r0, r5, #25
 800cb2c:	d5fb      	bpl.n	800cb26 <_printf_i+0x1ba>
 800cb2e:	8019      	strh	r1, [r3, #0]
 800cb30:	2300      	movs	r3, #0
 800cb32:	6123      	str	r3, [r4, #16]
 800cb34:	4616      	mov	r6, r2
 800cb36:	e7bc      	b.n	800cab2 <_printf_i+0x146>
 800cb38:	6833      	ldr	r3, [r6, #0]
 800cb3a:	1d1a      	adds	r2, r3, #4
 800cb3c:	6032      	str	r2, [r6, #0]
 800cb3e:	681e      	ldr	r6, [r3, #0]
 800cb40:	6862      	ldr	r2, [r4, #4]
 800cb42:	2100      	movs	r1, #0
 800cb44:	4630      	mov	r0, r6
 800cb46:	f7f3 fb43 	bl	80001d0 <memchr>
 800cb4a:	b108      	cbz	r0, 800cb50 <_printf_i+0x1e4>
 800cb4c:	1b80      	subs	r0, r0, r6
 800cb4e:	6060      	str	r0, [r4, #4]
 800cb50:	6863      	ldr	r3, [r4, #4]
 800cb52:	6123      	str	r3, [r4, #16]
 800cb54:	2300      	movs	r3, #0
 800cb56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb5a:	e7aa      	b.n	800cab2 <_printf_i+0x146>
 800cb5c:	6923      	ldr	r3, [r4, #16]
 800cb5e:	4632      	mov	r2, r6
 800cb60:	4649      	mov	r1, r9
 800cb62:	4640      	mov	r0, r8
 800cb64:	47d0      	blx	sl
 800cb66:	3001      	adds	r0, #1
 800cb68:	d0ad      	beq.n	800cac6 <_printf_i+0x15a>
 800cb6a:	6823      	ldr	r3, [r4, #0]
 800cb6c:	079b      	lsls	r3, r3, #30
 800cb6e:	d413      	bmi.n	800cb98 <_printf_i+0x22c>
 800cb70:	68e0      	ldr	r0, [r4, #12]
 800cb72:	9b03      	ldr	r3, [sp, #12]
 800cb74:	4298      	cmp	r0, r3
 800cb76:	bfb8      	it	lt
 800cb78:	4618      	movlt	r0, r3
 800cb7a:	e7a6      	b.n	800caca <_printf_i+0x15e>
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	4632      	mov	r2, r6
 800cb80:	4649      	mov	r1, r9
 800cb82:	4640      	mov	r0, r8
 800cb84:	47d0      	blx	sl
 800cb86:	3001      	adds	r0, #1
 800cb88:	d09d      	beq.n	800cac6 <_printf_i+0x15a>
 800cb8a:	3501      	adds	r5, #1
 800cb8c:	68e3      	ldr	r3, [r4, #12]
 800cb8e:	9903      	ldr	r1, [sp, #12]
 800cb90:	1a5b      	subs	r3, r3, r1
 800cb92:	42ab      	cmp	r3, r5
 800cb94:	dcf2      	bgt.n	800cb7c <_printf_i+0x210>
 800cb96:	e7eb      	b.n	800cb70 <_printf_i+0x204>
 800cb98:	2500      	movs	r5, #0
 800cb9a:	f104 0619 	add.w	r6, r4, #25
 800cb9e:	e7f5      	b.n	800cb8c <_printf_i+0x220>
 800cba0:	0800cd0d 	.word	0x0800cd0d
 800cba4:	0800cd1e 	.word	0x0800cd1e

0800cba8 <memmove>:
 800cba8:	4288      	cmp	r0, r1
 800cbaa:	b510      	push	{r4, lr}
 800cbac:	eb01 0402 	add.w	r4, r1, r2
 800cbb0:	d902      	bls.n	800cbb8 <memmove+0x10>
 800cbb2:	4284      	cmp	r4, r0
 800cbb4:	4623      	mov	r3, r4
 800cbb6:	d807      	bhi.n	800cbc8 <memmove+0x20>
 800cbb8:	1e43      	subs	r3, r0, #1
 800cbba:	42a1      	cmp	r1, r4
 800cbbc:	d008      	beq.n	800cbd0 <memmove+0x28>
 800cbbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cbc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cbc6:	e7f8      	b.n	800cbba <memmove+0x12>
 800cbc8:	4402      	add	r2, r0
 800cbca:	4601      	mov	r1, r0
 800cbcc:	428a      	cmp	r2, r1
 800cbce:	d100      	bne.n	800cbd2 <memmove+0x2a>
 800cbd0:	bd10      	pop	{r4, pc}
 800cbd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cbd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cbda:	e7f7      	b.n	800cbcc <memmove+0x24>

0800cbdc <_sbrk_r>:
 800cbdc:	b538      	push	{r3, r4, r5, lr}
 800cbde:	4d06      	ldr	r5, [pc, #24]	@ (800cbf8 <_sbrk_r+0x1c>)
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	4604      	mov	r4, r0
 800cbe4:	4608      	mov	r0, r1
 800cbe6:	602b      	str	r3, [r5, #0]
 800cbe8:	f7f4 fa18 	bl	800101c <_sbrk>
 800cbec:	1c43      	adds	r3, r0, #1
 800cbee:	d102      	bne.n	800cbf6 <_sbrk_r+0x1a>
 800cbf0:	682b      	ldr	r3, [r5, #0]
 800cbf2:	b103      	cbz	r3, 800cbf6 <_sbrk_r+0x1a>
 800cbf4:	6023      	str	r3, [r4, #0]
 800cbf6:	bd38      	pop	{r3, r4, r5, pc}
 800cbf8:	200029f8 	.word	0x200029f8

0800cbfc <_realloc_r>:
 800cbfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc00:	4607      	mov	r7, r0
 800cc02:	4614      	mov	r4, r2
 800cc04:	460d      	mov	r5, r1
 800cc06:	b921      	cbnz	r1, 800cc12 <_realloc_r+0x16>
 800cc08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc0c:	4611      	mov	r1, r2
 800cc0e:	f7ff bc5b 	b.w	800c4c8 <_malloc_r>
 800cc12:	b92a      	cbnz	r2, 800cc20 <_realloc_r+0x24>
 800cc14:	f7ff fbec 	bl	800c3f0 <_free_r>
 800cc18:	4625      	mov	r5, r4
 800cc1a:	4628      	mov	r0, r5
 800cc1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc20:	f000 f81a 	bl	800cc58 <_malloc_usable_size_r>
 800cc24:	4284      	cmp	r4, r0
 800cc26:	4606      	mov	r6, r0
 800cc28:	d802      	bhi.n	800cc30 <_realloc_r+0x34>
 800cc2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cc2e:	d8f4      	bhi.n	800cc1a <_realloc_r+0x1e>
 800cc30:	4621      	mov	r1, r4
 800cc32:	4638      	mov	r0, r7
 800cc34:	f7ff fc48 	bl	800c4c8 <_malloc_r>
 800cc38:	4680      	mov	r8, r0
 800cc3a:	b908      	cbnz	r0, 800cc40 <_realloc_r+0x44>
 800cc3c:	4645      	mov	r5, r8
 800cc3e:	e7ec      	b.n	800cc1a <_realloc_r+0x1e>
 800cc40:	42b4      	cmp	r4, r6
 800cc42:	4622      	mov	r2, r4
 800cc44:	4629      	mov	r1, r5
 800cc46:	bf28      	it	cs
 800cc48:	4632      	movcs	r2, r6
 800cc4a:	f7ff fbc3 	bl	800c3d4 <memcpy>
 800cc4e:	4629      	mov	r1, r5
 800cc50:	4638      	mov	r0, r7
 800cc52:	f7ff fbcd 	bl	800c3f0 <_free_r>
 800cc56:	e7f1      	b.n	800cc3c <_realloc_r+0x40>

0800cc58 <_malloc_usable_size_r>:
 800cc58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc5c:	1f18      	subs	r0, r3, #4
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	bfbc      	itt	lt
 800cc62:	580b      	ldrlt	r3, [r1, r0]
 800cc64:	18c0      	addlt	r0, r0, r3
 800cc66:	4770      	bx	lr

0800cc68 <_init>:
 800cc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc6a:	bf00      	nop
 800cc6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc6e:	bc08      	pop	{r3}
 800cc70:	469e      	mov	lr, r3
 800cc72:	4770      	bx	lr

0800cc74 <_fini>:
 800cc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc76:	bf00      	nop
 800cc78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc7a:	bc08      	pop	{r3}
 800cc7c:	469e      	mov	lr, r3
 800cc7e:	4770      	bx	lr
